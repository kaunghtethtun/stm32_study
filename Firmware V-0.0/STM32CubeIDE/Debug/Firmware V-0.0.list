
Firmware V-0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e898  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800ea28  0800ea28  0000fa28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  000102c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0000fe68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  000102c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee70  0800ee70  0000fe70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee74  0800ee74  0000fe74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800ee78  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102c8  2**0
                  CONTENTS
 10 .bss          00001fe4  200002c8  200002c8  000102c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022ac  200022ac  000102c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec26  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e03  00000000  00000000  0002ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00033d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013d8  00000000  00000000  00035718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a05b  00000000  00000000  00036af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002323f  00000000  00000000  00060b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5670  00000000  00000000  00083d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001693fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007de8  00000000  00000000  00169440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  00171228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea10 	.word	0x0800ea10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800ea10 	.word	0x0800ea10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b9a0 	b.w	8000f80 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f83c 	bl	8000cc4 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff33 	bl	8000acc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fca9 	bl	80005e8 <__aeabi_dmul>
 8000c96:	f7ff ff57 	bl	8000b48 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc2a 	bl	80004f4 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fca0 	bl	80005e8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fae2 	bl	8000278 <__aeabi_dsub>
 8000cb4:	f7ff ff48 	bl	8000b48 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9d08      	ldr	r5, [sp, #32]
 8000cca:	460c      	mov	r4, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14e      	bne.n	8000d6e <__udivmoddi4+0xaa>
 8000cd0:	4694      	mov	ip, r2
 8000cd2:	458c      	cmp	ip, r1
 8000cd4:	4686      	mov	lr, r0
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	d962      	bls.n	8000da2 <__udivmoddi4+0xde>
 8000cdc:	b14a      	cbz	r2, 8000cf2 <__udivmoddi4+0x2e>
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	4091      	lsls	r1, r2
 8000ce4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	4319      	orrs	r1, r3
 8000cee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f f68c 	uxth.w	r6, ip
 8000cfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb07 1114 	mls	r1, r7, r4, r1
 8000d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0a:	fb04 f106 	mul.w	r1, r4, r6
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x64>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1a:	f080 8112 	bcs.w	8000f42 <__udivmoddi4+0x27e>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 810f 	bls.w	8000f42 <__udivmoddi4+0x27e>
 8000d24:	3c02      	subs	r4, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a59      	subs	r1, r3, r1
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d32:	fb07 1110 	mls	r1, r7, r0, r1
 8000d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3a:	fb00 f606 	mul.w	r6, r0, r6
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x94>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4a:	f080 80fc 	bcs.w	8000f46 <__udivmoddi4+0x282>
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	f240 80f9 	bls.w	8000f46 <__udivmoddi4+0x282>
 8000d54:	4463      	add	r3, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	1b9b      	subs	r3, r3, r6
 8000d5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa6>
 8000d62:	40d3      	lsrs	r3, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xba>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb4>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x150>
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xcc>
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	f0c0 80f0 	bcc.w	8000f70 <__udivmoddi4+0x2ac>
 8000d90:	1a86      	subs	r6, r0, r2
 8000d92:	eb64 0303 	sbc.w	r3, r4, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	2d00      	cmp	r5, #0
 8000d9a:	d0e6      	beq.n	8000d6a <__udivmoddi4+0xa6>
 8000d9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000da0:	e7e3      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x204>
 8000da8:	eba1 040c 	sub.w	r4, r1, ip
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa1f f78c 	uxth.w	r7, ip
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb07 f006 	mul.w	r0, r7, r6
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x11c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x11a>
 8000dd8:	4298      	cmp	r0, r3
 8000dda:	f200 80cd 	bhi.w	8000f78 <__udivmoddi4+0x2b4>
 8000dde:	4626      	mov	r6, r4
 8000de0:	1a1c      	subs	r4, r3, r0
 8000de2:	fa1f f38e 	uxth.w	r3, lr
 8000de6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dea:	fb08 4410 	mls	r4, r8, r0, r4
 8000dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df2:	fb00 f707 	mul.w	r7, r0, r7
 8000df6:	429f      	cmp	r7, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x148>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x146>
 8000e04:	429f      	cmp	r7, r3
 8000e06:	f200 80b0 	bhi.w	8000f6a <__udivmoddi4+0x2a6>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	1bdb      	subs	r3, r3, r7
 8000e0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x9c>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e24:	fa04 f301 	lsl.w	r3, r4, r1
 8000e28:	ea43 030c 	orr.w	r3, r3, ip
 8000e2c:	40f4      	lsrs	r4, r6
 8000e2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e32:	0c38      	lsrs	r0, r7, #16
 8000e34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e38:	fbb4 fef0 	udiv	lr, r4, r0
 8000e3c:	fa1f fc87 	uxth.w	ip, r7
 8000e40:	fb00 441e 	mls	r4, r0, lr, r4
 8000e44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e48:	fb0e f90c 	mul.w	r9, lr, ip
 8000e4c:	45a1      	cmp	r9, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x1a6>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5a:	f080 8084 	bcs.w	8000f66 <__udivmoddi4+0x2a2>
 8000e5e:	45a1      	cmp	r9, r4
 8000e60:	f240 8081 	bls.w	8000f66 <__udivmoddi4+0x2a2>
 8000e64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	eba4 0409 	sub.w	r4, r4, r9
 8000e6e:	fa1f f983 	uxth.w	r9, r3
 8000e72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e76:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1d2>
 8000e86:	193c      	adds	r4, r7, r4
 8000e88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e8c:	d267      	bcs.n	8000f5e <__udivmoddi4+0x29a>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d965      	bls.n	8000f5e <__udivmoddi4+0x29a>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ea2:	429c      	cmp	r4, r3
 8000ea4:	46ce      	mov	lr, r9
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	d351      	bcc.n	8000f4e <__udivmoddi4+0x28a>
 8000eaa:	d04e      	beq.n	8000f4a <__udivmoddi4+0x286>
 8000eac:	b155      	cbz	r5, 8000ec4 <__udivmoddi4+0x200>
 8000eae:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	40cb      	lsrs	r3, r1
 8000ebc:	431e      	orrs	r6, r3
 8000ebe:	40cc      	lsrs	r4, r1
 8000ec0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e750      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed8:	4094      	lsls	r4, r2
 8000eda:	430c      	orrs	r4, r1
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee4:	fa1f f78c 	uxth.w	r7, ip
 8000ee8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eec:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef0:	0c23      	lsrs	r3, r4, #16
 8000ef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef6:	fb00 f107 	mul.w	r1, r0, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x24c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f06:	d22c      	bcs.n	8000f62 <__udivmoddi4+0x29e>
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d92a      	bls.n	8000f62 <__udivmoddi4+0x29e>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f18:	fb08 3311 	mls	r3, r8, r1, r3
 8000f1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f20:	fb01 f307 	mul.w	r3, r1, r7
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x276>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f30:	d213      	bcs.n	8000f5a <__udivmoddi4+0x296>
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	d911      	bls.n	8000f5a <__udivmoddi4+0x296>
 8000f36:	3902      	subs	r1, #2
 8000f38:	4464      	add	r4, ip
 8000f3a:	1ae4      	subs	r4, r4, r3
 8000f3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f40:	e739      	b.n	8000db6 <__udivmoddi4+0xf2>
 8000f42:	4604      	mov	r4, r0
 8000f44:	e6f0      	b.n	8000d28 <__udivmoddi4+0x64>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e706      	b.n	8000d58 <__udivmoddi4+0x94>
 8000f4a:	45c8      	cmp	r8, r9
 8000f4c:	d2ae      	bcs.n	8000eac <__udivmoddi4+0x1e8>
 8000f4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	e7a8      	b.n	8000eac <__udivmoddi4+0x1e8>
 8000f5a:	4631      	mov	r1, r6
 8000f5c:	e7ed      	b.n	8000f3a <__udivmoddi4+0x276>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e799      	b.n	8000e96 <__udivmoddi4+0x1d2>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e7d4      	b.n	8000f10 <__udivmoddi4+0x24c>
 8000f66:	46d6      	mov	lr, sl
 8000f68:	e77f      	b.n	8000e6a <__udivmoddi4+0x1a6>
 8000f6a:	4463      	add	r3, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e74d      	b.n	8000e0c <__udivmoddi4+0x148>
 8000f70:	4606      	mov	r6, r0
 8000f72:	4623      	mov	r3, r4
 8000f74:	4608      	mov	r0, r1
 8000f76:	e70f      	b.n	8000d98 <__udivmoddi4+0xd4>
 8000f78:	3e02      	subs	r6, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	e730      	b.n	8000de0 <__udivmoddi4+0x11c>
 8000f7e:	bf00      	nop

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fc8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000fea:	f001 ff7f 	bl	8002eec <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ff4:	f000 fe84 	bl	8001d00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_ADC1_Init+0x9c>)
 800100a:	f002 f8e1 	bl	80031d0 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001014:	f000 fe74 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200002e4 	.word	0x200002e4
 8001024:	40012000 	.word	0x40012000

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <HAL_ADC_MspInit+0x8c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12f      	bne.n	80010aa <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_ADC_MspInit+0x90>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BATT_ADC_Pin;
 8001082:	2304      	movs	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4809      	ldr	r0, [pc, #36]	@ (80010bc <HAL_ADC_MspInit+0x94>)
 8001096:	f003 fc73 	bl	8004980 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2012      	movs	r0, #18
 80010a0:	f003 fa1b 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a4:	2012      	movs	r0, #18
 80010a6:	f003 fa34 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012000 	.word	0x40012000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010c8:	4a3f      	ldr	r2, [pc, #252]	@ (80011c8 <MX_CAN1_Init+0x108>)
 80010ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010ce:	2206      	movs	r2, #6
 80010d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d8:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010de:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010e0:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80010e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e6:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80010ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ee:	4b35      	ldr	r3, [pc, #212]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010fa:	4b32      	ldr	r3, [pc, #200]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001100:	4b30      	ldr	r3, [pc, #192]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001102:	2200      	movs	r2, #0
 8001104:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001106:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001108:	2200      	movs	r2, #0
 800110a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <MX_CAN1_Init+0x104>)
 800110e:	2200      	movs	r2, #0
 8001110:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001112:	482c      	ldr	r0, [pc, #176]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001114:	f002 fa84 	bl	8003620 <HAL_CAN_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800111e:	f000 fdef 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef can1_filter;
	
		/* Filter Bank 0, FIFO 0, Right  */
  	can1_filter.FilterActivation = ENABLE;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  	can1_filter.FilterBank = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  	can1_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  	can1_filter.FilterIdHigh = (0x581 << 5); 
 800112e:	f24b 0320 	movw	r3, #45088	@ 0xb020
 8001132:	603b      	str	r3, [r7, #0]
  	can1_filter.FilterIdLow = 0x0000;					
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  	can1_filter.FilterMaskIdHigh = (0x181 << 5);
 8001138:	f243 0320 	movw	r3, #12320	@ 0x3020
 800113c:	60bb      	str	r3, [r7, #8]
  	can1_filter.FilterMaskIdLow = 0x0000;			
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  	can1_filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  	can1_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
  	can1_filter.SlaveStartFilterBank = 14;
 800114a:	230e      	movs	r3, #14
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
		if( HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK )
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001154:	f002 fb60 	bl	8003818 <HAL_CAN_ConfigFilter>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_CAN1_Init+0xa2>
		{
			CAN_Error_Handler();
 800115e:	f000 fd5b 	bl	8001c18 <CAN_Error_Handler>
		}
		/* Filter Bank 1, FIFO 1, Left */
		can1_filter.FilterBank = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
		can1_filter.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
		can1_filter.FilterIdHigh = (0x582 << 5); 
 800116a:	f24b 0340 	movw	r3, #45120	@ 0xb040
 800116e:	603b      	str	r3, [r7, #0]
  	can1_filter.FilterIdLow = 0x0000;				// IDE(0), RTR(0) in bit posiiton 1,2
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  	can1_filter.FilterMaskIdHigh = (0x182 << 5);
 8001174:	f44f 5341 	mov.w	r3, #12352	@ 0x3040
 8001178:	60bb      	str	r3, [r7, #8]
  	can1_filter.FilterMaskIdLow = 0x0000;		// IDE(0), RTR(0) in bit posiiton 1,2
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
		if( HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK )
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001184:	f002 fb48 	bl	8003818 <HAL_CAN_ConfigFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_CAN1_Init+0xd2>
		{
			CAN_Error_Handler();
 800118e:	f000 fd43 	bl	8001c18 <CAN_Error_Handler>
		}
		
		/* Before CAN Start , Enable Interrupt */
	if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING )!= HAL_OK) 
 8001192:	2112      	movs	r1, #18
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <MX_CAN1_Init+0x104>)
 8001196:	f002 fe79 	bl	8003e8c <HAL_CAN_ActivateNotification>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_CAN1_Init+0xe4>
  {	
	CAN_Error_Handler();	
 80011a0:	f000 fd3a 	bl	8001c18 <CAN_Error_Handler>
	} HAL_Delay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f001 fe7d 	bl	8002ea4 <HAL_Delay>
	
	/* CAN Start */
	if( HAL_CAN_Start(&hcan1) != HAL_OK) 
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <MX_CAN1_Init+0x104>)
 80011ac:	f002 fc14 	bl	80039d8 <HAL_CAN_Start>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_CAN1_Init+0xfa>
	{	
	CAN_Error_Handler();	
 80011b6:	f000 fd2f 	bl	8001c18 <CAN_Error_Handler>
	}
	
  /* USER CODE END CAN1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000032c 	.word	0x2000032c
 80011c8:	40006400 	.word	0x40006400

080011cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_CAN_MspInit+0xc4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d14c      	bne.n	8001288 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 80011f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a20      	ldr	r2, [pc, #128]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <HAL_CAN_MspInit+0xc8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001226:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001238:	2309      	movs	r3, #9
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4815      	ldr	r0, [pc, #84]	@ (8001298 <HAL_CAN_MspInit+0xcc>)
 8001244:	f003 fb9c 	bl	8004980 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2013      	movs	r0, #19
 800124e:	f003 f944 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001252:	2013      	movs	r0, #19
 8001254:	f003 f95d 	bl	8004512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2014      	movs	r0, #20
 800125e:	f003 f93c 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001262:	2014      	movs	r0, #20
 8001264:	f003 f955 	bl	8004512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2015      	movs	r0, #21
 800126e:	f003 f934 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001272:	2015      	movs	r0, #21
 8001274:	f003 f94d 	bl	8004512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2016      	movs	r0, #22
 800127e:	f003 f92c 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001282:	2016      	movs	r0, #22
 8001284:	f003 f945 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40006400 	.word	0x40006400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_DMA_Init+0x3c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <MX_DMA_Init+0x3c>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_DMA_Init+0x3c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2010      	movs	r0, #16
 80012c4:	f003 f909 	bl	80044da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012c8:	2010      	movs	r0, #16
 80012ca:	f003 f922 	bl	8004512 <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <MX_GPIO_Init+0x100>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a38      	ldr	r2, [pc, #224]	@ (80013dc <MX_GPIO_Init+0x100>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a31      	ldr	r2, [pc, #196]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <MX_GPIO_Init+0x100>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <MX_GPIO_Init+0x100>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a23      	ldr	r2, [pc, #140]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_GPIO_Init+0x100>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_GPIO_Init+0x100>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001384:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <MX_GPIO_Init+0x104>)
 8001386:	f003 fc97 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <MX_GPIO_Init+0x108>)
 80013a0:	f003 faee 	bl	8004980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80013a4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <MX_GPIO_Init+0x104>)
 80013be:	f003 fadf 	bl	8004980 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2006      	movs	r0, #6
 80013c8:	f003 f887 	bl	80044da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013cc:	2006      	movs	r0, #6
 80013ce:	f003 f8a0 	bl	8004512 <HAL_NVIC_EnableIRQ>

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40020000 	.word	0x40020000

080013e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001400:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001404:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001408:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001410:	e000      	b.n	8001414 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001412:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001414:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f9      	beq.n	8001412 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800141e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <ROM_checksum>:
#include <cstdint>
#include <cstring>
#endif

int8_t ROM_checksum(int32_t *data)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	int32_t tmp = (data[0]+data[1]+data[2]+data[3]+data[4]+data[5])& 0x000000FF;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	441a      	add	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3308      	adds	r3, #8
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	441a      	add	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	330c      	adds	r3, #12
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	441a      	add	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3310      	adds	r3, #16
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	441a      	add	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3314      	adds	r3, #20
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	60fb      	str	r3, [r7, #12]
	int8_t tmp2 = (int8_t)tmp;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	72fb      	strb	r3, [r7, #11]
	return tmp2;
 8001472:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <encodeBuffer>:
encodeBuffer(int16_t *rar, int16_t *lar,
		int32_t *rec, int32_t *lec,
		int8_t *free, int8_t *e1234567,
		int8_t *volt, float *amp,
		uint8_t *buffer )
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b08c      	sub	sp, #48	@ 0x30
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
	// Copy the integer values into the buffer (assuming little-endian system)
	buffer[0] = (uint8_t)(   *(rar) & 0xFF );
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800149a:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)( ( *(rar) >> 8 )  & 0xFF );
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	121b      	asrs	r3, r3, #8
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

	buffer[2] = (uint8_t)(   *(lar) & 0xFF );
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014b6:	3302      	adds	r3, #2
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)( ( *(lar) >> 8 )  & 0xFF );
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	121b      	asrs	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014c8:	3303      	adds	r3, #3
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

	buffer[4] = (uint8_t)(   *(rec) & 0xFF );
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014d4:	3304      	adds	r3, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
	buffer[5] = (uint8_t)( ( *(rec) >> 8 )  & 0xFF );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	121a      	asrs	r2, r3, #8
 80014e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014e2:	3305      	adds	r3, #5
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
	buffer[6] = (uint8_t)( ( *(rec) >> 16 ) & 0xFF );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	141a      	asrs	r2, r3, #16
 80014ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014f0:	3306      	adds	r3, #6
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (uint8_t)( ( *(rec) >> 24 ) & 0xFF );
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	161a      	asrs	r2, r3, #24
 80014fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014fe:	3307      	adds	r3, #7
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]

	buffer[8]  = (uint8_t)(  *(lec) & 0xFF );
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800150a:	3308      	adds	r3, #8
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
	buffer[9]  = (uint8_t)(( *(lec) >> 8 )  & 0xFF );
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	121a      	asrs	r2, r3, #8
 8001516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001518:	3309      	adds	r3, #9
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]
	buffer[10] = (uint8_t)(( *(lec) >> 16 ) & 0xFF );
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	141a      	asrs	r2, r3, #16
 8001524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001526:	330a      	adds	r3, #10
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
	buffer[11] = (uint8_t)(( *(lec) >> 24 ) & 0xFF );
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	161a      	asrs	r2, r3, #24
 8001532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001534:	330b      	adds	r3, #11
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

	/* rdr နဲ့ ldr ကို pc က ဖမ်းစရာမလို */
	buffer[12] = (uint8_t)0xff; buffer[13] = (uint8_t)0xff;
 800153a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800153c:	330c      	adds	r3, #12
 800153e:	22ff      	movs	r2, #255	@ 0xff
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001544:	330d      	adds	r3, #13
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	701a      	strb	r2, [r3, #0]
	buffer[14] = (uint8_t)0xff; buffer[15] = (uint8_t)0xff;
 800154a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800154c:	330e      	adds	r3, #14
 800154e:	22ff      	movs	r2, #255	@ 0xff
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001554:	330f      	adds	r3, #15
 8001556:	22ff      	movs	r2, #255	@ 0xff
 8001558:	701a      	strb	r2, [r3, #0]

	buffer[16] = (uint8_t)*(free) ;
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	f993 2000 	ldrsb.w	r2, [r3]
 8001560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001562:	3310      	adds	r3, #16
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]

	buffer[17] = (uint8_t)*(e1234567);
 8001568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800156a:	f993 2000 	ldrsb.w	r2, [r3]
 800156e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001570:	3311      	adds	r3, #17
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

	buffer[18] = (uint8_t)*(volt);
 8001576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001578:	f993 2000 	ldrsb.w	r2, [r3]
 800157c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800157e:	3312      	adds	r3, #18
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]

	// float to byte array
	uint8_t byte_arr[4];
	memcpy(byte_arr, amp, 4);
 8001584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
	buffer[19] = byte_arr[0];
 800158a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800158c:	3313      	adds	r3, #19
 800158e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001592:	701a      	strb	r2, [r3, #0]
	buffer[20] = byte_arr[1];
 8001594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001596:	3314      	adds	r3, #20
 8001598:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800159c:	701a      	strb	r2, [r3, #0]
	buffer[21] = byte_arr[2];
 800159e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015a0:	3315      	adds	r3, #21
 80015a2:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80015a6:	701a      	strb	r2, [r3, #0]
	buffer[22] = byte_arr[3];
 80015a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015aa:	3316      	adds	r3, #22
 80015ac:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80015b0:	701a      	strb	r2, [r3, #0]

	/* CALCULATE CHECKSUM */
		int32_t data[6]; //24bytes
		data[0] = buffer[0] +(buffer[1] <<8)+(buffer[2] <<16)+(buffer[3] <<24);
 80015b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ba:	3301      	adds	r3, #1
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	441a      	add	r2, r3
 80015c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015c4:	3302      	adds	r3, #2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	441a      	add	r2, r3
 80015cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ce:	3303      	adds	r3, #3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	4413      	add	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
		data[1] = buffer[4] +(buffer[5] <<8)+(buffer[6] <<16)+(buffer[7] <<24);
 80015d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015da:	3304      	adds	r3, #4
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e2:	3305      	adds	r3, #5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	441a      	add	r2, r3
 80015ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ec:	3306      	adds	r3, #6
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	441a      	add	r2, r3
 80015f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015f6:	3307      	adds	r3, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
		data[2] = buffer[8] +(buffer[9] <<8)+(buffer[10]<<16)+(buffer[11]<<24);
 8001600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001602:	3308      	adds	r3, #8
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800160a:	3309      	adds	r3, #9
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	441a      	add	r2, r3
 8001612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001614:	330a      	adds	r3, #10
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	441a      	add	r2, r3
 800161c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800161e:	330b      	adds	r3, #11
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	061b      	lsls	r3, r3, #24
 8001624:	4413      	add	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
		data[3] = buffer[12]+(buffer[13]<<8)+(buffer[14]<<16)+(buffer[15]<<24);
 8001628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800162a:	330c      	adds	r3, #12
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001632:	330d      	adds	r3, #13
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	441a      	add	r2, r3
 800163a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800163c:	330e      	adds	r3, #14
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	441a      	add	r2, r3
 8001644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001646:	330f      	adds	r3, #15
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	4413      	add	r3, r2
 800164e:	61fb      	str	r3, [r7, #28]
		data[4] = buffer[16]+(buffer[17]<<8)+(buffer[18]<<16)+(buffer[19]<<24);
 8001650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001652:	3310      	adds	r3, #16
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800165a:	3311      	adds	r3, #17
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	441a      	add	r2, r3
 8001662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001664:	3312      	adds	r3, #18
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	441a      	add	r2, r3
 800166c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800166e:	3313      	adds	r3, #19
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	4413      	add	r3, r2
 8001676:	623b      	str	r3, [r7, #32]
		data[5] = buffer[20]+(buffer[21]<<8)+(buffer[22]<<16)+(0x0000    <<24);
 8001678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800167a:	3314      	adds	r3, #20
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001682:	3315      	adds	r3, #21
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	441a      	add	r2, r3
 800168a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800168c:	3316      	adds	r3, #22
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	4413      	add	r3, r2
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
		int8_t checksum_= ROM_checksum(data);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fecb 	bl	8001436 <ROM_checksum>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	buffer[23] = (uint8_t)checksum_;
 80016a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016a8:	3317      	adds	r3, #23
 80016aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80016ae:	701a      	strb	r2, [r3, #0]

	buffer[24] = (uint8_t)13; //"\r";
 80016b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016b2:	3318      	adds	r3, #24
 80016b4:	220d      	movs	r2, #13
 80016b6:	701a      	strb	r2, [r3, #0]
	buffer[25] = (uint8_t)10; //"\n";
 80016b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ba:	3319      	adds	r3, #25
 80016bc:	220a      	movs	r2, #10
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	@ 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
#ifdef ROM_SWV_DEBUG
	int _write(int file, char *ptr, int len)
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	  (void)file;
	  int DataIdx;

	  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e009      	b.n	80016ee <_write+0x26>
	  {
		ITM_SendChar(*ptr++);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	60ba      	str	r2, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fe80 	bl	80013e8 <ITM_SendChar>
	  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf1      	blt.n	80016da <_write+0x12>
	  }
	  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
	}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <estop>:
		ITM_SendChar(ch);
		return ch;
	}
#endif

void estop(void){};
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <led>:
void led(void){};
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <volt_ampere>:
void volt_ampere(void){};
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <structure_update>:
void structure_update(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	// data သည် CAN BUS က လာမယ်။
	//transmit_data.right_actual_rpm = right_actual_rpm;
	//transmit_data.left_actual_rpm  = left_actual_rpm;
	//transmit_data.right_actual_rpm = right_desire_rpm;
	//transmit_data.left_actual_rpm  = left_desire_rpm;
	transmit_data.right_actual_rpm = 0;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <structure_update+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	801a      	strh	r2, [r3, #0]
	transmit_data.left_actual_rpm  = 0;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <structure_update+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	805a      	strh	r2, [r3, #2]

	// data သည် CAN BUS က လာမယ်။
	transmit_data.right_encoder_count = right_actual_position;
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <structure_update+0x54>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <structure_update+0x50>)
 8001742:	6053      	str	r3, [r2, #4]
	transmit_data.left_encoder_count = left_actual_position;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <structure_update+0x58>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <structure_update+0x50>)
 800174a:	6093      	str	r3, [r2, #8]
	transmit_data.right_encoder_count = 999;
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <structure_update+0x50>)
 800174e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001752:	605a      	str	r2, [r3, #4]
	transmit_data.left_encoder_count = 0;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <structure_update+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
	/* No Need to update desire rpms,
	because it is decoded and implemented in USB_RECEIVE_CALLBACK() */
	//transmit_data.right_desire_rpm = right_desire_rpm;
	//transmit_data.left_desire_rpm  = left_desire_rpm;

	transmit_data.free = 0;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <structure_update+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	741a      	strb	r2, [r3, #16]
//	(uint8_t)(e_leds_status.led1_status  << 3 ) +
//	(uint8_t)(e_leds_status.led1_status  << 2 ) +
//	(uint8_t)(e_leds_status.led1_status  << 1 ) +
//	(uint8_t)(e_leds_status.led1_status  << 0 );

	transmit_data.e1234567 = 0; //lower_byte;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <structure_update+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	745a      	strb	r2, [r3, #17]

	transmit_data.volt = 0;		// 1B
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <structure_update+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	749a      	strb	r2, [r3, #18]
	transmit_data.ampere = -3.1415;  // 4B
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <structure_update+0x50>)
 800176e:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <structure_update+0x5c>)
 8001770:	615a      	str	r2, [r3, #20]
};
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20000390 	.word	0x20000390
 8001780:	20000384 	.word	0x20000384
 8001784:	20000388 	.word	0x20000388
 8001788:	c0490e56 	.word	0xc0490e56

0800178c <ROM_variables_init>:
void ROM_variables_init(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	speed_limit = 50;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <ROM_variables_init+0x54>)
 8001792:	2232      	movs	r2, #50	@ 0x32
 8001794:	701a      	strb	r2, [r3, #0]
	{
		usb_tx_buf[x] = 0;
		//usb_rx_buf[x] = 0;
	} */

	right_actual_rpm = 0;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <ROM_variables_init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
	left_actual_rpm = 0;
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <ROM_variables_init+0x5c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	801a      	strh	r2, [r3, #0]
	
	right_actual_position = 0; // rec
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <ROM_variables_init+0x60>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
	left_actual_position  = 0;// lec
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <ROM_variables_init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

	right_desire_rpm = 0;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <ROM_variables_init+0x68>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	801a      	strh	r2, [r3, #0]
	left_desire_rpm = 0;
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <ROM_variables_init+0x6c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	801a      	strh	r2, [r3, #0]

	transmit_data.free = 0;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <ROM_variables_init+0x70>)
 80017bc:	2200      	movs	r2, #0
 80017be:	741a      	strb	r2, [r3, #16]
	transmit_data.e1234567 = 0;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <ROM_variables_init+0x70>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	745a      	strb	r2, [r3, #17]

	transmit_data.volt = 0;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <ROM_variables_init+0x70>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	749a      	strb	r2, [r3, #18]
	transmit_data.ampere = 0;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <ROM_variables_init+0x70>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000354 	.word	0x20000354
 80017e4:	2000037c 	.word	0x2000037c
 80017e8:	2000037e 	.word	0x2000037e
 80017ec:	20000384 	.word	0x20000384
 80017f0:	20000388 	.word	0x20000388
 80017f4:	20000380 	.word	0x20000380
 80017f8:	20000382 	.word	0x20000382
 80017fc:	20000390 	.word	0x20000390

08001800 <HAL_CAN_RxFifo0MsgPendingCallback>:

#ifdef MOTOR_DRIVER_CAN
	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{ /* Right */
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, CAN_rxData);
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f002 fa1a 	bl	8003c48 <HAL_CAN_GetRxMessage>
	
	
	if( rxHeader.StdId == 0x181) 
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f240 1281 	movw	r2, #385	@ 0x181
 800181c:	4293      	cmp	r3, r2
 800181e:	d034      	beq.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	}
	
	else {
	
		/* 0x581 Success */
		if( CAN_rxData[0] == RECEIVE_SUCCESS ) 
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b60      	cmp	r3, #96	@ 0x60
 8001826:	d105      	bne.n	8001834 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		{
			#ifdef CAN_DEBUG
			HAL_GPIO_TogglePin(ORANGE_LED_GPIO_Port, ORANGE_LED_Pin);
 8001828:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800182c:	481b      	ldr	r0, [pc, #108]	@ (800189c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800182e:	f003 fa5c 	bl	8004cea <HAL_GPIO_TogglePin>
		{ 
			CAN_Error_Handler(); 
			//printf("MOTOR DRIVER RESPONSE : Error!\r\n");
		} 
	}
}
 8001832:	e02a      	b.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		else if ( CAN_rxData[0] == RECEIVE_TWO_BYTE )
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b4b      	cmp	r3, #75	@ 0x4b
 800183a:	d120      	bne.n	800187e <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
			if( CAN_rxData[1]==ACTUAL_SPEED_RPM_1Byte && CAN_rxData[2]==ACTUAL_SPEED_RPM_2Byte && CAN_rxData[3]==ACTUAL_SPEED_RPM_3Byte )
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2bf9      	cmp	r3, #249	@ 0xf9
 8001842:	d122      	bne.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	2b60      	cmp	r3, #96	@ 0x60
 800184a:	d11e      	bne.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	2b18      	cmp	r3, #24
 8001852:	d11a      	bne.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
				int16_t temp = (  CAN_rxData[5]<<8 ) + (CAN_rxData[4]<<0);
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800185e:	7912      	ldrb	r2, [r2, #4]
 8001860:	4413      	add	r3, r2
 8001862:	b29b      	uxth	r3, r3
 8001864:	81fb      	strh	r3, [r7, #14]
				right_actual_rpm = temp;
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	8013      	strh	r3, [r2, #0]
				HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800186c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001870:	480a      	ldr	r0, [pc, #40]	@ (800189c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001872:	f003 fa3a 	bl	8004cea <HAL_GPIO_TogglePin>
				getActualRpmLeft(&hcan1);
 8001876:	480b      	ldr	r0, [pc, #44]	@ (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001878:	f008 f970 	bl	8009b5c <getActualRpmLeft>
}
 800187c:	e005      	b.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		else if ( CAN_rxData[0] == RECEIVE_ERROR ) 
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b80      	cmp	r3, #128	@ 0x80
 8001884:	d101      	bne.n	800188a <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
			CAN_Error_Handler(); 
 8001886:	f000 f9c7 	bl	8001c18 <CAN_Error_Handler>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000374 	.word	0x20000374
 8001898:	20000358 	.word	0x20000358
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	2000037c 	.word	0x2000037c
 80018a4:	2000032c 	.word	0x2000032c

080018a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
	void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{ /* Left */
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, CAN_rxData);
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018b2:	4a20      	ldr	r2, [pc, #128]	@ (8001934 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f002 f9c6 	bl	8003c48 <HAL_CAN_GetRxMessage>
	
	if( rxHeader.StdId == 0x182) 
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80018c4:	d02f      	beq.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
		#endif
	}
	
	else {
		/* Success */
		if( CAN_rxData[0] == RECEIVE_SUCCESS ) 
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b60      	cmp	r3, #96	@ 0x60
 80018cc:	d105      	bne.n	80018da <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
		{
			#ifdef CAN_DEBUG
			HAL_GPIO_TogglePin(ORANGE_LED_GPIO_Port, ORANGE_LED_Pin);
 80018ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018d2:	4819      	ldr	r0, [pc, #100]	@ (8001938 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80018d4:	f003 fa09 	bl	8004cea <HAL_GPIO_TogglePin>
			//printf("MOTOR DRIVER RESPONSE : Error!\r\n");
		} 

	}
	
}
 80018d8:	e025      	b.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
		else if ( CAN_rxData[0] == RECEIVE_TWO_BYTE )
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b4b      	cmp	r3, #75	@ 0x4b
 80018e0:	d11b      	bne.n	800191a <HAL_CAN_RxFifo1MsgPendingCallback+0x72>
			if( CAN_rxData[1]==ACTUAL_SPEED_RPM_1Byte && CAN_rxData[2]==ACTUAL_SPEED_RPM_2Byte && CAN_rxData[3]==ACTUAL_SPEED_RPM_3Byte )
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	2bf9      	cmp	r3, #249	@ 0xf9
 80018e8:	d11d      	bne.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018ec:	789b      	ldrb	r3, [r3, #2]
 80018ee:	2b60      	cmp	r3, #96	@ 0x60
 80018f0:	d119      	bne.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018f4:	78db      	ldrb	r3, [r3, #3]
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d115      	bne.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
				int16_t temp = (  CAN_rxData[5]<<8 ) + (CAN_rxData[4]<<0);
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 80018fc:	795b      	ldrb	r3, [r3, #5]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b29b      	uxth	r3, r3
 8001902:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 8001904:	7912      	ldrb	r2, [r2, #4]
 8001906:	4413      	add	r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	81fb      	strh	r3, [r7, #14]
				left_actual_rpm = temp * -1;
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	425b      	negs	r3, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	b21a      	sxth	r2, r3
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8001916:	801a      	strh	r2, [r3, #0]
}
 8001918:	e005      	b.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
		else if ( CAN_rxData[0] == RECEIVE_ERROR ) 
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b80      	cmp	r3, #128	@ 0x80
 8001920:	d101      	bne.n	8001926 <HAL_CAN_RxFifo1MsgPendingCallback+0x7e>
			CAN_Error_Handler(); 
 8001922:	f000 f979 	bl	8001c18 <CAN_Error_Handler>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000374 	.word	0x20000374
 8001934:	20000358 	.word	0x20000358
 8001938:	40020c00 	.word	0x40020c00
 800193c:	2000037e 	.word	0x2000037e

08001940 <USB_RECEIVE_CALLBACK>:
#endif

#ifdef COMMUNICATION_METHOD_USB
	void USB_RECEIVE_CALLBACK(uint8_t *buf, uint32_t len)
{    /* assume 30 Bytes */
 8001940:	b580      	push	{r7, lr}
 8001942:	b096      	sub	sp, #88	@ 0x58
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	// update right_desire_rpm, left_desire_rpm and estop_leds
	//decodeBuffer( buf, &receive_data);
	char * buffer = (char *) buf;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	657b      	str	r3, [r7, #84]	@ 0x54
	char *pend; char *pend1; char *pend2; char *pend3;char *pend4;
	char *pend5; char *pend6; char *pend7;char *pend8;char *pend9;

		int16_t rar =  strtol(buffer, &pend, 10);
 800194e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001952:	220a      	movs	r2, #10
 8001954:	4619      	mov	r1, r3
 8001956:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001958:	f00b f850 	bl	800c9fc <strtol>
 800195c:	4603      	mov	r3, r0
 800195e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
		int16_t lar =  strtol(pend , &pend1, 10);
 8001962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001964:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001968:	220a      	movs	r2, #10
 800196a:	4618      	mov	r0, r3
 800196c:	f00b f846 	bl	800c9fc <strtol>
 8001970:	4603      	mov	r3, r0
 8001972:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		int32_t rec =  strtol(pend1, &pend2, 10);
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800197c:	220a      	movs	r2, #10
 800197e:	4618      	mov	r0, r3
 8001980:	f00b f83c 	bl	800c9fc <strtol>
 8001984:	64f8      	str	r0, [r7, #76]	@ 0x4c
		int32_t lec =  strtol(pend2, &pend3, 10);
 8001986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001988:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800198c:	220a      	movs	r2, #10
 800198e:	4618      	mov	r0, r3
 8001990:	f00b f834 	bl	800c9fc <strtol>
 8001994:	64b8      	str	r0, [r7, #72]	@ 0x48
		int16_t rdr =  strtol(pend3, &pend4, 10);
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f107 0120 	add.w	r1, r7, #32
 800199c:	220a      	movs	r2, #10
 800199e:	4618      	mov	r0, r3
 80019a0:	f00b f82c 	bl	800c9fc <strtol>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		int16_t ldr =  strtol(pend4, &pend5, 10);
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f107 011c 	add.w	r1, r7, #28
 80019b0:	220a      	movs	r2, #10
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00b f822 	bl	800c9fc <strtol>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		int16_t free=  strtol(pend5, &pend6, 10);
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f107 0118 	add.w	r1, r7, #24
 80019c4:	220a      	movs	r2, #10
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00b f818 	bl	800c9fc <strtol>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		int16_t e123=  strtol(pend6, &pend7, 10);
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f107 0114 	add.w	r1, r7, #20
 80019d8:	220a      	movs	r2, #10
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b f80e 	bl	800c9fc <strtol>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		int16_t volt= (strtol(pend7, &pend8, 10)); //  & 0xff;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f107 0110 	add.w	r1, r7, #16
 80019ec:	220a      	movs	r2, #10
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00b f804 	bl	800c9fc <strtol>
 80019f4:	4603      	mov	r3, r0
 80019f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		float  amp  =  strtof(pend8, &pend9);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	f107 020c 	add.w	r2, r7, #12
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00a ff1d 	bl	800c840 <strtof>
 8001a06:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
		int8_t checksum=(strtol(pend9, NULL, 10)) & 0xff;  //
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00a fff3 	bl	800c9fc <strtol>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

/* YOU SHOULD CKECK CHECKSUM && SHOULD UPDATE STRUCTURE ( LEDs ... ) */
	if( ((rdr+ldr)&0xff) != checksum)
 8001a1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001a20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001a24:	4413      	add	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d009      	beq.n	8001a46 <USB_RECEIVE_CALLBACK+0x106>
	{
		right_desire_rpm = 0;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <USB_RECEIVE_CALLBACK+0x140>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]
		left_desire_rpm = 0;
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <USB_RECEIVE_CALLBACK+0x144>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	801a      	strh	r2, [r3, #0]
		#ifdef ROM_SWV_DEBUG
			printf("checksum mismatch Error!");
 8001a3e:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <USB_RECEIVE_CALLBACK+0x148>)
 8001a40:	f00b f8a8 	bl	800cb94 <iprintf>
 8001a44:	e019      	b.n	8001a7a <USB_RECEIVE_CALLBACK+0x13a>
		#endif
		return;
	}
	right_desire_rpm = rdr;
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <USB_RECEIVE_CALLBACK+0x140>)
 8001a48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001a4c:	8013      	strh	r3, [r2, #0]
	left_desire_rpm  = ldr;
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <USB_RECEIVE_CALLBACK+0x144>)
 8001a50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001a54:	8013      	strh	r3, [r2, #0]
		//printf("%s\r\n", buf);
		//printf("rar: %d\r\n", receive_data.right_actual_rpm);
		//printf("lar: %d\r\n", receive_data.left_actual_rpm);
		//printf("rec: %ld\r\n", receive_data.right_encoder_count);
		//printf("lec: %ld\r\n", receive_data.left_encoder_count);
		printf(" rdr : %d\r\n", rdr);
 8001a56:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <USB_RECEIVE_CALLBACK+0x14c>)
 8001a5e:	f00b f899 	bl	800cb94 <iprintf>
		printf(" ldr : %d\r\n", ldr);
 8001a62:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001a66:	4619      	mov	r1, r3
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <USB_RECEIVE_CALLBACK+0x150>)
 8001a6a:	f00b f893 	bl	800cb94 <iprintf>
		//printf("free: %d\r\n", receive_data.free);
		//printf("e123: %d\r\n", receive_data.e1234567);
		//printf("volt: %d\r\n", receive_data.volt);
		//printf("ampere: %d\r\n", (int)receive_data.ampere);
		printf(" checksum: %d\r\n", checksum);
 8001a6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001a72:	4619      	mov	r1, r3
 8001a74:	4807      	ldr	r0, [pc, #28]	@ (8001a94 <USB_RECEIVE_CALLBACK+0x154>)
 8001a76:	f00b f88d 	bl	800cb94 <iprintf>

	#endif
}
 8001a7a:	3758      	adds	r7, #88	@ 0x58
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000380 	.word	0x20000380
 8001a84:	20000382 	.word	0x20000382
 8001a88:	0800ea28 	.word	0x0800ea28
 8001a8c:	0800ea44 	.word	0x0800ea44
 8001a90:	0800ea50 	.word	0x0800ea50
 8001a94:	0800ea5c 	.word	0x0800ea5c

08001a98 <__ROM_USB_TRANSMIT>:
	void __ROM_USB_TRANSMIT(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af06      	add	r7, sp, #24
	//calculate_crc
	encodeBuffer(&transmit_data.right_actual_rpm, &transmit_data.left_actual_rpm,
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <__ROM_USB_TRANSMIT+0x34>)
 8001aa0:	9304      	str	r3, [sp, #16]
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <__ROM_USB_TRANSMIT+0x38>)
 8001aa4:	9303      	str	r3, [sp, #12]
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <__ROM_USB_TRANSMIT+0x3c>)
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <__ROM_USB_TRANSMIT+0x40>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <__ROM_USB_TRANSMIT+0x44>)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <__ROM_USB_TRANSMIT+0x48>)
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <__ROM_USB_TRANSMIT+0x4c>)
 8001ab6:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <__ROM_USB_TRANSMIT+0x50>)
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <__ROM_USB_TRANSMIT+0x54>)
 8001aba:	f7ff fce2 	bl	8001482 <encodeBuffer>
			&transmit_data.right_encoder_count, &transmit_data.left_encoder_count,
			&transmit_data.free, &transmit_data.e1234567,
			&transmit_data.volt, &transmit_data.ampere,
			transmit_data.buffer );

    CDC_Transmit_FS(transmit_data.buffer, 26);
 8001abe:	211a      	movs	r1, #26
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <__ROM_USB_TRANSMIT+0x34>)
 8001ac2:	f000 fd01 	bl	80024c8 <CDC_Transmit_FS>
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200003aa 	.word	0x200003aa
 8001ad0:	200003a4 	.word	0x200003a4
 8001ad4:	200003a2 	.word	0x200003a2
 8001ad8:	200003a1 	.word	0x200003a1
 8001adc:	200003a0 	.word	0x200003a0
 8001ae0:	20000398 	.word	0x20000398
 8001ae4:	20000394 	.word	0x20000394
 8001ae8:	20000392 	.word	0x20000392
 8001aec:	20000390 	.word	0x20000390

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af4:	f001 f964 	bl	8002dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  // variables တွေကို 0 နဲ့ assign လုပ်တယ်။
  ROM_variables_init();
 8001af8:	f7ff fe48 	bl	800178c <ROM_variables_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 f822 	bl	8001b44 <SystemClock_Config>
  /* Initialize all configured peripherals */

  /*GREEN(PD12) ORANGE(PD12) RED(PD12) BLUE(PD12) Led pins များကို output push pull,
  no pull up assign လုပ်တယ်။ အဲ့ကောင် တွေ ကို Debug လုပ်ဖို့ သုံးပါတယ်။
  Estop pin(PA0) ကို Externel interrupt Line 0 မှာ ချိတ်တယ်။ */
  MX_GPIO_Init();
 8001b00:	f7ff fbec 	bl	80012dc <MX_GPIO_Init>

  // UART2 MOTOR DRIVER RX အတွက်
  MX_DMA_Init();
 8001b04:	f7ff fbca 	bl	800129c <MX_DMA_Init>

  // TIM9 ကို counter mode အဖြစ် သုံးထားတယ်။ သူ့ ကို main loop အဖြစ် သုံးမယ်။
  MX_TIM9_Init();
 8001b08:	f000 fafc 	bl	8002104 <MX_TIM9_Init>

  // PA2 မှာ Battery voltage တိုင်းဖို့ အတွက် IN2 သုံးထားတယ်။ Interrupt သုံးထားတယ်။ ADC ကို Timer2 နဲ့ trigger လုပ်မယ်။
  MX_ADC1_Init();
 8001b0c:	f7ff fa3a 	bl	8000f84 <MX_ADC1_Init>

  MX_CAN1_Init();
 8001b10:	f7ff fad6 	bl	80010c0 <MX_CAN1_Init>

  // ADC ကို Trigger ပစ် ဖို့ ဖြစ်ပါတယ်။  APB1 bus ပေါ် က timer 2 ကို 1 second တခါ timer trigger output ပစ်ပါတယ်။
  MX_TIM2_Init();
 8001b14:	f000 fa5a 	bl	8001fcc <MX_TIM2_Init>

   #ifdef COMMUNICATION_METHOD_USB
    // usb connection လုပ်ဖို့ အတွက် ဖြစ်တယ်။
    MX_USB_DEVICE_Init();
 8001b18:	f000 fbce 	bl	80022b8 <MX_USB_DEVICE_Init>
   #endif

  // timer 3 ကို 1us နဲ့ 65535 အမြင့် ဆုံး count ထားထားတယ်။ delay ဆောက် ဖို့ ဖြစ်တယ်။
  // timer.c မှာ delay_us() နဲ့ micro second ထည့်ပြီး အသုံးပြု နိုင်ပါသည်။
  MX_TIM3_Init();
 8001b1c:	f000 faa4 	bl	8002068 <MX_TIM3_Init>
  	  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
	#endif

  // delay ဆောက် ဖို့ အတွက် timer ကို interrupt mode ကို စတင်ပေး တယ်။
  HAL_TIM_Base_Start(&htim3);
 8001b20:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <main+0x48>)
 8001b22:	f005 f831 	bl	8006b88 <HAL_TIM_Base_Start>

  // CAN Motor Driver အတွက် လိုအပ်သည် များ ပြင်ဆင်ရန် data sheet ဖတ်ပါ။
	#ifdef MOTOR_DRIVER_CAN
  	  ___ROM_LSDB_PREPARE(&hcan1);
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <main+0x4c>)
 8001b28:	f007 fc62 	bl	80093f0 <___ROM_LSDB_PREPARE>
	#endif
  // main loop အတွက် timer ကို interrupt mode ကို စတင်ပေး တယ်။
  // TIM1_BRK_TIM9_IRQHandler() ကို ( 10ms(100Hz) | 50ms(20Hz) | 100ms(10Hz) ခေါ် ပါမယ်။
  HAL_TIM_Base_Start_IT(&htim9);
 8001b2c:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <main+0x50>)
 8001b2e:	f005 f893 	bl	8006c58 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <main+0x42>
 8001b36:	bf00      	nop
 8001b38:	20000414 	.word	0x20000414
 8001b3c:	2000032c 	.word	0x2000032c
 8001b40:	2000045c 	.word	0x2000045c

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	@ 0x50
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2230      	movs	r2, #48	@ 0x30
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00b f873 	bl	800cc3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <SystemClock_Config+0xcc>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	4a27      	ldr	r2, [pc, #156]	@ (8001c10 <SystemClock_Config+0xcc>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b78:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <SystemClock_Config+0xcc>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	4b22      	ldr	r3, [pc, #136]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <SystemClock_Config+0xd0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fb1c 	bl	8006208 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bd6:	f000 f893 	bl	8001d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bda:	230f      	movs	r3, #15
 8001bdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bde:	2302      	movs	r3, #2
 8001be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001be6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 fd7d 	bl	80066f8 <HAL_RCC_ClockConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c04:	f000 f87c 	bl	8001d00 <Error_Handler>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3750      	adds	r7, #80	@ 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000

08001c18 <CAN_Error_Handler>:
		HAL_GPIO_WritePin(GPIOD, BLUE_LED_Pin | GREEN_LED_Pin |RED_LED_Pin | ORANGE_LED_Pin, GPIO_PIN_SET);

		#endif
}
void CAN_Error_Handler(void)
{	
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	// CAN ERROR ဖြစ် ရင် LED 4 လုံး TOGGLE ဖြစ် မယ်။
	// Need to add Software EStop & Hardware Estop
	clearMotors(&hcan1);
 8001c1c:	480d      	ldr	r0, [pc, #52]	@ (8001c54 <CAN_Error_Handler+0x3c>)
 8001c1e:	f007 ffdd 	bl	8009bdc <clearMotors>
	disableMotors(&hcan1);
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <CAN_Error_Handler+0x3c>)
 8001c24:	f007 ffca 	bl	8009bbc <disableMotors>
	
	while(1) 
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_WritePin(GPIOD, BLUE_LED_Pin | GREEN_LED_Pin |RED_LED_Pin | ORANGE_LED_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001c2e:	480a      	ldr	r0, [pc, #40]	@ (8001c58 <CAN_Error_Handler+0x40>)
 8001c30:	f003 f842 	bl	8004cb8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001c34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c38:	f001 f934 	bl	8002ea4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, BLUE_LED_Pin | GREEN_LED_Pin |RED_LED_Pin | ORANGE_LED_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <CAN_Error_Handler+0x40>)
 8001c44:	f003 f838 	bl	8004cb8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c4c:	f001 f92a 	bl	8002ea4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, BLUE_LED_Pin | GREEN_LED_Pin |RED_LED_Pin | ORANGE_LED_Pin, GPIO_PIN_SET);
 8001c50:	bf00      	nop
 8001c52:	e7e9      	b.n	8001c28 <CAN_Error_Handler+0x10>
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	40020c00 	.word	0x40020c00

08001c5c <TIM1_BRK_TIM9_IRQHandler>:
		#endif
	}
}

void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	if(TIM9->SR & TIM_SR_UIF)
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <TIM1_BRK_TIM9_IRQHandler+0x88>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d036      	beq.n	8001cda <TIM1_BRK_TIM9_IRQHandler+0x7e>
	{
		estop();
 8001c6c:	f7ff fd48 	bl	8001700 <estop>
		led();
 8001c70:	f7ff fd4d 	bl	800170e <led>
		volt_ampere();
 8001c74:	f7ff fd52 	bl	800171c <volt_ampere>

		/* CAN BUS DEBUG LED AND RPM TESTING PURPOSE */
		counts++; 
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8001c88:	801a      	strh	r2, [r3, #0]
		if(counts > 50 )
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8001c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c90:	2b32      	cmp	r3, #50	@ 0x32
 8001c92:	dd07      	ble.n	8001ca4 <TIM1_BRK_TIM9_IRQHandler+0x48>
		{   // ( 10 | 50 | 100 )ms * 50 တခါ led toggle ဖြစ် ဖို့ ပါ။
		    // 10Hz ဆိုရင် 5 second တခါ , 20Hz ဆိုရင် 2.5 second တခါ , 100Hz ဆိုရင် .5 second တခါ
		    // CAN BUS LED တွေ TOGGLE ဖြစ် ပါမယ်။
			#ifdef CAN_DEBUG
			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin); 
 8001c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c98:	4814      	ldr	r0, [pc, #80]	@ (8001cec <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8001c9a:	f003 f826 	bl	8004cea <HAL_GPIO_TogglePin>
			#endif
			
		counts = 0; 
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	801a      	strh	r2, [r3, #0]
		}
		
		// PDO မသုံးဘူးဆိုရင် Rpm right ကို motor driver ဆီ request လုပ်မှာ ဖြစ် ပါတယ်။
		// FIFO0(Right) Line 133 မှာ right actual rpm ကို ရတဲ့ အခါ Left rpm ကို request ထပ်လုပ်ပါမယ်။
		#ifndef USE_PDO
			getActualRpmRight(&hcan1); // This will Trigger to Left
 8001ca4:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001ca6:	f007 ff29 	bl	8009afc <getActualRpmRight>
			//delay_us(200);
		#endif
		
		// rom_communicate structure ကို update လုပ်မယ်။
		structure_update();
 8001caa:	f7ff fd3f 	bl	800172c <structure_update>


		// ပြီးရင်တော့ desire rpm တွေကို request လုပ်ပါမယ်။
		#ifdef MOTOR_DRIVER_CAN
			setTargetVelocityRpmRight(&hcan1, right_desire_rpm);
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <TIM1_BRK_TIM9_IRQHandler+0x98>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480e      	ldr	r0, [pc, #56]	@ (8001cf0 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001cb8:	f007 fdb2 	bl	8009820 <setTargetVelocityRpmRight>
			//delay_us(500);
			setTargetVelocityRpmLeft(&hcan1, left_desire_rpm);
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8001cc6:	f007 fde3 	bl	8009890 <setTargetVelocityRpmLeft>
			//delay_us(500);
		#endif
		#ifdef COMMUNICATION_METHOD_USB
			__ROM_USB_TRANSMIT();
 8001cca:	f7ff fee5 	bl	8001a98 <__ROM_USB_TRANSMIT>
		#elif defined(COMMUNICATION_METHOD_UART)
			__ROM_UART3_TRANSMIT();
		#endif
		
		// Flag clear
		TIM9->SR &= ~ TIM_SR_UIF;
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <TIM1_BRK_TIM9_IRQHandler+0x88>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <TIM1_BRK_TIM9_IRQHandler+0x88>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6113      	str	r3, [r2, #16]
	}
	// နောက်ထပ် update even အတွက်ပါ။
	HAL_TIM_IRQHandler(&htim9);
 8001cda:	4808      	ldr	r0, [pc, #32]	@ (8001cfc <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001cdc:	f005 f82c 	bl	8006d38 <HAL_TIM_IRQHandler>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	2000038c 	.word	0x2000038c
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	2000032c 	.word	0x2000032c
 8001cf4:	20000380 	.word	0x20000380
 8001cf8:	20000382 	.word	0x20000382
 8001cfc:	2000045c 	.word	0x2000045c

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	/* Need to add Software EStop & Hardware Estop */
	
	clearMotors(&hcan1);
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <Error_Handler+0x18>)
 8001d06:	f007 ff69 	bl	8009bdc <clearMotors>
	disableMotors(&hcan1);
 8001d0a:	4803      	ldr	r0, [pc, #12]	@ (8001d18 <Error_Handler+0x18>)
 8001d0c:	f007 ff56 	bl	8009bbc <disableMotors>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
	
	//EmergencyMode(&hcan1, EMERGENCY_STOP_DISABLE);
	
  __disable_irq();
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <Error_Handler+0x14>
 8001d18:	2000032c 	.word	0x2000032c

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d5a:	2007      	movs	r0, #7
 8001d5c:	f002 fbb2 	bl	80044c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <NMI_Handler+0x4>

08001d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//setTargetVelocityRPM(&hcan1,0);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <MemManage_Handler+0x4>

08001d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	//setTargetVelocityRPM(&hcan1,0);
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	//setTargetVelocityRPM(&hcan1,0);
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc2:	f001 f84f 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
	//EmergencyMode(&hcan1, EMERGENCY_STOP_ENABLE);
	
	// should use Hw estop
	
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_STOP_Pin);
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f002 ffa6 	bl	8004d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <DMA1_Stream5_IRQHandler+0x10>)
 8001dde:	f002 fc45 	bl	800466c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200004ec 	.word	0x200004ec

08001dec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <ADC_IRQHandler+0x10>)
 8001df2:	f001 f8be 	bl	8002f72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002e4 	.word	0x200002e4

08001e00 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <CAN1_TX_IRQHandler+0x10>)
 8001e06:	f002 f867 	bl	8003ed8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000032c 	.word	0x2000032c

08001e14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <CAN1_RX0_IRQHandler+0x10>)
 8001e1a:	f002 f85d 	bl	8003ed8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000032c 	.word	0x2000032c

08001e28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <CAN1_RX1_IRQHandler+0x10>)
 8001e2e:	f002 f853 	bl	8003ed8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000032c 	.word	0x2000032c

08001e3c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	// sw estop
  // clearMotors(&hcan1);
	// disableMotors(&hcan1);
	
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <CAN1_SCE_IRQHandler+0x10>)
 8001e42:	f002 f849 	bl	8003ed8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000032c 	.word	0x2000032c

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <USART2_IRQHandler+0x10>)
 8001e56:	f005 fb2f 	bl	80074b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200004a4 	.word	0x200004a4

08001e64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <OTG_FS_IRQHandler+0x10>)
 8001e6a:	f003 f8c0 	bl	8004fee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20001a30 	.word	0x20001a30

08001e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_kill>:

int _kill(int pid, int sig)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e92:	f00a ff35 	bl	800cd00 <__errno>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2216      	movs	r2, #22
 8001e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_exit>:

void _exit (int status)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffe7 	bl	8001e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <_exit+0x12>

08001ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e00a      	b.n	8001ee6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed0:	f3af 8000 	nop.w
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	60ba      	str	r2, [r7, #8]
 8001edc:	b2ca      	uxtb	r2, r1
 8001ede:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dbf0      	blt.n	8001ed0 <_read+0x12>
  }

  return len;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f20:	605a      	str	r2, [r3, #4]
  return 0;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_isatty>:

int _isatty(int file)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f00a feb6 	bl	800cd00 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20020000 	.word	0x20020000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	200003c8 	.word	0x200003c8
 8001fc8:	200022b0 	.word	0x200022b0

08001fcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <MX_TIM2_Init+0x98>)
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <MX_TIM2_Init+0x98>)
 8001ff2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ff6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <MX_TIM2_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <MX_TIM2_Init+0x98>)
 8002000:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002004:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <MX_TIM2_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200c:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_TIM2_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002012:	4814      	ldr	r0, [pc, #80]	@ (8002064 <MX_TIM2_Init+0x98>)
 8002014:	f004 fd68 	bl	8006ae8 <HAL_TIM_Base_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800201e:	f7ff fe6f 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	@ (8002064 <MX_TIM2_Init+0x98>)
 8002030:	f004 ff72 	bl	8006f18 <HAL_TIM_ConfigClockSource>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800203a:	f7ff fe61 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800203e:	2320      	movs	r3, #32
 8002040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002046:	463b      	mov	r3, r7
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	@ (8002064 <MX_TIM2_Init+0x98>)
 800204c:	f005 f9a4 	bl	8007398 <HAL_TIMEx_MasterConfigSynchronization>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002056:	f7ff fe53 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200003cc 	.word	0x200003cc

08002068 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	463b      	mov	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <MX_TIM3_Init+0x94>)
 8002086:	4a1e      	ldr	r2, [pc, #120]	@ (8002100 <MX_TIM3_Init+0x98>)
 8002088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <MX_TIM3_Init+0x94>)
 800208c:	2253      	movs	r2, #83	@ 0x53
 800208e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_TIM3_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <MX_TIM3_Init+0x94>)
 8002098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800209c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <MX_TIM3_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_TIM3_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020aa:	4814      	ldr	r0, [pc, #80]	@ (80020fc <MX_TIM3_Init+0x94>)
 80020ac:	f004 fd1c 	bl	8006ae8 <HAL_TIM_Base_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020b6:	f7ff fe23 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_TIM3_Init+0x94>)
 80020c8:	f004 ff26 	bl	8006f18 <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020d2:	f7ff fe15 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020de:	463b      	mov	r3, r7
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	@ (80020fc <MX_TIM3_Init+0x94>)
 80020e4:	f005 f958 	bl	8007398 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ee:	f7ff fe07 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000414 	.word	0x20000414
 8002100:	40000400 	.word	0x40000400

08002104 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

	// choose frequency ( 10ms(100Hz) | 50ms(20Hz) | 100ms(10Hz) at main_loop_Hz in main.c
	int prescaler = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
	int Period = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* 10 Hz */
  if( main_loop_Hz == 10 ) { prescaler=1680-1; Period=10000-1; }
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <MX_TIM9_Init+0xb0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d106      	bne.n	8002134 <MX_TIM9_Init+0x30>
 8002126:	f240 638f 	movw	r3, #1679	@ 0x68f
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e013      	b.n	800215c <MX_TIM9_Init+0x58>

  /* 20 Hz */
  else if( main_loop_Hz == 20 ) { prescaler=1680-1; Period=5000-1; }
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <MX_TIM9_Init+0xb0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b14      	cmp	r3, #20
 800213a:	d106      	bne.n	800214a <MX_TIM9_Init+0x46>
 800213c:	f240 638f 	movw	r3, #1679	@ 0x68f
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	f241 3387 	movw	r3, #4999	@ 0x1387
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e008      	b.n	800215c <MX_TIM9_Init+0x58>

  /* 100 Hz */
  else if( main_loop_Hz == 100 ) { prescaler=168-1; Period=10000-1; }
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <MX_TIM9_Init+0xb0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b64      	cmp	r3, #100	@ 0x64
 8002150:	d104      	bne.n	800215c <MX_TIM9_Init+0x58>
 8002152:	23a7      	movs	r3, #167	@ 0xa7
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	f242 730f 	movw	r3, #9999	@ 0x270f
 800215a:	613b      	str	r3, [r7, #16]

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800215c:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <MX_TIM9_Init+0xb8>)
 8002160:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = prescaler;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a14      	ldr	r2, [pc, #80]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 8002166:	6053      	str	r3, [r2, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = Period;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 8002172:	60d3      	str	r3, [r2, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002180:	480d      	ldr	r0, [pc, #52]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 8002182:	f004 fcb1 	bl	8006ae8 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 800218c:	f7ff fdb8 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002196:	463b      	mov	r3, r7
 8002198:	4619      	mov	r1, r3
 800219a:	4807      	ldr	r0, [pc, #28]	@ (80021b8 <MX_TIM9_Init+0xb4>)
 800219c:	f004 febc 	bl	8006f18 <HAL_TIM_ConfigClockSource>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM9_Init+0xa6>
  {
    Error_Handler();
 80021a6:	f7ff fdab 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000
 80021b8:	2000045c 	.word	0x2000045c
 80021bc:	40014000 	.word	0x40014000

080021c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	4a1f      	ldr	r2, [pc, #124]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80021ee:	e02e      	b.n	800224e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_TIM_Base_MspInit+0x9c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a15      	ldr	r2, [pc, #84]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
}
 8002216:	e01a      	b.n	800224e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM9)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <HAL_TIM_Base_MspInit+0xa0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6453      	str	r3, [r2, #68]	@ 0x44
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_TIM_Base_MspInit+0x98>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2018      	movs	r0, #24
 8002244:	f002 f949 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002248:	2018      	movs	r0, #24
 800224a:	f002 f962 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40000400 	.word	0x40000400
 8002260:	40014000 	.word	0x40014000

08002264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800229c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002268:	f000 fd98 	bl	8002d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	@ (80022a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	@ (80022a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	@ (80022b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002292:	f00a fd3b 	bl	800cd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002296:	f7ff fc2b 	bl	8001af0 <main>
  bx  lr    
 800229a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800229c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80022a8:	0800ee78 	.word	0x0800ee78
  ldr r2, =_sbss
 80022ac:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80022b0:	200022ac 	.word	0x200022ac

080022b4 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <CAN2_RX0_IRQHandler>
	...

080022b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80022bc:	2200      	movs	r2, #0
 80022be:	4912      	ldr	r1, [pc, #72]	@ (8002308 <MX_USB_DEVICE_Init+0x50>)
 80022c0:	4812      	ldr	r0, [pc, #72]	@ (800230c <MX_USB_DEVICE_Init+0x54>)
 80022c2:	f008 f9c5 	bl	800a650 <USBD_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80022cc:	f7ff fd18 	bl	8001d00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80022d0:	490f      	ldr	r1, [pc, #60]	@ (8002310 <MX_USB_DEVICE_Init+0x58>)
 80022d2:	480e      	ldr	r0, [pc, #56]	@ (800230c <MX_USB_DEVICE_Init+0x54>)
 80022d4:	f008 f9ec 	bl	800a6b0 <USBD_RegisterClass>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80022de:	f7ff fd0f 	bl	8001d00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80022e2:	490c      	ldr	r1, [pc, #48]	@ (8002314 <MX_USB_DEVICE_Init+0x5c>)
 80022e4:	4809      	ldr	r0, [pc, #36]	@ (800230c <MX_USB_DEVICE_Init+0x54>)
 80022e6:	f008 f8e3 	bl	800a4b0 <USBD_CDC_RegisterInterface>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80022f0:	f7ff fd06 	bl	8001d00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_USB_DEVICE_Init+0x54>)
 80022f6:	f008 fa11 	bl	800a71c <USBD_Start>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8002300:	f7ff fcfe 	bl	8001d00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000018 	.word	0x20000018
 800230c:	2000054c 	.word	0x2000054c
 8002310:	20000080 	.word	0x20000080
 8002314:	20000004 	.word	0x20000004

08002318 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	4905      	ldr	r1, [pc, #20]	@ (8002334 <CDC_Init_FS+0x1c>)
 8002320:	4805      	ldr	r0, [pc, #20]	@ (8002338 <CDC_Init_FS+0x20>)
 8002322:	f008 f8df 	bl	800a4e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8002326:	4905      	ldr	r1, [pc, #20]	@ (800233c <CDC_Init_FS+0x24>)
 8002328:	4803      	ldr	r0, [pc, #12]	@ (8002338 <CDC_Init_FS+0x20>)
 800232a:	f008 f8fd 	bl	800a528 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800232e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20001028 	.word	0x20001028
 8002338:	2000054c 	.word	0x2000054c
 800233c:	20000828 	.word	0x20000828

08002340 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8002344:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b23      	cmp	r3, #35	@ 0x23
 8002364:	f200 808c 	bhi.w	8002480 <CDC_Control_FS+0x130>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <CDC_Control_FS+0x20>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002481 	.word	0x08002481
 8002374:	08002481 	.word	0x08002481
 8002378:	08002481 	.word	0x08002481
 800237c:	08002481 	.word	0x08002481
 8002380:	08002481 	.word	0x08002481
 8002384:	08002481 	.word	0x08002481
 8002388:	08002481 	.word	0x08002481
 800238c:	08002481 	.word	0x08002481
 8002390:	08002481 	.word	0x08002481
 8002394:	08002481 	.word	0x08002481
 8002398:	08002481 	.word	0x08002481
 800239c:	08002481 	.word	0x08002481
 80023a0:	08002481 	.word	0x08002481
 80023a4:	08002481 	.word	0x08002481
 80023a8:	08002481 	.word	0x08002481
 80023ac:	08002481 	.word	0x08002481
 80023b0:	08002481 	.word	0x08002481
 80023b4:	08002481 	.word	0x08002481
 80023b8:	08002481 	.word	0x08002481
 80023bc:	08002481 	.word	0x08002481
 80023c0:	08002481 	.word	0x08002481
 80023c4:	08002481 	.word	0x08002481
 80023c8:	08002481 	.word	0x08002481
 80023cc:	08002481 	.word	0x08002481
 80023d0:	08002481 	.word	0x08002481
 80023d4:	08002481 	.word	0x08002481
 80023d8:	08002481 	.word	0x08002481
 80023dc:	08002481 	.word	0x08002481
 80023e0:	08002481 	.word	0x08002481
 80023e4:	08002481 	.word	0x08002481
 80023e8:	08002481 	.word	0x08002481
 80023ec:	08002481 	.word	0x08002481
 80023f0:	08002401 	.word	0x08002401
 80023f4:	0800243b 	.word	0x0800243b
 80023f8:	08002481 	.word	0x08002481
 80023fc:	08002481 	.word	0x08002481
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
			temp[0] = pbuf[0];
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <CDC_Control_FS+0x140>)
 8002406:	701a      	strb	r2, [r3, #0]
			temp[1] = pbuf[1];
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	785a      	ldrb	r2, [r3, #1]
 800240c:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <CDC_Control_FS+0x140>)
 800240e:	705a      	strb	r2, [r3, #1]
			temp[2] = pbuf[2];
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	789a      	ldrb	r2, [r3, #2]
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <CDC_Control_FS+0x140>)
 8002416:	709a      	strb	r2, [r3, #2]
			temp[3] = pbuf[3];
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	78da      	ldrb	r2, [r3, #3]
 800241c:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <CDC_Control_FS+0x140>)
 800241e:	70da      	strb	r2, [r3, #3]
			temp[4] = pbuf[4];
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	791a      	ldrb	r2, [r3, #4]
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <CDC_Control_FS+0x140>)
 8002426:	711a      	strb	r2, [r3, #4]
			temp[5] = pbuf[5];
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	795a      	ldrb	r2, [r3, #5]
 800242c:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <CDC_Control_FS+0x140>)
 800242e:	715a      	strb	r2, [r3, #5]
			temp[6] = pbuf[6];
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	799a      	ldrb	r2, [r3, #6]
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <CDC_Control_FS+0x140>)
 8002436:	719a      	strb	r2, [r3, #6]
    break;
 8002438:	e023      	b.n	8002482 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
			pbuf[0] = temp[0];
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <CDC_Control_FS+0x140>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	701a      	strb	r2, [r3, #0]
			pbuf[1] = temp[1];
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <CDC_Control_FS+0x140>)
 8002448:	7852      	ldrb	r2, [r2, #1]
 800244a:	701a      	strb	r2, [r3, #0]
			pbuf[2] = temp[2];
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3302      	adds	r3, #2
 8002450:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <CDC_Control_FS+0x140>)
 8002452:	7892      	ldrb	r2, [r2, #2]
 8002454:	701a      	strb	r2, [r3, #0]
			pbuf[3] = temp[3];
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3303      	adds	r3, #3
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <CDC_Control_FS+0x140>)
 800245c:	78d2      	ldrb	r2, [r2, #3]
 800245e:	701a      	strb	r2, [r3, #0]
			pbuf[4] = temp[4];
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	3304      	adds	r3, #4
 8002464:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <CDC_Control_FS+0x140>)
 8002466:	7912      	ldrb	r2, [r2, #4]
 8002468:	701a      	strb	r2, [r3, #0]
			pbuf[5] = temp[5];
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	3305      	adds	r3, #5
 800246e:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <CDC_Control_FS+0x140>)
 8002470:	7952      	ldrb	r2, [r2, #5]
 8002472:	701a      	strb	r2, [r3, #0]
			pbuf[6] = temp[6];
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3306      	adds	r3, #6
 8002478:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <CDC_Control_FS+0x140>)
 800247a:	7992      	ldrb	r2, [r2, #6]
 800247c:	701a      	strb	r2, [r3, #0]
    break;
 800247e:	e000      	b.n	8002482 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8002480:	bf00      	nop
  }

  return (USBD_OK);
 8002482:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	20001828 	.word	0x20001828

08002494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <CDC_Receive_FS+0x30>)
 80024a2:	f008 f841 	bl	800a528 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80024a6:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <CDC_Receive_FS+0x30>)
 80024a8:	f008 f89c 	bl	800a5e4 <USBD_CDC_ReceivePacket>
	USB_RECEIVE_CALLBACK(Buf, Len[0]);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff fa44 	bl	8001940 <USB_RECEIVE_CALLBACK>
  return (USBD_OK);
 80024b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000054c 	.word	0x2000054c

080024c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <CDC_Transmit_FS+0x48>)
 80024da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80024de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00b      	b.n	8002506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4806      	ldr	r0, [pc, #24]	@ (8002510 <CDC_Transmit_FS+0x48>)
 80024f6:	f007 fff5 	bl	800a4e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80024fa:	4805      	ldr	r0, [pc, #20]	@ (8002510 <CDC_Transmit_FS+0x48>)
 80024fc:	f008 f832 	bl	800a564 <USBD_CDC_TransmitPacket>
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000054c 	.word	0x2000054c

08002514 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8002526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800252a:	4618      	mov	r0, r3
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2212      	movs	r2, #18
 8002548:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800254a:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <USBD_FS_DeviceDescriptor+0x20>)
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	20000034 	.word	0x20000034

0800255c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2204      	movs	r2, #4
 800256c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800256e:	4b03      	ldr	r3, [pc, #12]	@ (800257c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	20000048 	.word	0x20000048

08002580 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4907      	ldr	r1, [pc, #28]	@ (80025b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8002596:	4808      	ldr	r0, [pc, #32]	@ (80025b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8002598:	f009 fa70 	bl	800ba7c <USBD_GetString>
 800259c:	e004      	b.n	80025a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80025a4:	f009 fa6a 	bl	800ba7c <USBD_GetString>
  }
  return USBD_StrDesc;
 80025a8:	4b02      	ldr	r3, [pc, #8]	@ (80025b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20001830 	.word	0x20001830
 80025b8:	0800ea6c 	.word	0x0800ea6c

080025bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4904      	ldr	r1, [pc, #16]	@ (80025dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80025cc:	4804      	ldr	r0, [pc, #16]	@ (80025e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80025ce:	f009 fa55 	bl	800ba7c <USBD_GetString>
  return USBD_StrDesc;
 80025d2:	4b02      	ldr	r3, [pc, #8]	@ (80025dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20001830 	.word	0x20001830
 80025e0:	0800ea78 	.word	0x0800ea78

080025e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	221a      	movs	r2, #26
 80025f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80025f6:	f000 f843 	bl	8002680 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80025fa:	4b02      	ldr	r3, [pc, #8]	@ (8002604 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000004c 	.word	0x2000004c

08002608 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	4907      	ldr	r1, [pc, #28]	@ (800263c <USBD_FS_ConfigStrDescriptor+0x34>)
 800261e:	4808      	ldr	r0, [pc, #32]	@ (8002640 <USBD_FS_ConfigStrDescriptor+0x38>)
 8002620:	f009 fa2c 	bl	800ba7c <USBD_GetString>
 8002624:	e004      	b.n	8002630 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4904      	ldr	r1, [pc, #16]	@ (800263c <USBD_FS_ConfigStrDescriptor+0x34>)
 800262a:	4805      	ldr	r0, [pc, #20]	@ (8002640 <USBD_FS_ConfigStrDescriptor+0x38>)
 800262c:	f009 fa26 	bl	800ba7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8002630:	4b02      	ldr	r3, [pc, #8]	@ (800263c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20001830 	.word	0x20001830
 8002640:	0800ea84 	.word	0x0800ea84

08002644 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4907      	ldr	r1, [pc, #28]	@ (8002678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800265a:	4808      	ldr	r0, [pc, #32]	@ (800267c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800265c:	f009 fa0e 	bl	800ba7c <USBD_GetString>
 8002660:	e004      	b.n	800266c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4904      	ldr	r1, [pc, #16]	@ (8002678 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8002666:	4805      	ldr	r0, [pc, #20]	@ (800267c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8002668:	f009 fa08 	bl	800ba7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20001830 	.word	0x20001830
 800267c:	0800ea90 	.word	0x0800ea90

08002680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <Get_SerialNum+0x44>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <Get_SerialNum+0x48>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <Get_SerialNum+0x4c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80026a6:	2208      	movs	r2, #8
 80026a8:	4909      	ldr	r1, [pc, #36]	@ (80026d0 <Get_SerialNum+0x50>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f814 	bl	80026d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80026b0:	2204      	movs	r2, #4
 80026b2:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <Get_SerialNum+0x54>)
 80026b4:	68b8      	ldr	r0, [r7, #8]
 80026b6:	f000 f80f 	bl	80026d8 <IntToUnicode>
  }
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	1fff7a10 	.word	0x1fff7a10
 80026c8:	1fff7a14 	.word	0x1fff7a14
 80026cc:	1fff7a18 	.word	0x1fff7a18
 80026d0:	2000004e 	.word	0x2000004e
 80026d4:	2000005e 	.word	0x2000005e

080026d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
 80026ee:	e027      	b.n	8002740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0f1b      	lsrs	r3, r3, #28
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d80b      	bhi.n	8002710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4619      	mov	r1, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	440b      	add	r3, r1
 8002708:	3230      	adds	r2, #48	@ 0x30
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e00a      	b.n	8002726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0f1b      	lsrs	r3, r3, #28
 8002714:	b2da      	uxtb	r2, r3
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4619      	mov	r1, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	440b      	add	r3, r1
 8002720:	3237      	adds	r2, #55	@ 0x37
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	3301      	adds	r3, #1
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	3301      	adds	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
 8002740:	7dfa      	ldrb	r2, [r7, #23]
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	429a      	cmp	r2, r3
 8002746:	d3d3      	bcc.n	80026f0 <IntToUnicode+0x18>
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	@ 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002778:	d147      	bne.n	800280a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	481b      	ldr	r0, [pc, #108]	@ (8002818 <HAL_PCD_MspInit+0xc0>)
 80027ac:	f002 f8e8 	bl	8004980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027c2:	230a      	movs	r3, #10
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4812      	ldr	r0, [pc, #72]	@ (8002818 <HAL_PCD_MspInit+0xc0>)
 80027ce:	f002 f8d7 	bl	8004980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 80027d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_PCD_MspInit+0xbc>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2043      	movs	r0, #67	@ 0x43
 8002800:	f001 fe6b 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002804:	2043      	movs	r0, #67	@ 0x43
 8002806:	f001 fe84 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000

0800281c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f007 ffbf 	bl	800a7b6 <USBD_LL_SetupStage>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	4619      	mov	r1, r3
 800286a:	f007 fff9 	bl	800a860 <USBD_LL_DataOutStage>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3320      	adds	r3, #32
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	4619      	mov	r1, r3
 800289e:	f008 f892 	bl	800a9c6 <USBD_LL_DataInStage>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f008 f9cc 	bl	800ac56 <USBD_LL_SOF>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	79db      	ldrb	r3, [r3, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e008      	b.n	80028f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	79db      	ldrb	r3, [r3, #7]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d102      	bne.n	80028ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e001      	b.n	80028f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80028ee:	f7ff fa07 	bl	8001d00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f008 f966 	bl	800abce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8002908:	4618      	mov	r0, r3
 800290a:	f008 f90e 	bl	800ab2a <USBD_LL_Reset>
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8002926:	4618      	mov	r0, r3
 8002928:	f008 f961 	bl	800abee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7adb      	ldrb	r3, [r3, #11]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_PCD_SuspendCallback+0x48>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <HAL_PCD_SuspendCallback+0x48>)
 8002952:	f043 0306 	orr.w	r3, r3, #6
 8002956:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8002972:	4618      	mov	r0, r3
 8002974:	f008 f957 	bl	800ac26 <USBD_LL_Resume>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f008 f9af 	bl	800acfa <USBD_LL_IsoOUTIncomplete>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f008 f96b 	bl	800ac96 <USBD_LL_IsoINIncomplete>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f008 f9c1 	bl	800ad5e <USBD_LL_DevConnected>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f008 f9be 	bl	800ad74 <USBD_LL_DevDisconnected>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13c      	bne.n	8002a8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8002a10:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a20:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002a26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002a28:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a30:	2202      	movs	r2, #2
 8002a32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a34:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a46:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a5e:	480d      	ldr	r0, [pc, #52]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a60:	f002 f981 	bl	8004d66 <HAL_PCD_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8002a6a:	f7ff f949 	bl	8001d00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	4808      	ldr	r0, [pc, #32]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a72:	f003 fbac 	bl	80061ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4806      	ldr	r0, [pc, #24]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a7c:	f003 fb60 	bl	8006140 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	2101      	movs	r1, #1
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <USBD_LL_Init+0x94>)
 8002a86:	f003 fb5b 	bl	8006140 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20001a30 	.word	0x20001a30

08002a98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fa68 	bl	8004f84 <HAL_PCD_Start>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f942 	bl	8002d44 <USBD_Get_USB_Status>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	4611      	mov	r1, r2
 8002ada:	461a      	mov	r2, r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	70fb      	strb	r3, [r7, #3]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70bb      	strb	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8002af6:	78bb      	ldrb	r3, [r7, #2]
 8002af8:	883a      	ldrh	r2, [r7, #0]
 8002afa:	78f9      	ldrb	r1, [r7, #3]
 8002afc:	f002 ff3c 	bl	8005978 <HAL_PCD_EP_Open>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f91c 	bl	8002d44 <USBD_Get_USB_Status>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 ff85 	bl	8005a48 <HAL_PCD_EP_Close>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f8fd 	bl	8002d44 <USBD_Get_USB_Status>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 f83d 	bl	8005bf6 <HAL_PCD_EP_SetStall>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f8de 	bl	8002d44 <USBD_Get_USB_Status>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f881 	bl	8005cbc <HAL_PCD_EP_ClrStall>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f8bf 	bl	8002d44 <USBD_Get_USB_Status>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002be6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da0b      	bge.n	8002c08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3316      	adds	r3, #22
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	e00b      	b.n	8002c20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c0e:	68f9      	ldr	r1, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8002c1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fe70 	bl	8005930 <HAL_PCD_SetAddress>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f874 	bl	8002d44 <USBD_Get_USB_Status>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	460b      	mov	r3, r1
 8002c78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8002c88:	7af9      	ldrb	r1, [r7, #11]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	f002 ff78 	bl	8005b82 <HAL_PCD_EP_Transmit>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f853 	bl	8002d44 <USBD_Get_USB_Status>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002ca2:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8002cca:	7af9      	ldrb	r1, [r7, #11]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	f002 ff04 	bl	8005adc <HAL_PCD_EP_Receive>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f832 	bl	8002d44 <USBD_Get_USB_Status>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002ce4:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	4611      	mov	r1, r2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 ff24 	bl	8005b52 <HAL_PCD_EP_GetRxCount>
 8002d0a:	4603      	mov	r3, r0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <USBD_static_malloc+0x18>)
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20001f14 	.word	0x20001f14

08002d30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d817      	bhi.n	8002d88 <USBD_Get_USB_Status+0x44>
 8002d58:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <USBD_Get_USB_Status+0x1c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d77 	.word	0x08002d77
 8002d68:	08002d7d 	.word	0x08002d7d
 8002d6c:	08002d83 	.word	0x08002d83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
    break;
 8002d74:	e00b      	b.n	8002d8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002d76:	2303      	movs	r3, #3
 8002d78:	73fb      	strb	r3, [r7, #15]
    break;
 8002d7a:	e008      	b.n	8002d8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8002d80:	e005      	b.n	8002d8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8002d82:	2303      	movs	r3, #3
 8002d84:	73fb      	strb	r3, [r7, #15]
    break;
 8002d86:	e002      	b.n	8002d8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8002d8c:	bf00      	nop
  }
  return usb_status;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <SystemInit+0x20>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <SystemInit+0x20>)
 8002da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_Init+0x40>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <HAL_Init+0x40>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	@ (8002e00 <HAL_Init+0x40>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f001 fb6b 	bl	80044c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7fe ff92 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fb83 	bl	800452e <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f001 fb4b 	bl	80044da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000068 	.word	0x20000068
 8002e5c:	20000070 	.word	0x20000070
 8002e60:	2000006c 	.word	0x2000006c

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_IncTick+0x20>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_IncTick+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <HAL_IncTick+0x24>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000070 	.word	0x20000070
 8002e88:	20002134 	.word	0x20002134

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_GetTick+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20002134 	.word	0x20002134

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff ffee 	bl	8002e8c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000070 	.word	0x20000070

08002eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e033      	b.n	8002f6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe f88c 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa68 	bl	8003414 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f5a:	e001      	b.n	8002f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d049      	beq.n	800303c <HAL_ADC_IRQHandler+0xca>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d046      	beq.n	800303c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d12b      	bne.n	800302c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d127      	bne.n	800302c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d119      	bne.n	800302c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0220 	bic.w	r2, r2, #32
 8003006:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8b0 	bl	8003192 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0212 	mvn.w	r2, #18
 800303a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d057      	beq.n	8003102 <HAL_ADC_IRQHandler+0x190>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d054      	beq.n	8003102 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d139      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12b      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d124      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030cc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa8a 	bl	800360c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 020c 	mvn.w	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_ADC_IRQHandler+0x1d6>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d014      	beq.n	8003148 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10d      	bne.n	8003148 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f834 	bl	80031a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0201 	mvn.w	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003156:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_ADC_IRQHandler+0x218>
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d012      	beq.n	800318a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003168:	f043 0202 	orr.w	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0220 	mvn.w	r2, #32
 8003178:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f81d 	bl	80031ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0220 	mvn.w	r2, #32
 8003188:	601a      	str	r2, [r3, #0]
  }
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x1c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e105      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x228>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	d925      	bls.n	8003248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68d9      	ldr	r1, [r3, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	3b1e      	subs	r3, #30
 8003212:	2207      	movs	r2, #7
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43da      	mvns	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	400a      	ands	r2, r1
 8003220:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68d9      	ldr	r1, [r3, #12]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4618      	mov	r0, r3
 8003234:	4603      	mov	r3, r0
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4403      	add	r3, r0
 800323a:	3b1e      	subs	r3, #30
 800323c:	409a      	lsls	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e022      	b.n	800328e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6919      	ldr	r1, [r3, #16]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	2207      	movs	r2, #7
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43da      	mvns	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	400a      	ands	r2, r1
 800326a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	4618      	mov	r0, r3
 800327e:	4603      	mov	r3, r0
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4403      	add	r3, r0
 8003284:	409a      	lsls	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d824      	bhi.n	80032e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	3b05      	subs	r3, #5
 80032a8:	221f      	movs	r2, #31
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	400a      	ands	r2, r1
 80032b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	3b05      	subs	r3, #5
 80032d2:	fa00 f203 	lsl.w	r2, r0, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80032de:	e04c      	b.n	800337a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d824      	bhi.n	8003332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	3b23      	subs	r3, #35	@ 0x23
 80032fa:	221f      	movs	r2, #31
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43da      	mvns	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	400a      	ands	r2, r1
 8003308:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	4618      	mov	r0, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b23      	subs	r3, #35	@ 0x23
 8003324:	fa00 f203 	lsl.w	r2, r0, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003330:	e023      	b.n	800337a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	3b41      	subs	r3, #65	@ 0x41
 8003344:	221f      	movs	r2, #31
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	4618      	mov	r0, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	3b41      	subs	r3, #65	@ 0x41
 800336e:	fa00 f203 	lsl.w	r2, r0, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800337a:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_ADC_ConfigChannel+0x234>)
 800337c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a21      	ldr	r2, [pc, #132]	@ (8003408 <HAL_ADC_ConfigChannel+0x238>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d109      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1cc>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b12      	cmp	r3, #18
 800338e:	d105      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a19      	ldr	r2, [pc, #100]	@ (8003408 <HAL_ADC_ConfigChannel+0x238>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d123      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x21e>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d003      	beq.n	80033b6 <HAL_ADC_ConfigChannel+0x1e6>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b11      	cmp	r3, #17
 80033b4:	d11b      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d111      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_ADC_ConfigChannel+0x23c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <HAL_ADC_ConfigChannel+0x240>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	0c9a      	lsrs	r2, r3, #18
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033e0:	e002      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f9      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40012300 	.word	0x40012300
 8003408:	40012000 	.word	0x40012000
 800340c:	20000068 	.word	0x20000068
 8003410:	431bde83 	.word	0x431bde83

08003414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341c:	4b79      	ldr	r3, [pc, #484]	@ (8003604 <ADC_Init+0x1f0>)
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	021a      	lsls	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800346c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800348e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	4a58      	ldr	r2, [pc, #352]	@ (8003608 <ADC_Init+0x1f4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	e00f      	b.n	8003512 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003510:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0202 	bic.w	r2, r2, #2
 8003520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6899      	ldr	r1, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7e1b      	ldrb	r3, [r3, #24]
 800352c:	005a      	lsls	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800355e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	3b01      	subs	r3, #1
 800356c:	035a      	lsls	r2, r3, #13
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	e007      	b.n	8003588 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003586:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003596:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	051a      	lsls	r2, r3, #20
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035ca:	025a      	lsls	r2, r3, #9
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6899      	ldr	r1, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	029a      	lsls	r2, r3, #10
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40012300 	.word	0x40012300
 8003608:	0f000001 	.word	0x0f000001

0800360c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0ed      	b.n	800380e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fdc4 	bl	80011cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003654:	f7ff fc1a 	bl	8002e8c <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800365a:	e012      	b.n	8003682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800365c:	f7ff fc16 	bl	8002e8c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d90b      	bls.n	8003682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2205      	movs	r2, #5
 800367a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0c5      	b.n	800380e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0e5      	beq.n	800365c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0202 	bic.w	r2, r2, #2
 800369e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a0:	f7ff fbf4 	bl	8002e8c <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036a6:	e012      	b.n	80036ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a8:	f7ff fbf0 	bl	8002e8c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b0a      	cmp	r3, #10
 80036b4:	d90b      	bls.n	80036ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2205      	movs	r2, #5
 80036c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e09f      	b.n	800380e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e5      	bne.n	80036a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7e1b      	ldrb	r3, [r3, #24]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d108      	bne.n	80036f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	e007      	b.n	8003706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7e5b      	ldrb	r3, [r3, #25]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e9b      	ldrb	r3, [r3, #26]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0220 	orr.w	r2, r2, #32
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e007      	b.n	800375a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0220 	bic.w	r2, r2, #32
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7edb      	ldrb	r3, [r3, #27]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d108      	bne.n	8003774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0210 	bic.w	r2, r2, #16
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e007      	b.n	8003784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0210 	orr.w	r2, r2, #16
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7f1b      	ldrb	r3, [r3, #28]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d108      	bne.n	800379e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e007      	b.n	80037ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7f5b      	ldrb	r3, [r3, #29]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d108      	bne.n	80037c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0204 	orr.w	r2, r2, #4
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e007      	b.n	80037d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0204 	bic.w	r2, r2, #4
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	ea42 0103 	orr.w	r1, r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d003      	beq.n	800383e <HAL_CAN_ConfigFilter+0x26>
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	2b02      	cmp	r3, #2
 800383a:	f040 80be 	bne.w	80039ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800383e:	4b65      	ldr	r3, [pc, #404]	@ (80039d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003840:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003858:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	431a      	orrs	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d123      	bne.n	80038e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3248      	adds	r2, #72	@ 0x48
 80038c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	3348      	adds	r3, #72	@ 0x48
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d122      	bne.n	8003936 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003910:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3248      	adds	r2, #72	@ 0x48
 8003916:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800392a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	3348      	adds	r3, #72	@ 0x48
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003950:	e007      	b.n	8003962 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	431a      	orrs	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800397c:	e007      	b.n	800398e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	431a      	orrs	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	431a      	orrs	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039ac:	f023 0201 	bic.w	r2, r3, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e006      	b.n	80039c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40006400 	.word	0x40006400

080039d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d12e      	bne.n	8003a4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a04:	f7ff fa42 	bl	8002e8c <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a0a:	e012      	b.n	8003a32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a0c:	f7ff fa3e 	bl	8002e8c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b0a      	cmp	r3, #10
 8003a18:	d90b      	bls.n	8003a32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2205      	movs	r2, #5
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e012      	b.n	8003a58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e006      	b.n	8003a58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	@ 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a74:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a7e:	7ffb      	ldrb	r3, [r7, #31]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d003      	beq.n	8003a8c <HAL_CAN_AddTxMessage+0x2c>
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	f040 80ad 	bne.w	8003be6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8095 	beq.w	8003bd6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	6809      	ldr	r1, [r1, #0]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3318      	adds	r3, #24
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	440b      	add	r3, r1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e00f      	b.n	8003b04 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003aee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003af8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3318      	adds	r3, #24
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	440b      	add	r3, r1
 8003b02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	440b      	add	r3, r1
 8003b14:	3304      	adds	r3, #4
 8003b16:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	7d1b      	ldrb	r3, [r3, #20]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d111      	bne.n	8003b44 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3318      	adds	r3, #24
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	6811      	ldr	r1, [r2, #0]
 8003b34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	440b      	add	r3, r1
 8003b40:	3304      	adds	r3, #4
 8003b42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3307      	adds	r3, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	061a      	lsls	r2, r3, #24
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3306      	adds	r3, #6
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3305      	adds	r3, #5
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	3204      	adds	r2, #4
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	4610      	mov	r0, r2
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	ea43 0200 	orr.w	r2, r3, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003b7a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3303      	adds	r3, #3
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	061a      	lsls	r2, r3, #24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3302      	adds	r3, #2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3301      	adds	r3, #1
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	4313      	orrs	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	ea43 0200 	orr.w	r2, r3, r0
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	440b      	add	r3, r1
 8003bac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003bb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3318      	adds	r3, #24
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	4413      	add	r3, r2
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6811      	ldr	r1, [r2, #0]
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	3318      	adds	r3, #24
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	440b      	add	r3, r1
 8003bd0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e00e      	b.n	8003bf4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e006      	b.n	8003bf4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3724      	adds	r7, #36	@ 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c14:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c16:	7afb      	ldrb	r3, [r7, #11]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d002      	beq.n	8003c22 <HAL_CAN_IsTxMessagePending+0x22>
 8003c1c:	7afb      	ldrb	r3, [r7, #11]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d10b      	bne.n	8003c3a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	069b      	lsls	r3, r3, #26
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	069b      	lsls	r3, r3, #26
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d003      	beq.n	8003c6c <HAL_CAN_GetRxMessage+0x24>
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	f040 8103 	bne.w	8003e72 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d116      	bne.n	8003cae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0f7      	b.n	8003e80 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d107      	bne.n	8003cae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0e8      	b.n	8003e80 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	331b      	adds	r3, #27
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0204 	and.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10c      	bne.n	8003ce6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	331b      	adds	r3, #27
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0d5b      	lsrs	r3, r3, #21
 8003cdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e00b      	b.n	8003cfe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	331b      	adds	r3, #27
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	331b      	adds	r3, #27
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	4413      	add	r3, r2
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0202 	and.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	331b      	adds	r3, #27
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	3304      	adds	r3, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e00b      	b.n	8003d4c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	331b      	adds	r3, #27
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	3304      	adds	r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	331b      	adds	r3, #27
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	331b      	adds	r3, #27
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	3304      	adds	r3, #4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0a1a      	lsrs	r2, r3, #8
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0c1a      	lsrs	r2, r3, #16
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0e1a      	lsrs	r2, r3, #24
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	3303      	adds	r3, #3
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	3304      	adds	r3, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	0a1a      	lsrs	r2, r3, #8
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0c1a      	lsrs	r2, r3, #16
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	3306      	adds	r3, #6
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e1a      	lsrs	r2, r3, #24
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	3307      	adds	r3, #7
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0220 	orr.w	r2, r2, #32
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e007      	b.n	8003e6e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e006      	b.n	8003e80 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d002      	beq.n	8003eaa <HAL_CAN_ActivateNotification+0x1e>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d109      	bne.n	8003ebe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e006      	b.n	8003ecc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d07c      	beq.n	8004018 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f983 	bl	8004246 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f40:	e016      	b.n	8003f70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f54:	e00c      	b.n	8003f70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f68:	e002      	b.n	8003f70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f989 	bl	8004282 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d024      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f963 	bl	800425a <HAL_CAN_TxMailbox1CompleteCallback>
 8003f94:	e016      	b.n	8003fc4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa8:	e00c      	b.n	8003fc4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fbc:	e002      	b.n	8003fc4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f969 	bl	8004296 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d024      	beq.n	8004018 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f943 	bl	800426e <HAL_CAN_TxMailbox2CompleteCallback>
 8003fe8:	e016      	b.n	8004018 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffc:	e00c      	b.n	8004018 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004010:	e002      	b.n	8004018 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f949 	bl	80042aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2210      	movs	r2, #16
 800403a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d006      	beq.n	800405e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2208      	movs	r2, #8
 8004056:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f930 	bl	80042be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd fbc2 	bl	8001800 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2210      	movs	r2, #16
 800409e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2208      	movs	r2, #8
 80040ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f908 	bl	80042d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fbe4 	bl	80018a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d006      	beq.n	8004102 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2210      	movs	r2, #16
 80040fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8f2 	bl	80042e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2208      	movs	r2, #8
 800411c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8eb 	bl	80042fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07b      	beq.n	8004226 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d072      	beq.n	800421e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004192:	2b00      	cmp	r3, #0
 8004194:	d043      	beq.n	800421e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03e      	beq.n	800421e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a6:	2b60      	cmp	r3, #96	@ 0x60
 80041a8:	d02b      	beq.n	8004202 <HAL_CAN_IRQHandler+0x32a>
 80041aa:	2b60      	cmp	r3, #96	@ 0x60
 80041ac:	d82e      	bhi.n	800420c <HAL_CAN_IRQHandler+0x334>
 80041ae:	2b50      	cmp	r3, #80	@ 0x50
 80041b0:	d022      	beq.n	80041f8 <HAL_CAN_IRQHandler+0x320>
 80041b2:	2b50      	cmp	r3, #80	@ 0x50
 80041b4:	d82a      	bhi.n	800420c <HAL_CAN_IRQHandler+0x334>
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d019      	beq.n	80041ee <HAL_CAN_IRQHandler+0x316>
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d826      	bhi.n	800420c <HAL_CAN_IRQHandler+0x334>
 80041be:	2b30      	cmp	r3, #48	@ 0x30
 80041c0:	d010      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x30c>
 80041c2:	2b30      	cmp	r3, #48	@ 0x30
 80041c4:	d822      	bhi.n	800420c <HAL_CAN_IRQHandler+0x334>
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d002      	beq.n	80041d0 <HAL_CAN_IRQHandler+0x2f8>
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d005      	beq.n	80041da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041ce:	e01d      	b.n	800420c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	f043 0308 	orr.w	r3, r3, #8
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041d8:	e019      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	f043 0310 	orr.w	r3, r3, #16
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041e2:	e014      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	f043 0320 	orr.w	r3, r3, #32
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041ec:	e00f      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041f6:	e00a      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004200:	e005      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800420a:	e000      	b.n	800420e <HAL_CAN_IRQHandler+0x336>
            break;
 800420c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800421c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2204      	movs	r2, #4
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f868 	bl	800430e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800423e:	bf00      	nop
 8004240:	3728      	adds	r7, #40	@ 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <__NVIC_SetPriorityGrouping>:
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004334:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004340:	4013      	ands	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800434c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <__NVIC_GetPriorityGrouping>:
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <__NVIC_GetPriorityGrouping+0x18>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	f003 0307 	and.w	r3, r3, #7
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_EnableIRQ>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db0b      	blt.n	80043b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	4907      	ldr	r1, [pc, #28]	@ (80043c0 <__NVIC_EnableIRQ+0x38>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2001      	movs	r0, #1
 80043aa:	fa00 f202 	lsl.w	r2, r0, r2
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_SetPriority>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db0a      	blt.n	80043ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	490c      	ldr	r1, [pc, #48]	@ (8004410 <__NVIC_SetPriority+0x4c>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043ec:	e00a      	b.n	8004404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4908      	ldr	r1, [pc, #32]	@ (8004414 <__NVIC_SetPriority+0x50>)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3b04      	subs	r3, #4
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	440b      	add	r3, r1
 8004402:	761a      	strb	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000e100 	.word	0xe000e100
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <NVIC_EncodePriority>:
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	@ 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf28      	it	cs
 8004436:	2304      	movcs	r3, #4
 8004438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3304      	adds	r3, #4
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <NVIC_EncodePriority+0x30>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3b03      	subs	r3, #3
 8004446:	e000      	b.n	800444a <NVIC_EncodePriority+0x32>
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43d9      	mvns	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	4313      	orrs	r3, r2
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <SysTick_Config>:
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004490:	d301      	bcc.n	8004496 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004492:	2301      	movs	r3, #1
 8004494:	e00f      	b.n	80044b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004496:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <SysTick_Config+0x40>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449e:	210f      	movs	r1, #15
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f7ff ff8e 	bl	80043c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a8:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <SysTick_Config+0x40>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ae:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <SysTick_Config+0x40>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010

080044c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff29 	bl	8004324 <__NVIC_SetPriorityGrouping>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ec:	f7ff ff3e 	bl	800436c <__NVIC_GetPriorityGrouping>
 80044f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff8e 	bl	8004418 <NVIC_EncodePriority>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff5d 	bl	80043c4 <__NVIC_SetPriority>
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff31 	bl	8004388 <__NVIC_EnableIRQ>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ffa2 	bl	8004480 <SysTick_Config>
 800453c:	4603      	mov	r3, r0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004552:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7fe fc9a 	bl	8002e8c <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d008      	beq.n	8004578 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2280      	movs	r2, #128	@ 0x80
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e052      	b.n	800461e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0216 	bic.w	r2, r2, #22
 8004586:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004596:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <HAL_DMA_Abort+0x62>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0208 	bic.w	r2, r2, #8
 80045b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c8:	e013      	b.n	80045f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ca:	f7fe fc5f 	bl	8002e8c <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d90c      	bls.n	80045f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2203      	movs	r2, #3
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e015      	b.n	800461e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e4      	bne.n	80045ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	223f      	movs	r2, #63	@ 0x3f
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d004      	beq.n	8004644 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2280      	movs	r2, #128	@ 0x80
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e00c      	b.n	800465e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2205      	movs	r2, #5
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004678:	4b8e      	ldr	r3, [pc, #568]	@ (80048b4 <HAL_DMA_IRQHandler+0x248>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a8e      	ldr	r2, [pc, #568]	@ (80048b8 <HAL_DMA_IRQHandler+0x24c>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0a9b      	lsrs	r3, r3, #10
 8004684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004696:	2208      	movs	r2, #8
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01a      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	2208      	movs	r2, #8
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d012      	beq.n	800470e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	2204      	movs	r2, #4
 8004714:	409a      	lsls	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d012      	beq.n	8004744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004730:	2204      	movs	r2, #4
 8004732:	409a      	lsls	r2, r3
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	2210      	movs	r2, #16
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d043      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03c      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004766:	2210      	movs	r2, #16
 8004768:	409a      	lsls	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d018      	beq.n	80047ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d108      	bne.n	800479c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d024      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
 800479a:	e01f      	b.n	80047dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01b      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
 80047ac:	e016      	b.n	80047dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d107      	bne.n	80047cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0208 	bic.w	r2, r2, #8
 80047ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e0:	2220      	movs	r2, #32
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 808f 	beq.w	800490c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8087 	beq.w	800490c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004802:	2220      	movs	r2, #32
 8004804:	409a      	lsls	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b05      	cmp	r3, #5
 8004814:	d136      	bne.n	8004884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0216 	bic.w	r2, r2, #22
 8004824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_DMA_IRQHandler+0x1da>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0208 	bic.w	r2, r2, #8
 8004854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	223f      	movs	r2, #63	@ 0x3f
 800485c:	409a      	lsls	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d07e      	beq.n	8004978 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
        }
        return;
 8004882:	e079      	b.n	8004978 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d031      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
 80048b0:	e02c      	b.n	800490c <HAL_DMA_IRQHandler+0x2a0>
 80048b2:	bf00      	nop
 80048b4:	20000068 	.word	0x20000068
 80048b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d023      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
 80048cc:	e01e      	b.n	800490c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0210 	bic.w	r2, r2, #16
 80048ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004910:	2b00      	cmp	r3, #0
 8004912:	d032      	beq.n	800497a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2205      	movs	r2, #5
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3301      	adds	r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	d307      	bcc.n	8004954 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f2      	bne.n	8004938 <HAL_DMA_IRQHandler+0x2cc>
 8004952:	e000      	b.n	8004956 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004954:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e000      	b.n	800497a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004978:	bf00      	nop
    }
  }
}
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004980:	b480      	push	{r7}
 8004982:	b089      	sub	sp, #36	@ 0x24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e16b      	b.n	8004c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800499c:	2201      	movs	r2, #1
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	f040 815a 	bne.w	8004c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d005      	beq.n	80049d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d130      	bne.n	8004a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a08:	2201      	movs	r2, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 0201 	and.w	r2, r3, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d017      	beq.n	8004a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d123      	bne.n	8004ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	220f      	movs	r2, #15
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	08da      	lsrs	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3208      	adds	r2, #8
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0203 	and.w	r2, r3, #3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80b4 	beq.w	8004c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4b60      	ldr	r3, [pc, #384]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b16:	4b5d      	ldr	r3, [pc, #372]	@ (8004c8c <HAL_GPIO_Init+0x30c>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b22:	4a5b      	ldr	r2, [pc, #364]	@ (8004c90 <HAL_GPIO_Init+0x310>)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	3302      	adds	r3, #2
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	220f      	movs	r2, #15
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_GPIO_Init+0x314>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_GPIO_Init+0x226>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	@ (8004c98 <HAL_GPIO_Init+0x318>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d025      	beq.n	8004ba2 <HAL_GPIO_Init+0x222>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	@ (8004c9c <HAL_GPIO_Init+0x31c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <HAL_GPIO_Init+0x21e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca0 <HAL_GPIO_Init+0x320>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <HAL_GPIO_Init+0x21a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	@ (8004ca4 <HAL_GPIO_Init+0x324>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_GPIO_Init+0x216>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4d      	ldr	r2, [pc, #308]	@ (8004ca8 <HAL_GPIO_Init+0x328>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_GPIO_Init+0x212>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4c      	ldr	r2, [pc, #304]	@ (8004cac <HAL_GPIO_Init+0x32c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <HAL_GPIO_Init+0x20e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	@ (8004cb0 <HAL_GPIO_Init+0x330>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_GPIO_Init+0x20a>
 8004b86:	2307      	movs	r3, #7
 8004b88:	e00e      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	e00c      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b8e:	2306      	movs	r3, #6
 8004b90:	e00a      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b92:	2305      	movs	r3, #5
 8004b94:	e008      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b96:	2304      	movs	r3, #4
 8004b98:	e006      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e004      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e002      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_GPIO_Init+0x228>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	f002 0203 	and.w	r2, r2, #3
 8004bae:	0092      	lsls	r2, r2, #2
 8004bb0:	4093      	lsls	r3, r2
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bb8:	4935      	ldr	r1, [pc, #212]	@ (8004c90 <HAL_GPIO_Init+0x310>)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bea:	4a32      	ldr	r2, [pc, #200]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bf0:	4b30      	ldr	r3, [pc, #192]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c14:	4a27      	ldr	r2, [pc, #156]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c1a:	4b26      	ldr	r3, [pc, #152]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c68:	4a12      	ldr	r2, [pc, #72]	@ (8004cb4 <HAL_GPIO_Init+0x334>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	f67f ae90 	bls.w	800499c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40013800 	.word	0x40013800
 8004c94:	40020000 	.word	0x40020000
 8004c98:	40020400 	.word	0x40020400
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020c00 	.word	0x40020c00
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40021400 	.word	0x40021400
 8004cac:	40021800 	.word	0x40021800
 8004cb0:	40021c00 	.word	0x40021c00
 8004cb4:	40013c00 	.word	0x40013c00

08004cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cd4:	e003      	b.n	8004cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	041a      	lsls	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	619a      	str	r2, [r3, #24]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cfc:	887a      	ldrh	r2, [r7, #2]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4013      	ands	r3, r2
 8004d02:	041a      	lsls	r2, r3, #16
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43d9      	mvns	r1, r3
 8004d08:	887b      	ldrh	r3, [r7, #2]
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d2a:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d36:	4a05      	ldr	r2, [pc, #20]	@ (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f806 	bl	8004d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40013c00 	.word	0x40013c00

08004d50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e101      	b.n	8004f7c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd fce0 	bl	8002758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da6:	d102      	bne.n	8004dae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 f8f1 	bl	8007f9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	7c1a      	ldrb	r2, [r3, #16]
 8004dc0:	f88d 2000 	strb.w	r2, [sp]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc8:	f002 ffcf 	bl	8007d6a <USB_CoreInit>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0ce      	b.n	8004f7c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 f8e9 	bl	8007fbc <USB_SetCurrentMode>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0bf      	b.n	8004f7c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
 8004e00:	e04a      	b.n	8004e98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3315      	adds	r3, #21
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3314      	adds	r3, #20
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	332e      	adds	r3, #46	@ 0x2e
 8004e3e:	4602      	mov	r2, r0
 8004e40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	3318      	adds	r3, #24
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	331c      	adds	r3, #28
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e6a:	7bfa      	ldrb	r2, [r7, #15]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3320      	adds	r3, #32
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3324      	adds	r3, #36	@ 0x24
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	3301      	adds	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d3af      	bcc.n	8004e02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e044      	b.n	8004f32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ed4:	7bfa      	ldrb	r2, [r7, #15]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	791b      	ldrb	r3, [r3, #4]
 8004f36:	7bfa      	ldrb	r2, [r7, #15]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3b5      	bcc.n	8004ea8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7c1a      	ldrb	r2, [r3, #16]
 8004f44:	f88d 2000 	strb.w	r2, [sp]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f4c:	f003 f882 	bl	8008054 <USB_DevInit>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e00c      	b.n	8004f7c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 f8c6 	bl	8009106 <USB_DevDisconnect>

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_PCD_Start+0x1c>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e022      	b.n	8004fe6 <HAL_PCD_Start+0x62>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d009      	beq.n	8004fc8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d105      	bne.n	8004fc8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 ffd3 	bl	8007f78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f004 f874 	bl	80090c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fee:	b590      	push	{r4, r7, lr}
 8004ff0:	b08d      	sub	sp, #52	@ 0x34
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f004 f932 	bl	800926e <USB_GetMode>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 848c 	bne.w	800592a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f004 f896 	bl	8009148 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8482 	beq.w	8005928 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	0a1b      	lsrs	r3, r3, #8
 800502e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f004 f883 	bl	8009148 <USB_ReadInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d107      	bne.n	800505c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f002 0202 	and.w	r2, r2, #2
 800505a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f004 f871 	bl	8009148 <USB_ReadInterrupts>
 8005066:	4603      	mov	r3, r0
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b10      	cmp	r3, #16
 800506e:	d161      	bne.n	8005134 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0210 	bic.w	r2, r2, #16
 800507e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	3304      	adds	r3, #4
 800509e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	0c5b      	lsrs	r3, r3, #17
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d124      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d035      	beq.n	8005124 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6a38      	ldr	r0, [r7, #32]
 80050cc:	f003 fea8 	bl	8008e20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	091b      	lsrs	r3, r3, #4
 80050d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050dc:	441a      	add	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ee:	441a      	add	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	615a      	str	r2, [r3, #20]
 80050f4:	e016      	b.n	8005124 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	0c5b      	lsrs	r3, r3, #17
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d110      	bne.n	8005124 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005108:	2208      	movs	r2, #8
 800510a:	4619      	mov	r1, r3
 800510c:	6a38      	ldr	r0, [r7, #32]
 800510e:	f003 fe87 	bl	8008e20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511e:	441a      	add	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0210 	orr.w	r2, r2, #16
 8005132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f004 f805 	bl	8009148 <USB_ReadInterrupts>
 800513e:	4603      	mov	r3, r0
 8005140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005144:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005148:	f040 80a7 	bne.w	800529a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f004 f80a 	bl	800916e <USB_ReadDevAllOutEpInterrupt>
 800515a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800515c:	e099      	b.n	8005292 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 808e 	beq.w	8005286 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f004 f82e 	bl	80091d6 <USB_ReadDevOutEPInterrupt>
 800517a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2301      	movs	r3, #1
 8005196:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fea2 	bl	8005ee4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00c      	beq.n	80051c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2308      	movs	r3, #8
 80051ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 ff78 	bl	80060b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	2310      	movs	r3, #16
 80051de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d030      	beq.n	800524c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f2:	2b80      	cmp	r3, #128	@ 0x80
 80051f4:	d109      	bne.n	800520a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005208:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800520a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4413      	add	r3, r2
 800521c:	3304      	adds	r3, #4
 800521e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	78db      	ldrb	r3, [r3, #3]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d108      	bne.n	800523a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fd fba3 	bl	8002980 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	2302      	movs	r3, #2
 800524a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	2320      	movs	r3, #32
 8005266:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005284:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	3301      	adds	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f af62 	bne.w	800515e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f003 ff52 	bl	8009148 <USB_ReadInterrupts>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052ae:	f040 80db 	bne.w	8005468 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f003 ff73 	bl	80091a2 <USB_ReadDevAllInEpInterrupt>
 80052bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80052c2:	e0cd      	b.n	8005460 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80c2 	beq.w	8005454 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f003 ff99 	bl	8009212 <USB_ReadDevInEPInterrupt>
 80052e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d057      	beq.n	800539c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	43db      	mvns	r3, r3
 8005306:	69f9      	ldr	r1, [r7, #28]
 8005308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800530c:	4013      	ands	r3, r2
 800530e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531c:	461a      	mov	r2, r3
 800531e:	2301      	movs	r3, #1
 8005320:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	799b      	ldrb	r3, [r3, #6]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d132      	bne.n	8005390 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532e:	4613      	mov	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3320      	adds	r3, #32
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4403      	add	r3, r0
 800534a:	331c      	adds	r3, #28
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4419      	add	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4403      	add	r3, r0
 800535e:	3320      	adds	r3, #32
 8005360:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d113      	bne.n	8005390 <HAL_PCD_IRQHandler+0x3a2>
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3324      	adds	r3, #36	@ 0x24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005388:	461a      	mov	r2, r3
 800538a:	2101      	movs	r1, #1
 800538c:	f003 ffa0 	bl	80092d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fd fa6d 	bl	8002876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b2:	461a      	mov	r2, r3
 80053b4:	2308      	movs	r3, #8
 80053b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	2310      	movs	r3, #16
 80053d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	2340      	movs	r3, #64	@ 0x40
 80053ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d023      	beq.n	8005442 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053fc:	6a38      	ldr	r0, [r7, #32]
 80053fe:	f002 ff8d 	bl	800831c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	3310      	adds	r3, #16
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d108      	bne.n	8005430 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2200      	movs	r2, #0
 8005422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fd faba 	bl	80029a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543c:	461a      	mov	r2, r3
 800543e:	2302      	movs	r3, #2
 8005440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800544c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fcbb 	bl	8005dca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	3301      	adds	r3, #1
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	f47f af2e 	bne.w	80052c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f003 fe6b 	bl	8009148 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800547c:	d122      	bne.n	80054c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005498:	2b01      	cmp	r3, #1
 800549a:	d108      	bne.n	80054ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fea2 	bl	80061f0 <HAL_PCDEx_LPM_Callback>
 80054ac:	e002      	b.n	80054b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fd fa58 	bl	8002964 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80054c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f003 fe3d 	bl	8009148 <USB_ReadInterrupts>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d8:	d112      	bne.n	8005500 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d102      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd fa14 	bl	8002918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054fe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f003 fe1f 	bl	8009148 <USB_ReadInterrupts>
 800550a:	4603      	mov	r3, r0
 800550c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005514:	f040 80b7 	bne.w	8005686 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2110      	movs	r1, #16
 8005532:	4618      	mov	r0, r3
 8005534:	f002 fef2 	bl	800831c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553c:	e046      	b.n	80055cc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554a:	461a      	mov	r2, r3
 800554c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005550:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557e:	461a      	mov	r2, r3
 8005580:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005584:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	3301      	adds	r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	791b      	ldrb	r3, [r3, #4]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d3b2      	bcc.n	800553e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055e6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7bdb      	ldrb	r3, [r3, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d016      	beq.n	8005622 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005604:	f043 030b 	orr.w	r3, r3, #11
 8005608:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800561a:	f043 030b 	orr.w	r3, r3, #11
 800561e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005620:	e015      	b.n	800564e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005630:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005634:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005638:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005648:	f043 030b 	orr.w	r3, r3, #11
 800564c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800565c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005660:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005670:	461a      	mov	r2, r3
 8005672:	f003 fe2d 	bl	80092d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f003 fd5c 	bl	8009148 <USB_ReadInterrupts>
 8005690:	4603      	mov	r3, r0
 8005692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800569a:	d123      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f003 fdf2 	bl	800928a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f002 feaf 	bl	800840e <USB_GetDevSpeed>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	f001 fa08 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 80056c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056c6:	461a      	mov	r2, r3
 80056c8:	4620      	mov	r0, r4
 80056ca:	f002 fbb3 	bl	8007e34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd f8f9 	bl	80028c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80056e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 fd2d 	bl	8009148 <USB_ReadInterrupts>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d10a      	bne.n	800570e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fd f8d6 	bl	80028aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f002 0208 	and.w	r2, r2, #8
 800570c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f003 fd18 	bl	8009148 <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b80      	cmp	r3, #128	@ 0x80
 8005720:	d123      	bne.n	800576a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800572e:	2301      	movs	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	e014      	b.n	800575e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	b2db      	uxtb	r3, r3
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fb08 	bl	8005d68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	3301      	adds	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	791b      	ldrb	r3, [r3, #4]
 8005762:	461a      	mov	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	4293      	cmp	r3, r2
 8005768:	d3e4      	bcc.n	8005734 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f003 fcea 	bl	8009148 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800577e:	d13c      	bne.n	80057fa <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005780:	2301      	movs	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
 8005784:	e02b      	b.n	80057de <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	3318      	adds	r3, #24
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d115      	bne.n	80057d8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da12      	bge.n	80057d8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3317      	adds	r3, #23
 80057c2:	2201      	movs	r2, #1
 80057c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fac8 	bl	8005d68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	3301      	adds	r3, #1
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	791b      	ldrb	r3, [r3, #4]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d3cd      	bcc.n	8005786 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f003 fca2 	bl	8009148 <USB_ReadInterrupts>
 8005804:	4603      	mov	r3, r0
 8005806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800580a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800580e:	d156      	bne.n	80058be <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005810:	2301      	movs	r3, #1
 8005812:	627b      	str	r3, [r7, #36]	@ 0x24
 8005814:	e045      	b.n	80058a2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d12e      	bne.n	800589c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800583e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005840:	2b00      	cmp	r3, #0
 8005842:	da2b      	bge.n	800589c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005850:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005854:	429a      	cmp	r2, r3
 8005856:	d121      	bne.n	800589c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005894:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005898:	6053      	str	r3, [r2, #4]
            break;
 800589a:	e008      	b.n	80058ae <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	3301      	adds	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	791b      	ldrb	r3, [r3, #4]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d3b3      	bcc.n	8005816 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f003 fc40 	bl	8009148 <USB_ReadInterrupts>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d2:	d10a      	bne.n	80058ea <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fd f877 	bl	80029c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f003 fc2a 	bl	8009148 <USB_ReadInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d115      	bne.n	800592a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fd f867 	bl	80029e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	e000      	b.n	800592a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005928:	bf00      	nop
    }
  }
}
 800592a:	3734      	adds	r7, #52	@ 0x34
 800592c:	46bd      	mov	sp, r7
 800592e:	bd90      	pop	{r4, r7, pc}

08005930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_PCD_SetAddress+0x1a>
 8005946:	2302      	movs	r3, #2
 8005948:	e012      	b.n	8005970 <HAL_PCD_SetAddress+0x40>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f003 fb89 	bl	8009078 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	4608      	mov	r0, r1
 8005982:	4611      	mov	r1, r2
 8005984:	461a      	mov	r2, r3
 8005986:	4603      	mov	r3, r0
 8005988:	70fb      	strb	r3, [r7, #3]
 800598a:	460b      	mov	r3, r1
 800598c:	803b      	strh	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da0f      	bge.n	80059be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3310      	adds	r3, #16
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	3304      	adds	r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	705a      	strb	r2, [r3, #1]
 80059bc:	e00f      	b.n	80059de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 020f 	and.w	r2, r3, #15
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	3304      	adds	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059ea:	883a      	ldrh	r2, [r7, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	78ba      	ldrb	r2, [r7, #2]
 80059f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a08:	78bb      	ldrb	r3, [r7, #2]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d102      	bne.n	8005a14 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_PCD_EP_Open+0xaa>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e00e      	b.n	8005a40 <HAL_PCD_EP_Open+0xc8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 fd11 	bl	8008458 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	da0f      	bge.n	8005a7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 020f 	and.w	r2, r3, #15
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4413      	add	r3, r2
 8005a70:	3304      	adds	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	705a      	strb	r2, [r3, #1]
 8005a7a:	e00f      	b.n	8005a9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_PCD_EP_Close+0x6e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e00e      	b.n	8005ad4 <HAL_PCD_EP_Close+0x8c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 fd4f 	bl	8008568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	f003 020f 	and.w	r2, r3, #15
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	3304      	adds	r3, #4
 8005b04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	799b      	ldrb	r3, [r3, #6]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	799b      	ldrb	r3, [r3, #6]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6979      	ldr	r1, [r7, #20]
 8005b44:	f002 fdec 	bl	8008720 <USB_EPStartXfer>

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b74:	681b      	ldr	r3, [r3, #0]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f003 020f 	and.w	r2, r3, #15
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	799b      	ldrb	r3, [r3, #6]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	799b      	ldrb	r3, [r3, #6]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6979      	ldr	r1, [r7, #20]
 8005be8:	f002 fd9a 	bl	8008720 <USB_EPStartXfer>

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	7912      	ldrb	r2, [r2, #4]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d901      	bls.n	8005c14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e04f      	b.n	8005cb4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	da0f      	bge.n	8005c3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	f003 020f 	and.w	r2, r3, #15
 8005c22:	4613      	mov	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	3310      	adds	r3, #16
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	705a      	strb	r2, [r3, #1]
 8005c3a:	e00d      	b.n	8005c58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3304      	adds	r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_PCD_EP_SetStall+0x82>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e01d      	b.n	8005cb4 <HAL_PCD_EP_SetStall+0xbe>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68f9      	ldr	r1, [r7, #12]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f003 f922 	bl	8008ed0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	7999      	ldrb	r1, [r3, #6]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f003 fb13 	bl	80092d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	7912      	ldrb	r2, [r2, #4]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e042      	b.n	8005d60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da0f      	bge.n	8005d02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	4613      	mov	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	3310      	adds	r3, #16
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	705a      	strb	r2, [r3, #1]
 8005d00:	e00f      	b.n	8005d22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_PCD_EP_ClrStall+0x86>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e00e      	b.n	8005d60 <HAL_PCD_EP_ClrStall+0xa4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f003 f92b 	bl	8008fac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da0c      	bge.n	8005d96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e00c      	b.n	8005db0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3304      	adds	r3, #4
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68f9      	ldr	r1, [r7, #12]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f002 ff4a 	bl	8008c50 <USB_EPStopXfer>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b08a      	sub	sp, #40	@ 0x28
 8005dce:	af02      	add	r7, sp, #8
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	3310      	adds	r3, #16
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	3304      	adds	r3, #4
 8005df0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d901      	bls.n	8005e02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e06b      	b.n	8005eda <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d902      	bls.n	8005e1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3303      	adds	r3, #3
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e26:	e02a      	b.n	8005e7e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d902      	bls.n	8005e44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3303      	adds	r3, #3
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	68d9      	ldr	r1, [r3, #12]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f002 ff9f 	bl	8008da4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	441a      	add	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d809      	bhi.n	8005ea8 <PCD_WriteEmptyTxFifo+0xde>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d203      	bcs.n	8005ea8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1bf      	bne.n	8005e28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d811      	bhi.n	8005ed8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	2201      	movs	r2, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	6939      	ldr	r1, [r7, #16]
 8005ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	333c      	adds	r3, #60	@ 0x3c
 8005efc:	3304      	adds	r3, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	799b      	ldrb	r3, [r3, #6]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d17b      	bne.n	8006012 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	4a61      	ldr	r2, [pc, #388]	@ (80060ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f240 80b9 	bls.w	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80b3 	beq.w	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f46:	461a      	mov	r2, r3
 8005f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4c:	6093      	str	r3, [r2, #8]
 8005f4e:	e0a7      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	2320      	movs	r3, #32
 8005f6a:	6093      	str	r3, [r2, #8]
 8005f6c:	e098      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8093 	bne.w	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80060ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d90f      	bls.n	8005fa2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9e:	6093      	str	r3, [r2, #8]
 8005fa0:	e07e      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	0159      	lsls	r1, r3, #5
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d114      	bne.n	8006004 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fec:	461a      	mov	r2, r3
 8005fee:	2101      	movs	r1, #1
 8005ff0:	f003 f96e 	bl	80092d0 <USB_EP0_OutStart>
 8005ff4:	e006      	b.n	8006004 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fc18 	bl	8002840 <HAL_PCD_DataOutStageCallback>
 8006010:	e046      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4a26      	ldr	r2, [pc, #152]	@ (80060b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d124      	bne.n	8006064 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006030:	461a      	mov	r2, r3
 8006032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006036:	6093      	str	r3, [r2, #8]
 8006038:	e032      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006050:	461a      	mov	r2, r3
 8006052:	2320      	movs	r3, #32
 8006054:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fc fbef 	bl	8002840 <HAL_PCD_DataOutStageCallback>
 8006062:	e01d      	b.n	80060a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <PCD_EP_OutXfrComplete_int+0x1b0>
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800608c:	461a      	mov	r2, r3
 800608e:	2100      	movs	r1, #0
 8006090:	f003 f91e 	bl	80092d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fc fbd0 	bl	8002840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	4f54300a 	.word	0x4f54300a
 80060b0:	4f54310a 	.word	0x4f54310a

080060b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	333c      	adds	r3, #60	@ 0x3c
 80060cc:	3304      	adds	r3, #4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a15      	ldr	r2, [pc, #84]	@ (800613c <PCD_EP_OutSetupPacket_int+0x88>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d90e      	bls.n	8006108 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006106:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7fc fb87 	bl	800281c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <PCD_EP_OutSetupPacket_int+0x88>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d90c      	bls.n	8006130 <PCD_EP_OutSetupPacket_int+0x7c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	799b      	ldrb	r3, [r3, #6]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d108      	bne.n	8006130 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006128:	461a      	mov	r2, r3
 800612a:	2101      	movs	r1, #1
 800612c:	f003 f8d0 	bl	80092d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	4f54300a 	.word	0x4f54300a

08006140 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
 800614c:	4613      	mov	r3, r2
 800614e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d107      	bne.n	800616e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800615e:	883b      	ldrh	r3, [r7, #0]
 8006160:	0419      	lsls	r1, r3, #16
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	430a      	orrs	r2, r1
 800616a:	629a      	str	r2, [r3, #40]	@ 0x28
 800616c:	e028      	b.n	80061c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	e00d      	b.n	800619e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	3340      	adds	r3, #64	@ 0x40
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	3301      	adds	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	7bfa      	ldrb	r2, [r7, #15]
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3ec      	bcc.n	8006182 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a8:	883b      	ldrh	r3, [r7, #0]
 80061aa:	0418      	lsls	r0, r3, #16
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	4302      	orrs	r2, r0
 80061b8:	3340      	adds	r3, #64	@ 0x40
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e267      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d075      	beq.n	8006312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006226:	4b88      	ldr	r3, [pc, #544]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b04      	cmp	r3, #4
 8006230:	d00c      	beq.n	800624c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006232:	4b85      	ldr	r3, [pc, #532]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800623a:	2b08      	cmp	r3, #8
 800623c:	d112      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4b82      	ldr	r3, [pc, #520]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800624a:	d10b      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	4b7e      	ldr	r3, [pc, #504]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d05b      	beq.n	8006310 <HAL_RCC_OscConfig+0x108>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d157      	bne.n	8006310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e242      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x74>
 800626e:	4b76      	ldr	r3, [pc, #472]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a75      	ldr	r2, [pc, #468]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e01d      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x98>
 8006286:	4b70      	ldr	r3, [pc, #448]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6f      	ldr	r2, [pc, #444]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b6d      	ldr	r3, [pc, #436]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6c      	ldr	r2, [pc, #432]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 80062a0:	4b69      	ldr	r3, [pc, #420]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a68      	ldr	r2, [pc, #416]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b66      	ldr	r3, [pc, #408]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a65      	ldr	r2, [pc, #404]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fc fde4 	bl	8002e8c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fc fde0 	bl	8002e8c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e207      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	4b5b      	ldr	r3, [pc, #364]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0xc0>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e8:	f7fc fdd0 	bl	8002e8c <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fc fdcc 	bl	8002e8c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	@ 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e1f3      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	4b51      	ldr	r3, [pc, #324]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0xe8>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d063      	beq.n	80063e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800631e:	4b4a      	ldr	r3, [pc, #296]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632a:	4b47      	ldr	r3, [pc, #284]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006332:	2b08      	cmp	r3, #8
 8006334:	d11c      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006336:	4b44      	ldr	r3, [pc, #272]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d116      	bne.n	8006370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006342:	4b41      	ldr	r3, [pc, #260]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d001      	beq.n	800635a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e1c7      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635a:	4b3b      	ldr	r3, [pc, #236]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4937      	ldr	r1, [pc, #220]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636e:	e03a      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006378:	4b34      	ldr	r3, [pc, #208]	@ (800644c <HAL_RCC_OscConfig+0x244>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fc fd85 	bl	8002e8c <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fc fd81 	bl	8002e8c <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e1a8      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	4b2b      	ldr	r3, [pc, #172]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f0      	beq.n	8006386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b28      	ldr	r3, [pc, #160]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4925      	ldr	r1, [pc, #148]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ba:	4b24      	ldr	r3, [pc, #144]	@ (800644c <HAL_RCC_OscConfig+0x244>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fc fd64 	bl	8002e8c <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c8:	f7fc fd60 	bl	8002e8c <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e187      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1f0      	bne.n	80063c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d036      	beq.n	8006460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d016      	beq.n	8006428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fa:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <HAL_RCC_OscConfig+0x248>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006400:	f7fc fd44 	bl	8002e8c <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006408:	f7fc fd40 	bl	8002e8c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e167      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	4b0b      	ldr	r3, [pc, #44]	@ (8006448 <HAL_RCC_OscConfig+0x240>)
 800641c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0x200>
 8006426:	e01b      	b.n	8006460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006428:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <HAL_RCC_OscConfig+0x248>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fc fd2d 	bl	8002e8c <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006434:	e00e      	b.n	8006454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006436:	f7fc fd29 	bl	8002e8c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d907      	bls.n	8006454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e150      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
 8006448:	40023800 	.word	0x40023800
 800644c:	42470000 	.word	0x42470000
 8006450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	4b88      	ldr	r3, [pc, #544]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ea      	bne.n	8006436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8097 	beq.w	800659c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006472:	4b81      	ldr	r3, [pc, #516]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b7d      	ldr	r3, [pc, #500]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	4a7c      	ldr	r2, [pc, #496]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	@ 0x40
 800648e:	4b7a      	ldr	r3, [pc, #488]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649e:	4b77      	ldr	r3, [pc, #476]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d118      	bne.n	80064dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064aa:	4b74      	ldr	r3, [pc, #464]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a73      	ldr	r2, [pc, #460]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b6:	f7fc fce9 	bl	8002e8c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064be:	f7fc fce5 	bl	8002e8c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e10c      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	4b6a      	ldr	r3, [pc, #424]	@ (800667c <HAL_RCC_OscConfig+0x474>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <HAL_RCC_OscConfig+0x2ea>
 80064e4:	4b64      	ldr	r3, [pc, #400]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e8:	4a63      	ldr	r2, [pc, #396]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f0:	e01c      	b.n	800652c <HAL_RCC_OscConfig+0x324>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b05      	cmp	r3, #5
 80064f8:	d10c      	bne.n	8006514 <HAL_RCC_OscConfig+0x30c>
 80064fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006500:	f043 0304 	orr.w	r3, r3, #4
 8006504:	6713      	str	r3, [r2, #112]	@ 0x70
 8006506:	4b5c      	ldr	r3, [pc, #368]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	4a5b      	ldr	r2, [pc, #364]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	6713      	str	r3, [r2, #112]	@ 0x70
 8006512:	e00b      	b.n	800652c <HAL_RCC_OscConfig+0x324>
 8006514:	4b58      	ldr	r3, [pc, #352]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006518:	4a57      	ldr	r2, [pc, #348]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800651a:	f023 0301 	bic.w	r3, r3, #1
 800651e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006520:	4b55      	ldr	r3, [pc, #340]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006524:	4a54      	ldr	r2, [pc, #336]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006526:	f023 0304 	bic.w	r3, r3, #4
 800652a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006534:	f7fc fcaa 	bl	8002e8c <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653a:	e00a      	b.n	8006552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800653c:	f7fc fca6 	bl	8002e8c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e0cb      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006552:	4b49      	ldr	r3, [pc, #292]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ee      	beq.n	800653c <HAL_RCC_OscConfig+0x334>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006560:	f7fc fc94 	bl	8002e8c <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fc fc90 	bl	8002e8c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e0b5      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657e:	4b3e      	ldr	r3, [pc, #248]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1ee      	bne.n	8006568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d105      	bne.n	800659c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006590:	4b39      	ldr	r3, [pc, #228]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	4a38      	ldr	r2, [pc, #224]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800659a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80a1 	beq.w	80066e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065a6:	4b34      	ldr	r3, [pc, #208]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d05c      	beq.n	800666c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d141      	bne.n	800663e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	4b31      	ldr	r3, [pc, #196]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fc fc64 	bl	8002e8c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fc fc60 	bl	8002e8c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e087      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69da      	ldr	r2, [r3, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	019b      	lsls	r3, r3, #6
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	3b01      	subs	r3, #1
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	491b      	ldr	r1, [pc, #108]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 800660c:	4313      	orrs	r3, r2
 800660e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006610:	4b1b      	ldr	r3, [pc, #108]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 8006612:	2201      	movs	r2, #1
 8006614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006616:	f7fc fc39 	bl	8002e8c <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800661e:	f7fc fc35 	bl	8002e8c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e05c      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	4b11      	ldr	r3, [pc, #68]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x416>
 800663c:	e054      	b.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <HAL_RCC_OscConfig+0x478>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fc fc22 	bl	8002e8c <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fc fc1e 	bl	8002e8c <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e045      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RCC_OscConfig+0x470>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x444>
 800666a:	e03d      	b.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d107      	bne.n	8006684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e038      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
 8006678:	40023800 	.word	0x40023800
 800667c:	40007000 	.word	0x40007000
 8006680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <HAL_RCC_OscConfig+0x4ec>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d028      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669c:	429a      	cmp	r2, r3
 800669e:	d121      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066bc:	4293      	cmp	r3, r2
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	3b01      	subs	r3, #1
 80066ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800

080066f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0cc      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800670c:	4b68      	ldr	r3, [pc, #416]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d90c      	bls.n	8006734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b65      	ldr	r3, [pc, #404]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006722:	4b63      	ldr	r3, [pc, #396]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0b8      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800674c:	4b59      	ldr	r3, [pc, #356]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a58      	ldr	r2, [pc, #352]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006752:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006764:	4b53      	ldr	r3, [pc, #332]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4a52      	ldr	r2, [pc, #328]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800676e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006770:	4b50      	ldr	r3, [pc, #320]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	494d      	ldr	r1, [pc, #308]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d044      	beq.n	8006818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b47      	ldr	r3, [pc, #284]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d119      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d003      	beq.n	80067b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d107      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b6:	4b3f      	ldr	r3, [pc, #252]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e06f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c6:	4b3b      	ldr	r3, [pc, #236]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e067      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d6:	4b37      	ldr	r3, [pc, #220]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4934      	ldr	r1, [pc, #208]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e8:	f7fc fb50 	bl	8002e8c <HAL_GetTick>
 80067ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067f0:	f7fc fb4c 	bl	8002e8c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e04f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006806:	4b2b      	ldr	r3, [pc, #172]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 020c 	and.w	r2, r3, #12
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d1eb      	bne.n	80067f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006818:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	429a      	cmp	r2, r3
 8006824:	d20c      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006826:	4b22      	ldr	r3, [pc, #136]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b20      	ldr	r3, [pc, #128]	@ (80068b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e032      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684c:	4b19      	ldr	r3, [pc, #100]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4916      	ldr	r1, [pc, #88]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	4313      	orrs	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800686a:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	490e      	ldr	r1, [pc, #56]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800687e:	f000 f821 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006882:	4602      	mov	r2, r0
 8006884:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	490a      	ldr	r1, [pc, #40]	@ (80068b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006890:	5ccb      	ldrb	r3, [r1, r3]
 8006892:	fa22 f303 	lsr.w	r3, r2, r3
 8006896:	4a09      	ldr	r2, [pc, #36]	@ (80068bc <HAL_RCC_ClockConfig+0x1c4>)
 8006898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800689a:	4b09      	ldr	r3, [pc, #36]	@ (80068c0 <HAL_RCC_ClockConfig+0x1c8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fc fab0 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
 80068b8:	0800eaa0 	.word	0x0800eaa0
 80068bc:	20000068 	.word	0x20000068
 80068c0:	2000006c 	.word	0x2000006c

080068c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c8:	b094      	sub	sp, #80	@ 0x50
 80068ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d0:	2300      	movs	r3, #0
 80068d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d4:	2300      	movs	r3, #0
 80068d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068dc:	4b79      	ldr	r3, [pc, #484]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d00d      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x40>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	f200 80e1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x34>
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d003      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x3a>
 80068f6:	e0db      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f8:	4b73      	ldr	r3, [pc, #460]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80068fc:	e0db      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068fe:	4b73      	ldr	r3, [pc, #460]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x208>)
 8006900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006902:	e0d8      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006904:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800690c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800690e:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d063      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800691a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	099b      	lsrs	r3, r3, #6
 8006920:	2200      	movs	r2, #0
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30
 800692e:	2300      	movs	r3, #0
 8006930:	637b      	str	r3, [r7, #52]	@ 0x34
 8006932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	f04f 0000 	mov.w	r0, #0
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	0159      	lsls	r1, r3, #5
 8006944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006948:	0150      	lsls	r0, r2, #5
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4621      	mov	r1, r4
 8006950:	1a51      	subs	r1, r2, r1
 8006952:	6139      	str	r1, [r7, #16]
 8006954:	4629      	mov	r1, r5
 8006956:	eb63 0301 	sbc.w	r3, r3, r1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006968:	4659      	mov	r1, fp
 800696a:	018b      	lsls	r3, r1, #6
 800696c:	4651      	mov	r1, sl
 800696e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006972:	4651      	mov	r1, sl
 8006974:	018a      	lsls	r2, r1, #6
 8006976:	4651      	mov	r1, sl
 8006978:	ebb2 0801 	subs.w	r8, r2, r1
 800697c:	4659      	mov	r1, fp
 800697e:	eb63 0901 	sbc.w	r9, r3, r1
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800698e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006996:	4690      	mov	r8, r2
 8006998:	4699      	mov	r9, r3
 800699a:	4623      	mov	r3, r4
 800699c:	eb18 0303 	adds.w	r3, r8, r3
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	462b      	mov	r3, r5
 80069a4:	eb49 0303 	adc.w	r3, r9, r3
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069b6:	4629      	mov	r1, r5
 80069b8:	024b      	lsls	r3, r1, #9
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069c0:	4621      	mov	r1, r4
 80069c2:	024a      	lsls	r2, r1, #9
 80069c4:	4610      	mov	r0, r2
 80069c6:	4619      	mov	r1, r3
 80069c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ca:	2200      	movs	r2, #0
 80069cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069d4:	f7fa f928 	bl	8000c28 <__aeabi_uldivmod>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4613      	mov	r3, r2
 80069de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e0:	e058      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e2:	4b38      	ldr	r3, [pc, #224]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	2200      	movs	r2, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	4611      	mov	r1, r2
 80069ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2300      	movs	r3, #0
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	f04f 0000 	mov.w	r0, #0
 8006a04:	f04f 0100 	mov.w	r1, #0
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0e:	0150      	lsls	r0, r2, #5
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4641      	mov	r1, r8
 8006a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a34:	ebb2 040a 	subs.w	r4, r2, sl
 8006a38:	eb63 050b 	sbc.w	r5, r3, fp
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	00eb      	lsls	r3, r5, #3
 8006a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a4a:	00e2      	lsls	r2, r4, #3
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	18e3      	adds	r3, r4, r3
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb45 0303 	adc.w	r3, r5, r3
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	028b      	lsls	r3, r1, #10
 8006a6e:	4621      	mov	r1, r4
 8006a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a74:	4621      	mov	r1, r4
 8006a76:	028a      	lsls	r2, r1, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a7e:	2200      	movs	r2, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a88:	f7fa f8ce 	bl	8000c28 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4613      	mov	r3, r2
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3750      	adds	r7, #80	@ 0x50
 8006abc:	46bd      	mov	sp, r7
 8006abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	00f42400 	.word	0x00f42400
 8006acc:	007a1200 	.word	0x007a1200

08006ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad4:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000068 	.word	0x20000068

08006ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e041      	b.n	8006b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb fb56 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 faf0 	bl	800710c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e046      	b.n	8006c2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a23      	ldr	r2, [pc, #140]	@ (8006c3c <HAL_TIM_Base_Start+0xb4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d022      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bba:	d01d      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006c40 <HAL_TIM_Base_Start+0xb8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d018      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1e      	ldr	r2, [pc, #120]	@ (8006c44 <HAL_TIM_Base_Start+0xbc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d013      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c48 <HAL_TIM_Base_Start+0xc0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00e      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1b      	ldr	r2, [pc, #108]	@ (8006c4c <HAL_TIM_Base_Start+0xc4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d009      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a19      	ldr	r2, [pc, #100]	@ (8006c50 <HAL_TIM_Base_Start+0xc8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x70>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a18      	ldr	r2, [pc, #96]	@ (8006c54 <HAL_TIM_Base_Start+0xcc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d111      	bne.n	8006c1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b06      	cmp	r3, #6
 8006c08:	d010      	beq.n	8006c2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0201 	orr.w	r2, r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1a:	e007      	b.n	8006c2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40010400 	.word	0x40010400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40001800 	.word	0x40001800

08006c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d001      	beq.n	8006c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e04e      	b.n	8006d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	@ (8006d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d022      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9a:	d01d      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d018      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	@ (8006d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00e      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	@ (8006d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIM_Base_Start_IT+0x80>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a18      	ldr	r2, [pc, #96]	@ (8006d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d010      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0201 	orr.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfa:	e007      	b.n	8006d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40001800 	.word	0x40001800

08006d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d020      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01b      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0202 	mvn.w	r2, #2
 8006d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9a3 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f995 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f9a6 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d020      	beq.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0204 	mvn.w	r2, #4
 8006db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f97d 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006dd4:	e005      	b.n	8006de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f96f 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f980 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d020      	beq.n	8006e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0208 	mvn.w	r2, #8
 8006e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f957 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006e20:	e005      	b.n	8006e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f949 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f95a 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d020      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0210 	mvn.w	r2, #16
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2208      	movs	r2, #8
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f931 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f923 	bl	80070ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f934 	bl	80070e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0201 	mvn.w	r2, #1
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f901 	bl	80070a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d007      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 faee 	bl	80074a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00c      	beq.n	8006eec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f905 	bl	80070f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0220 	mvn.w	r2, #32
 8006f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fac0 	bl	8007490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_TIM_ConfigClockSource+0x1c>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e0b4      	b.n	800709e <HAL_TIM_ConfigClockSource+0x186>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f6c:	d03e      	beq.n	8006fec <HAL_TIM_ConfigClockSource+0xd4>
 8006f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f72:	f200 8087 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7a:	f000 8086 	beq.w	800708a <HAL_TIM_ConfigClockSource+0x172>
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f82:	d87f      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006f84:	2b70      	cmp	r3, #112	@ 0x70
 8006f86:	d01a      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0xa6>
 8006f88:	2b70      	cmp	r3, #112	@ 0x70
 8006f8a:	d87b      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006f8c:	2b60      	cmp	r3, #96	@ 0x60
 8006f8e:	d050      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x11a>
 8006f90:	2b60      	cmp	r3, #96	@ 0x60
 8006f92:	d877      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006f94:	2b50      	cmp	r3, #80	@ 0x50
 8006f96:	d03c      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0xfa>
 8006f98:	2b50      	cmp	r3, #80	@ 0x50
 8006f9a:	d873      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006f9c:	2b40      	cmp	r3, #64	@ 0x40
 8006f9e:	d058      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x13a>
 8006fa0:	2b40      	cmp	r3, #64	@ 0x40
 8006fa2:	d86f      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa4:	2b30      	cmp	r3, #48	@ 0x30
 8006fa6:	d064      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x15a>
 8006fa8:	2b30      	cmp	r3, #48	@ 0x30
 8006faa:	d86b      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d060      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x15a>
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d867      	bhi.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d05c      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x15a>
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d05a      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x15a>
 8006fbc:	e062      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fce:	f000 f9c3 	bl	8007358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	609a      	str	r2, [r3, #8]
      break;
 8006fea:	e04f      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ffc:	f000 f9ac 	bl	8007358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800700e:	609a      	str	r2, [r3, #8]
      break;
 8007010:	e03c      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	461a      	mov	r2, r3
 8007020:	f000 f920 	bl	8007264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2150      	movs	r1, #80	@ 0x50
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f979 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 8007030:	e02c      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800703e:	461a      	mov	r2, r3
 8007040:	f000 f93f 	bl	80072c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2160      	movs	r1, #96	@ 0x60
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f969 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 8007050:	e01c      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800705e:	461a      	mov	r2, r3
 8007060:	f000 f900 	bl	8007264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2140      	movs	r1, #64	@ 0x40
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f959 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 8007070:	e00c      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f000 f950 	bl	8007322 <TIM_ITRx_SetConfig>
      break;
 8007082:	e003      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
      break;
 8007088:	e000      	b.n	800708c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800708a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a46      	ldr	r2, [pc, #280]	@ (8007238 <TIM_Base_SetConfig+0x12c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a43      	ldr	r2, [pc, #268]	@ (800723c <TIM_Base_SetConfig+0x130>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a42      	ldr	r2, [pc, #264]	@ (8007240 <TIM_Base_SetConfig+0x134>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a41      	ldr	r2, [pc, #260]	@ (8007244 <TIM_Base_SetConfig+0x138>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a40      	ldr	r2, [pc, #256]	@ (8007248 <TIM_Base_SetConfig+0x13c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d108      	bne.n	800715e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a35      	ldr	r2, [pc, #212]	@ (8007238 <TIM_Base_SetConfig+0x12c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716c:	d027      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a32      	ldr	r2, [pc, #200]	@ (800723c <TIM_Base_SetConfig+0x130>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d023      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a31      	ldr	r2, [pc, #196]	@ (8007240 <TIM_Base_SetConfig+0x134>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01f      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a30      	ldr	r2, [pc, #192]	@ (8007244 <TIM_Base_SetConfig+0x138>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d01b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2f      	ldr	r2, [pc, #188]	@ (8007248 <TIM_Base_SetConfig+0x13c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d017      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2e      	ldr	r2, [pc, #184]	@ (800724c <TIM_Base_SetConfig+0x140>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2d      	ldr	r2, [pc, #180]	@ (8007250 <TIM_Base_SetConfig+0x144>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00f      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007254 <TIM_Base_SetConfig+0x148>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007258 <TIM_Base_SetConfig+0x14c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d007      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	@ (800725c <TIM_Base_SetConfig+0x150>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a29      	ldr	r2, [pc, #164]	@ (8007260 <TIM_Base_SetConfig+0x154>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a10      	ldr	r2, [pc, #64]	@ (8007238 <TIM_Base_SetConfig+0x12c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_Base_SetConfig+0xf8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a12      	ldr	r2, [pc, #72]	@ (8007248 <TIM_Base_SetConfig+0x13c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d103      	bne.n	800720c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]
  }
}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40010000 	.word	0x40010000
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40000c00 	.word	0x40000c00
 8007248:	40010400 	.word	0x40010400
 800724c:	40014000 	.word	0x40014000
 8007250:	40014400 	.word	0x40014400
 8007254:	40014800 	.word	0x40014800
 8007258:	40001800 	.word	0x40001800
 800725c:	40001c00 	.word	0x40001c00
 8007260:	40002000 	.word	0x40002000

08007264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800728e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	011b      	lsls	r3, r3, #4
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 030a 	bic.w	r3, r3, #10
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b087      	sub	sp, #28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f023 0210 	bic.w	r2, r3, #16
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	f043 0307 	orr.w	r3, r3, #7
 8007344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	021a      	lsls	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	431a      	orrs	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4313      	orrs	r3, r2
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	609a      	str	r2, [r3, #8]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e05a      	b.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a21      	ldr	r2, [pc, #132]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d01d      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1d      	ldr	r2, [pc, #116]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1a      	ldr	r2, [pc, #104]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a18      	ldr	r2, [pc, #96]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a15      	ldr	r2, [pc, #84]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d10c      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	4313      	orrs	r3, r2
 800744a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40010400 	.word	0x40010400
 8007488:	40014000 	.word	0x40014000
 800748c:	40001800 	.word	0x40001800

08007490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0ba      	sub	sp, #232	@ 0xe8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80074de:	2300      	movs	r3, #0
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80074f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <HAL_UART_IRQHandler+0x66>
 800750a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fb69 	bl	8007bee <UART_Receive_IT>
      return;
 800751c:	e25b      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800751e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80de 	beq.w	80076e4 <HAL_UART_IRQHandler+0x22c>
 8007528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80d1 	beq.w	80076e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_UART_IRQHandler+0xae>
 800754e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755e:	f043 0201 	orr.w	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <HAL_UART_IRQHandler+0xd2>
 8007572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	f043 0202 	orr.w	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_UART_IRQHandler+0xf6>
 8007596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d011      	beq.n	80075de <HAL_UART_IRQHandler+0x126>
 80075ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	f043 0208 	orr.w	r2, r3, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 81f2 	beq.w	80079cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_UART_IRQHandler+0x14e>
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 faf4 	bl	8007bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	bf0c      	ite	eq
 8007614:	2301      	moveq	r3, #1
 8007616:	2300      	movne	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <HAL_UART_IRQHandler+0x17a>
 800762a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d04f      	beq.n	80076d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9fc 	bl	8007a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007642:	2b40      	cmp	r3, #64	@ 0x40
 8007644:	d141      	bne.n	80076ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800765c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3314      	adds	r3, #20
 800766e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800767e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800768a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1d9      	bne.n	8007646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d013      	beq.n	80076c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	4a7e      	ldr	r2, [pc, #504]	@ (8007898 <HAL_UART_IRQHandler+0x3e0>)
 80076a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fc ffbd 	bl	8004626 <HAL_DMA_Abort_IT>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c0:	e00e      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f99e 	bl	8007a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	e00a      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f99a 	bl	8007a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	e006      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f996 	bl	8007a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80076de:	e175      	b.n	80079cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	bf00      	nop
    return;
 80076e2:	e173      	b.n	80079cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 814f 	bne.w	800798c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8148 	beq.w	800798c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8141 	beq.w	800798c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	f040 80b6 	bne.w	800789c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800773c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8145 	beq.w	80079d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800774a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800774e:	429a      	cmp	r2, r3
 8007750:	f080 813e 	bcs.w	80079d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800775a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007766:	f000 8088 	beq.w	800787a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	330c      	adds	r3, #12
 8007792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800779a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d9      	bne.n	800776a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e1      	bne.n	80077b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800781c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800784a:	f023 0310 	bic.w	r3, r3, #16
 800784e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800785c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800785e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800786a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e3      	bne.n	8007838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007874:	4618      	mov	r0, r3
 8007876:	f7fc fe66 	bl	8004546 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007888:	b29b      	uxth	r3, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	b29b      	uxth	r3, r3
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8c1 	bl	8007a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007896:	e09b      	b.n	80079d0 <HAL_UART_IRQHandler+0x518>
 8007898:	08007af7 	.word	0x08007af7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 808e 	beq.w	80079d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8089 	beq.w	80079d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80078e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80078e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e3      	bne.n	80078c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	623b      	str	r3, [r7, #32]
   return(result);
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800791e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e3      	bne.n	80078fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e3      	bne.n	8007940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800797e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f847 	bl	8007a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800798a:	e023      	b.n	80079d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_IRQHandler+0x4f4>
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8ba 	bl	8007b1e <UART_Transmit_IT>
    return;
 80079aa:	e014      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <HAL_UART_IRQHandler+0x51e>
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f8fa 	bl	8007bbe <UART_EndTransmit_IT>
    return;
 80079ca:	e004      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80079cc:	bf00      	nop
 80079ce:	e002      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079d0:	bf00      	nop
 80079d2:	e000      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079d4:	bf00      	nop
  }
}
 80079d6:	37e8      	adds	r7, #232	@ 0xe8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b095      	sub	sp, #84	@ 0x54
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a58:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e5      	bne.n	8007a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3314      	adds	r3, #20
 8007a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f023 0301 	bic.w	r3, r3, #1
 8007a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3314      	adds	r3, #20
 8007a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e5      	bne.n	8007a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d119      	bne.n	8007adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac8:	61ba      	str	r2, [r7, #24]
 8007aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6979      	ldr	r1, [r7, #20]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e5      	bne.n	8007aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aea:	bf00      	nop
 8007aec:	3754      	adds	r7, #84	@ 0x54
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff ff77 	bl	8007a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b21      	cmp	r3, #33	@ 0x21
 8007b30:	d13e      	bne.n	8007bb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3a:	d114      	bne.n	8007b66 <UART_Transmit_IT+0x48>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d110      	bne.n	8007b66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	1c9a      	adds	r2, r3, #2
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]
 8007b64:	e008      	b.n	8007b78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	1c59      	adds	r1, r3, #1
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6211      	str	r1, [r2, #32]
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	4619      	mov	r1, r3
 8007b86:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10f      	bne.n	8007bac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007baa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bb0:	2302      	movs	r3, #2
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fefc 	bl	80079dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b08c      	sub	sp, #48	@ 0x30
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b22      	cmp	r3, #34	@ 0x22
 8007c00:	f040 80ae 	bne.w	8007d60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0c:	d117      	bne.n	8007c3e <UART_Receive_IT+0x50>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d113      	bne.n	8007c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	1c9a      	adds	r2, r3, #2
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c3c:	e026      	b.n	8007c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c50:	d007      	beq.n	8007c62 <UART_Receive_IT+0x74>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <UART_Receive_IT+0x82>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e008      	b.n	8007c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d15d      	bne.n	8007d5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0220 	bic.w	r2, r2, #32
 8007cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d135      	bne.n	8007d52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0c:	623a      	str	r2, [r7, #32]
 8007d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	69f9      	ldr	r1, [r7, #28]
 8007d12:	6a3a      	ldr	r2, [r7, #32]
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0310 	and.w	r3, r3, #16
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d10a      	bne.n	8007d44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fe64 	bl	8007a18 <HAL_UARTEx_RxEventCallback>
 8007d50:	e002      	b.n	8007d58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff fe4c 	bl	80079f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e002      	b.n	8007d62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e000      	b.n	8007d62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d60:	2302      	movs	r3, #2
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3730      	adds	r7, #48	@ 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	f107 001c 	add.w	r0, r7, #28
 8007d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d7c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d123      	bne.n	8007dcc <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d105      	bne.n	8007dc0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fae3 	bl	800938c <USB_CoreReset>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	e01b      	b.n	8007e04 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fad7 	bl	800938c <USB_CoreReset>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007de2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007df6:	e005      	b.n	8007e04 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e04:	7fbb      	ldrb	r3, [r7, #30]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d10b      	bne.n	8007e22 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f043 0206 	orr.w	r2, r3, #6
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e2e:	b004      	add	sp, #16
 8007e30:	4770      	bx	lr
	...

08007e34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d165      	bne.n	8007f14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4a41      	ldr	r2, [pc, #260]	@ (8007f50 <USB_SetTurnaroundTime+0x11c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d906      	bls.n	8007e5e <USB_SetTurnaroundTime+0x2a>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4a40      	ldr	r2, [pc, #256]	@ (8007f54 <USB_SetTurnaroundTime+0x120>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d202      	bcs.n	8007e5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e58:	230f      	movs	r3, #15
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e062      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	4a3c      	ldr	r2, [pc, #240]	@ (8007f54 <USB_SetTurnaroundTime+0x120>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d306      	bcc.n	8007e74 <USB_SetTurnaroundTime+0x40>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4a3b      	ldr	r2, [pc, #236]	@ (8007f58 <USB_SetTurnaroundTime+0x124>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d202      	bcs.n	8007e74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e6e:	230e      	movs	r3, #14
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	e057      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4a38      	ldr	r2, [pc, #224]	@ (8007f58 <USB_SetTurnaroundTime+0x124>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d306      	bcc.n	8007e8a <USB_SetTurnaroundTime+0x56>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4a37      	ldr	r2, [pc, #220]	@ (8007f5c <USB_SetTurnaroundTime+0x128>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d202      	bcs.n	8007e8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e84:	230d      	movs	r3, #13
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	e04c      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4a33      	ldr	r2, [pc, #204]	@ (8007f5c <USB_SetTurnaroundTime+0x128>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d306      	bcc.n	8007ea0 <USB_SetTurnaroundTime+0x6c>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4a32      	ldr	r2, [pc, #200]	@ (8007f60 <USB_SetTurnaroundTime+0x12c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d802      	bhi.n	8007ea0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	e041      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8007f60 <USB_SetTurnaroundTime+0x12c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d906      	bls.n	8007eb6 <USB_SetTurnaroundTime+0x82>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8007f64 <USB_SetTurnaroundTime+0x130>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d802      	bhi.n	8007eb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007eb0:	230b      	movs	r3, #11
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e036      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8007f64 <USB_SetTurnaroundTime+0x130>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d906      	bls.n	8007ecc <USB_SetTurnaroundTime+0x98>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	4a29      	ldr	r2, [pc, #164]	@ (8007f68 <USB_SetTurnaroundTime+0x134>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d802      	bhi.n	8007ecc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007ec6:	230a      	movs	r3, #10
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	e02b      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a26      	ldr	r2, [pc, #152]	@ (8007f68 <USB_SetTurnaroundTime+0x134>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d906      	bls.n	8007ee2 <USB_SetTurnaroundTime+0xae>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4a25      	ldr	r2, [pc, #148]	@ (8007f6c <USB_SetTurnaroundTime+0x138>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d202      	bcs.n	8007ee2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007edc:	2309      	movs	r3, #9
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e020      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4a21      	ldr	r2, [pc, #132]	@ (8007f6c <USB_SetTurnaroundTime+0x138>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d306      	bcc.n	8007ef8 <USB_SetTurnaroundTime+0xc4>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4a20      	ldr	r2, [pc, #128]	@ (8007f70 <USB_SetTurnaroundTime+0x13c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d802      	bhi.n	8007ef8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e015      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <USB_SetTurnaroundTime+0x13c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d906      	bls.n	8007f0e <USB_SetTurnaroundTime+0xda>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <USB_SetTurnaroundTime+0x140>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d202      	bcs.n	8007f0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007f08:	2307      	movs	r3, #7
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e00a      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007f0e:	2306      	movs	r3, #6
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e007      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007f1a:	2309      	movs	r3, #9
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e001      	b.n	8007f24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007f20:	2309      	movs	r3, #9
 8007f22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	029b      	lsls	r3, r3, #10
 8007f38:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	00d8acbf 	.word	0x00d8acbf
 8007f54:	00e4e1c0 	.word	0x00e4e1c0
 8007f58:	00f42400 	.word	0x00f42400
 8007f5c:	01067380 	.word	0x01067380
 8007f60:	011a499f 	.word	0x011a499f
 8007f64:	01312cff 	.word	0x01312cff
 8007f68:	014ca43f 	.word	0x014ca43f
 8007f6c:	016e3600 	.word	0x016e3600
 8007f70:	01a6ab1f 	.word	0x01a6ab1f
 8007f74:	01e84800 	.word	0x01e84800

08007f78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d115      	bne.n	800800a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fea:	200a      	movs	r0, #10
 8007fec:	f7fa ff5a 	bl	8002ea4 <HAL_Delay>
      ms += 10U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	330a      	adds	r3, #10
 8007ff4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f939 	bl	800926e <USB_GetMode>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d01e      	beq.n	8008040 <USB_SetCurrentMode+0x84>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2bc7      	cmp	r3, #199	@ 0xc7
 8008006:	d9f0      	bls.n	8007fea <USB_SetCurrentMode+0x2e>
 8008008:	e01a      	b.n	8008040 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d115      	bne.n	800803c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800801c:	200a      	movs	r0, #10
 800801e:	f7fa ff41 	bl	8002ea4 <HAL_Delay>
      ms += 10U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	330a      	adds	r3, #10
 8008026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 f920 	bl	800926e <USB_GetMode>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <USB_SetCurrentMode+0x84>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2bc7      	cmp	r3, #199	@ 0xc7
 8008038:	d9f0      	bls.n	800801c <USB_SetCurrentMode+0x60>
 800803a:	e001      	b.n	8008040 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e005      	b.n	800804c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2bc8      	cmp	r3, #200	@ 0xc8
 8008044:	d101      	bne.n	800804a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008054:	b084      	sub	sp, #16
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	e009      	b.n	8008088 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3340      	adds	r3, #64	@ 0x40
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3301      	adds	r3, #1
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b0e      	cmp	r3, #14
 800808c:	d9f2      	bls.n	8008074 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800808e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008092:	2b00      	cmp	r3, #0
 8008094:	d11c      	bne.n	80080d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080a4:	f043 0302 	orr.w	r3, r3, #2
 80080a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80080ce:	e00b      	b.n	80080e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d10d      	bne.n	8008118 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008104:	2100      	movs	r1, #0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f968 	bl	80083dc <USB_SetDevSpeed>
 800810c:	e008      	b.n	8008120 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800810e:	2101      	movs	r1, #1
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f963 	bl	80083dc <USB_SetDevSpeed>
 8008116:	e003      	b.n	8008120 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008118:	2103      	movs	r1, #3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f95e 	bl	80083dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008120:	2110      	movs	r1, #16
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8fa 	bl	800831c <USB_FlushTxFifo>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f924 	bl	8008380 <USB_FlushRxFifo>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008148:	461a      	mov	r2, r3
 800814a:	2300      	movs	r3, #0
 800814c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008160:	461a      	mov	r2, r3
 8008162:	2300      	movs	r3, #0
 8008164:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e043      	b.n	80081f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800817e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008182:	d118      	bne.n	80081b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008196:	461a      	mov	r2, r3
 8008198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e013      	b.n	80081c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ac:	461a      	mov	r2, r3
 80081ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e008      	b.n	80081c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081d4:	461a      	mov	r2, r3
 80081d6:	2300      	movs	r3, #0
 80081d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e6:	461a      	mov	r2, r3
 80081e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3301      	adds	r3, #1
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081f8:	461a      	mov	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d3b5      	bcc.n	800816c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	e043      	b.n	800828e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800821c:	d118      	bne.n	8008250 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	e013      	b.n	8008262 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	e008      	b.n	8008262 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825c:	461a      	mov	r2, r3
 800825e:	2300      	movs	r3, #0
 8008260:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826e:	461a      	mov	r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008280:	461a      	mov	r2, r3
 8008282:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3301      	adds	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008292:	461a      	mov	r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4293      	cmp	r3, r2
 8008298:	d3b5      	bcc.n	8008206 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80082ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f043 0210 	orr.w	r2, r3, #16
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	4b10      	ldr	r3, [pc, #64]	@ (8008318 <USB_DevInit+0x2c4>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f043 0208 	orr.w	r2, r3, #8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d107      	bne.n	8008308 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008300:	f043 0304 	orr.w	r3, r3, #4
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008314:	b004      	add	sp, #16
 8008316:	4770      	bx	lr
 8008318:	803c3800 	.word	0x803c3800

0800831c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008336:	d901      	bls.n	800833c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e01b      	b.n	8008374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	daf2      	bge.n	800832a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	019b      	lsls	r3, r3, #6
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008360:	d901      	bls.n	8008366 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e006      	b.n	8008374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b20      	cmp	r3, #32
 8008370:	d0f0      	beq.n	8008354 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3301      	adds	r3, #1
 8008390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008398:	d901      	bls.n	800839e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e018      	b.n	80083d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	daf2      	bge.n	800838c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2210      	movs	r2, #16
 80083ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3301      	adds	r3, #1
 80083b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083bc:	d901      	bls.n	80083c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e006      	b.n	80083d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d0f0      	beq.n	80083b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083fc:	4313      	orrs	r3, r2
 80083fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800840e:	b480      	push	{r7}
 8008410:	b087      	sub	sp, #28
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0306 	and.w	r3, r3, #6
 8008426:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800842e:	2300      	movs	r3, #0
 8008430:	75fb      	strb	r3, [r7, #23]
 8008432:	e00a      	b.n	800844a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d002      	beq.n	8008440 <USB_GetDevSpeed+0x32>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b06      	cmp	r3, #6
 800843e:	d102      	bne.n	8008446 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008440:	2302      	movs	r3, #2
 8008442:	75fb      	strb	r3, [r7, #23]
 8008444:	e001      	b.n	800844a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008446:	230f      	movs	r3, #15
 8008448:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
}
 800844c:	4618      	mov	r0, r3
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d13a      	bne.n	80084ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	69da      	ldr	r2, [r3, #28]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	b29b      	uxth	r3, r3
 800848c:	68f9      	ldr	r1, [r7, #12]
 800848e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008492:	4313      	orrs	r3, r2
 8008494:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d155      	bne.n	8008558 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	791b      	ldrb	r3, [r3, #4]
 80084c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	059b      	lsls	r3, r3, #22
 80084ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084d0:	4313      	orrs	r3, r2
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	e036      	b.n	8008558 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	2101      	movs	r1, #1
 80084fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008508:	4313      	orrs	r3, r2
 800850a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d11a      	bne.n	8008558 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	791b      	ldrb	r3, [r3, #4]
 800853c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800853e:	430b      	orrs	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	440a      	add	r2, r1
 800854a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800854e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008556:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
	...

08008568 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d161      	bne.n	8008648 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800859a:	d11f      	bne.n	80085dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	2101      	movs	r1, #1
 80085ee:	fa01 f303 	lsl.w	r3, r1, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	68f9      	ldr	r1, [r7, #12]
 80085f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085fc:	4013      	ands	r3, r2
 80085fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	2101      	movs	r1, #1
 8008612:	fa01 f303 	lsl.w	r3, r1, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	43db      	mvns	r3, r3
 800861a:	68f9      	ldr	r1, [r7, #12]
 800861c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008620:	4013      	ands	r3, r2
 8008622:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	0159      	lsls	r1, r3, #5
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	440b      	add	r3, r1
 800863a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800863e:	4619      	mov	r1, r3
 8008640:	4b35      	ldr	r3, [pc, #212]	@ (8008718 <USB_DeactivateEndpoint+0x1b0>)
 8008642:	4013      	ands	r3, r2
 8008644:	600b      	str	r3, [r1, #0]
 8008646:	e060      	b.n	800870a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800865a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800865e:	d11f      	bne.n	80086a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800867a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800867e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800869a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800869e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	2101      	movs	r1, #1
 80086b2:	fa01 f303 	lsl.w	r3, r1, r3
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	43db      	mvns	r3, r3
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086c0:	4013      	ands	r3, r2
 80086c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	2101      	movs	r1, #1
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	43db      	mvns	r3, r3
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086e4:	4013      	ands	r3, r2
 80086e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	0159      	lsls	r1, r3, #5
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	440b      	add	r3, r1
 80086fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008702:	4619      	mov	r1, r3
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <USB_DeactivateEndpoint+0x1b4>)
 8008706:	4013      	ands	r3, r2
 8008708:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	ec337800 	.word	0xec337800
 800871c:	eff37800 	.word	0xeff37800

08008720 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	f040 817a 	bne.w	8008a36 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d132      	bne.n	80087b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008764:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008768:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800876c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	440a      	add	r2, r1
 8008784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800878c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a8:	0cdb      	lsrs	r3, r3, #19
 80087aa:	04db      	lsls	r3, r3, #19
 80087ac:	6113      	str	r3, [r2, #16]
 80087ae:	e092      	b.n	80088d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ca:	0cdb      	lsrs	r3, r3, #19
 80087cc:	04db      	lsls	r3, r3, #19
 80087ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d11a      	bne.n	8008830 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	429a      	cmp	r2, r3
 8008804:	d903      	bls.n	800880e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	0151      	lsls	r1, r2, #5
 8008820:	69fa      	ldr	r2, [r7, #28]
 8008822:	440a      	add	r2, r1
 8008824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008828:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800882c:	6113      	str	r3, [r2, #16]
 800882e:	e01b      	b.n	8008868 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6919      	ldr	r1, [r3, #16]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	440b      	add	r3, r1
 8008848:	1e59      	subs	r1, r3, #1
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008852:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008854:	4ba2      	ldr	r3, [pc, #648]	@ (8008ae0 <USB_EPStartXfer+0x3c0>)
 8008856:	400b      	ands	r3, r1
 8008858:	69b9      	ldr	r1, [r7, #24]
 800885a:	0148      	lsls	r0, r1, #5
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	4401      	add	r1, r0
 8008860:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008864:	4313      	orrs	r3, r2
 8008866:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800887e:	69b9      	ldr	r1, [r7, #24]
 8008880:	0148      	lsls	r0, r1, #5
 8008882:	69f9      	ldr	r1, [r7, #28]
 8008884:	4401      	add	r1, r0
 8008886:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800888a:	4313      	orrs	r3, r2
 800888c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d11f      	bne.n	80088d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088b0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80088b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d14b      	bne.n	8008974 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d009      	beq.n	80088f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f0:	461a      	mov	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	791b      	ldrb	r3, [r3, #4]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d128      	bne.n	8008952 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800890c:	2b00      	cmp	r3, #0
 800890e:	d110      	bne.n	8008932 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	69fa      	ldr	r2, [r7, #28]
 8008924:	440a      	add	r2, r1
 8008926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800892a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	e00f      	b.n	8008952 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	0151      	lsls	r1, r2, #5
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	440a      	add	r2, r1
 8008948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800894c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008950:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	0151      	lsls	r1, r2, #5
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	440a      	add	r2, r1
 8008968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800896c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e165      	b.n	8008c40 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	0151      	lsls	r1, r2, #5
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	440a      	add	r2, r1
 800898a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008992:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d015      	beq.n	80089c8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 814d 	beq.w	8008c40 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	2101      	movs	r1, #1
 80089b8:	fa01 f303 	lsl.w	r3, r1, r3
 80089bc:	69f9      	ldr	r1, [r7, #28]
 80089be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089c2:	4313      	orrs	r3, r2
 80089c4:	634b      	str	r3, [r1, #52]	@ 0x34
 80089c6:	e13b      	b.n	8008c40 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d110      	bne.n	80089fa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	69fa      	ldr	r2, [r7, #28]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	e00f      	b.n	8008a1a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	68d9      	ldr	r1, [r3, #12]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	b298      	uxth	r0, r3
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f9b8 	bl	8008da4 <USB_WritePacket>
 8008a34:	e104      	b.n	8008c40 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a50:	0cdb      	lsrs	r3, r3, #19
 8008a52:	04db      	lsls	r3, r3, #19
 8008a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a78:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d131      	bne.n	8008ae4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aae:	69b9      	ldr	r1, [r7, #24]
 8008ab0:	0148      	lsls	r0, r1, #5
 8008ab2:	69f9      	ldr	r1, [r7, #28]
 8008ab4:	4401      	add	r1, r0
 8008ab6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008aba:	4313      	orrs	r3, r2
 8008abc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ad8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008adc:	6113      	str	r3, [r2, #16]
 8008ade:	e061      	b.n	8008ba4 <USB_EPStartXfer+0x484>
 8008ae0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d123      	bne.n	8008b34 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	0148      	lsls	r0, r1, #5
 8008b06:	69f9      	ldr	r1, [r7, #28]
 8008b08:	4401      	add	r1, r0
 8008b0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b30:	6113      	str	r3, [r2, #16]
 8008b32:	e037      	b.n	8008ba4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	1e5a      	subs	r2, r3, #1
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	8afa      	ldrh	r2, [r7, #22]
 8008b50:	fb03 f202 	mul.w	r2, r3, r2
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	691a      	ldr	r2, [r3, #16]
 8008b66:	8afb      	ldrh	r3, [r7, #22]
 8008b68:	04d9      	lsls	r1, r3, #19
 8008b6a:	4b38      	ldr	r3, [pc, #224]	@ (8008c4c <USB_EPStartXfer+0x52c>)
 8008b6c:	400b      	ands	r3, r1
 8008b6e:	69b9      	ldr	r1, [r7, #24]
 8008b70:	0148      	lsls	r0, r1, #5
 8008b72:	69f9      	ldr	r1, [r7, #28]
 8008b74:	4401      	add	r1, r0
 8008b76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b94:	69b9      	ldr	r1, [r7, #24]
 8008b96:	0148      	lsls	r0, r1, #5
 8008b98:	69f9      	ldr	r1, [r7, #28]
 8008b9a:	4401      	add	r1, r0
 8008b9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d10d      	bne.n	8008bc6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	68d9      	ldr	r1, [r3, #12]
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc2:	460a      	mov	r2, r1
 8008bc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d128      	bne.n	8008c20 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d110      	bne.n	8008c00 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	e00f      	b.n	8008c20 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3720      	adds	r7, #32
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	1ff80000 	.word	0x1ff80000

08008c50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d14a      	bne.n	8008d04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c86:	f040 8086 	bne.w	8008d96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008cac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	7812      	ldrb	r2, [r2, #0]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ccc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cd0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d902      	bls.n	8008ce8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ce6:	e056      	b.n	8008d96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d00:	d0e7      	beq.n	8008cd2 <USB_EPStopXfer+0x82>
 8008d02:	e048      	b.n	8008d96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d1c:	d13b      	bne.n	8008d96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	7812      	ldrb	r2, [r2, #0]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d902      	bls.n	8008d7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7a:	e00c      	b.n	8008d96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d94:	d0e7      	beq.n	8008d66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b089      	sub	sp, #36	@ 0x24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4611      	mov	r1, r2
 8008db0:	461a      	mov	r2, r3
 8008db2:	460b      	mov	r3, r1
 8008db4:	71fb      	strb	r3, [r7, #7]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d123      	bne.n	8008e12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dca:	88bb      	ldrh	r3, [r7, #4]
 8008dcc:	3303      	adds	r3, #3
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e018      	b.n	8008e0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	031a      	lsls	r2, r3, #12
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008de4:	461a      	mov	r2, r3
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	3301      	adds	r3, #1
 8008df0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	3301      	adds	r3, #1
 8008df6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	3301      	adds	r3, #1
 8008e02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	3301      	adds	r3, #1
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d3e2      	bcc.n	8008dd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3724      	adds	r7, #36	@ 0x24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b08b      	sub	sp, #44	@ 0x2c
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	089b      	lsrs	r3, r3, #2
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	623b      	str	r3, [r7, #32]
 8008e4a:	e014      	b.n	8008e76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	3301      	adds	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e66:	3301      	adds	r3, #1
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	3301      	adds	r3, #1
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	6a3a      	ldr	r2, [r7, #32]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d3e6      	bcc.n	8008e4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e7e:	8bfb      	ldrh	r3, [r7, #30]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01e      	beq.n	8008ec2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f107 0310 	add.w	r3, r7, #16
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	701a      	strb	r2, [r3, #0]
      i++;
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	3301      	adds	r3, #1
 8008eae:	623b      	str	r3, [r7, #32]
      pDest++;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008eb6:	8bfb      	ldrh	r3, [r7, #30]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ebc:	8bfb      	ldrh	r3, [r7, #30]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1ea      	bne.n	8008e98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	372c      	adds	r7, #44	@ 0x2c
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d12c      	bne.n	8008f46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	db12      	blt.n	8008f24 <USB_EPSetStall+0x54>
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00f      	beq.n	8008f24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e02b      	b.n	8008f9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	db12      	blt.n	8008f7e <USB_EPSetStall+0xae>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d128      	bne.n	800901a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fe6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d003      	beq.n	8008ff8 <USB_EPClearStall+0x4c>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	791b      	ldrb	r3, [r3, #4]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d138      	bne.n	800906a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e027      	b.n	800906a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	440a      	add	r2, r1
 8009030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009034:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009038:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	791b      	ldrb	r3, [r3, #4]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d003      	beq.n	800904a <USB_EPClearStall+0x9e>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d10f      	bne.n	800906a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009068:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009096:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800909a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80090ac:	68f9      	ldr	r1, [r7, #12]
 80090ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090b2:	4313      	orrs	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f2:	f023 0302 	bic.w	r3, r3, #2
 80090f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009106:	b480      	push	{r7}
 8009108:	b085      	sub	sp, #20
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009134:	f043 0302 	orr.w	r3, r3, #2
 8009138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4013      	ands	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009160:	68fb      	ldr	r3, [r7, #12]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800916e:	b480      	push	{r7}
 8009170:	b085      	sub	sp, #20
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	4013      	ands	r3, r2
 8009190:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	0c1b      	lsrs	r3, r3, #16
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	4013      	ands	r3, r2
 80091c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	b29b      	uxth	r3, r3
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b085      	sub	sp, #20
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4013      	ands	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009204:	68bb      	ldr	r3, [r7, #8]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009212:	b480      	push	{r7}
 8009214:	b087      	sub	sp, #28
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009234:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	fa22 f303 	lsr.w	r3, r2, r3
 8009242:	01db      	lsls	r3, r3, #7
 8009244:	b2db      	uxtb	r3, r3
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4013      	ands	r3, r2
 800925e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009260:	68bb      	ldr	r3, [r7, #8]
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	f003 0301 	and.w	r3, r3, #1
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80092a8:	f023 0307 	bic.w	r3, r3, #7
 80092ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	333c      	adds	r3, #60	@ 0x3c
 80092e6:	3304      	adds	r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4a26      	ldr	r2, [pc, #152]	@ (8009388 <USB_EP0_OutStart+0xb8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d90a      	bls.n	800930a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009304:	d101      	bne.n	800930a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	e037      	b.n	800937a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009310:	461a      	mov	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009324:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009338:	f043 0318 	orr.w	r3, r3, #24
 800933c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800934c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009350:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10f      	bne.n	8009378 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800935e:	461a      	mov	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009372:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009376:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	371c      	adds	r7, #28
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	4f54300a 	.word	0x4f54300a

0800938c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3301      	adds	r3, #1
 800939c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093a4:	d901      	bls.n	80093aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e01b      	b.n	80093e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	daf2      	bge.n	8009398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f043 0201 	orr.w	r2, r3, #1
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093ce:	d901      	bls.n	80093d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e006      	b.n	80093e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d0f0      	beq.n	80093c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <___ROM_LSDB_PREPARE>:
//uint8_t rx_data[8] = {0}; 

extern uint8_t speed_limit;

void ___ROM_LSDB_PREPARE(CAN_HandleTypeDef *p_hcan1)
{ 
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	/* Now You can transmit/receive */
	txHeader.DLC = 8;
 80093f8:	4b2f      	ldr	r3, [pc, #188]	@ (80094b8 <___ROM_LSDB_PREPARE+0xc8>)
 80093fa:	2208      	movs	r2, #8
 80093fc:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 80093fe:	4b2e      	ldr	r3, [pc, #184]	@ (80094b8 <___ROM_LSDB_PREPARE+0xc8>)
 8009400:	2200      	movs	r2, #0
 8009402:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8009404:	4b2c      	ldr	r3, [pc, #176]	@ (80094b8 <___ROM_LSDB_PREPARE+0xc8>)
 8009406:	2200      	movs	r2, #0
 8009408:	60da      	str	r2, [r3, #12]
	
	/* Servo hub related */
	clearMotors(p_hcan1);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fbe6 	bl	8009bdc <clearMotors>
	HAL_Delay(1);
 8009410:	2001      	movs	r0, #1
 8009412:	f7f9 fd47 	bl	8002ea4 <HAL_Delay>
	
	disableMotors(p_hcan1);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fbd0 	bl	8009bbc <disableMotors>
	HAL_Delay(1);
 800941c:	2001      	movs	r0, #1
 800941e:	f7f9 fd41 	bl	8002ea4 <HAL_Delay>
	
	clearActualPostion(p_hcan1);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fbea 	bl	8009bfc <clearActualPostion>
	HAL_Delay(1);
 8009428:	2001      	movs	r0, #1
 800942a:	f7f9 fd3b 	bl	8002ea4 <HAL_Delay>
	
	/* Acceleration 2 rad/s^2 */
	setAccel(p_hcan1, 2);
 800942e:	2102      	movs	r1, #2
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fae1 	bl	80099f8 <setAccel>
	HAL_Delay(1);
 8009436:	2001      	movs	r0, #1
 8009438:	f7f9 fd34 	bl	8002ea4 <HAL_Delay>

	/* Deceleration 2 rad/s^2 */
	setDecel(p_hcan1, 2);
 800943c:	2102      	movs	r1, #2
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 faeb 	bl	8009a1a <setDecel>
	HAL_Delay(1);
 8009444:	2001      	movs	r0, #1
 8009446:	f7f9 fd2d 	bl	8002ea4 <HAL_Delay>
	
	enableMotorLeft(p_hcan1,CONTROL_WORD_ENABLE);
 800944a:	210f      	movs	r1, #15
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f8db 	bl	8009608 <enableMotorLeft>
	HAL_Delay(1);
 8009452:	2001      	movs	r0, #1
 8009454:	f7f9 fd26 	bl	8002ea4 <HAL_Delay>
	
	enableMotorRight(p_hcan1,CONTROL_WORD_ENABLE);
 8009458:	210f      	movs	r1, #15
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f88c 	bl	8009578 <enableMotorRight>
	HAL_Delay(1);
 8009460:	2001      	movs	r0, #1
 8009462:	f7f9 fd1f 	bl	8002ea4 <HAL_Delay>
	
	/* These object must be after Enable motors. */
	/* Default Speed Mode */
	setOperatingMode(p_hcan1, SPEED_MODE_WITH_ACCEL_DECEL); // response time 140us
 8009466:	2103      	movs	r1, #3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f829 	bl	80094c0 <setOperatingMode>
	HAL_Delay(1);
 800946e:	2001      	movs	r0, #1
 8009470:	f7f9 fd18 	bl	8002ea4 <HAL_Delay>
	
	setActualSpeedSamplingCycle(p_hcan1, 10);
 8009474:	210a      	movs	r1, #10
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fae0 	bl	8009a3c <setActualSpeedSamplingCycle>
	HAL_Delay(1);
 800947c:	2001      	movs	r0, #1
 800947e:	f7f9 fd11 	bl	8002ea4 <HAL_Delay>
	
	setMaxRPM(p_hcan1, speed_limit);
 8009482:	4b0e      	ldr	r3, [pc, #56]	@ (80094bc <___ROM_LSDB_PREPARE+0xcc>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa3d 	bl	8009908 <setMaxRPM>
	HAL_Delay(1);
 800948e:	2001      	movs	r0, #1
 8009490:	f7f9 fd08 	bl	8002ea4 <HAL_Delay>
	
	setTargetVelocityRpmRight(p_hcan1,0);
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9c2 	bl	8009820 <setTargetVelocityRpmRight>
	HAL_Delay(1);
 800949c:	2001      	movs	r0, #1
 800949e:	f7f9 fd01 	bl	8002ea4 <HAL_Delay>
	
	setTargetVelocityRpmLeft(p_hcan1,0);
 80094a2:	2100      	movs	r1, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9f3 	bl	8009890 <setTargetVelocityRpmLeft>
	HAL_Delay(1);
 80094aa:	2001      	movs	r0, #1
 80094ac:	f7f9 fcfa 	bl	8002ea4 <HAL_Delay>
	*/
	
	/* Test Run Receive */
	//getActualRpmRight(p_hcan1);
	//getActualRpmLeft(p_hcan1);
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	2000213c 	.word	0x2000213c
 80094bc:	20000354 	.word	0x20000354

080094c0 <setOperatingMode>:



/* SPEED MODE FUNCTION START */
void setOperatingMode(CAN_HandleTypeDef *p_hcan1, int8_t op_mode)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	70fb      	strb	r3, [r7, #3]
	txHeader.StdId = RIGHT_MOTOR;   
 80094cc:	4b27      	ldr	r3, [pc, #156]	@ (800956c <setOperatingMode+0xac>)
 80094ce:	f240 6201 	movw	r2, #1537	@ 0x601
 80094d2:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_ONE_BYTE;
 80094d4:	4b26      	ldr	r3, [pc, #152]	@ (8009570 <setOperatingMode+0xb0>)
 80094d6:	222f      	movs	r2, #47	@ 0x2f
 80094d8:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = OPERATION_MODE_1ST_BYTE;
 80094da:	4b25      	ldr	r3, [pc, #148]	@ (8009570 <setOperatingMode+0xb0>)
 80094dc:	2260      	movs	r2, #96	@ 0x60
 80094de:	705a      	strb	r2, [r3, #1]
	tx_data[2] = OPERATION_MODE_2ND_BYTE;
 80094e0:	4b23      	ldr	r3, [pc, #140]	@ (8009570 <setOperatingMode+0xb0>)
 80094e2:	2260      	movs	r2, #96	@ 0x60
 80094e4:	709a      	strb	r2, [r3, #2]
	tx_data[3] = OPERATION_MODE_3RD_BYTE;
 80094e6:	4b22      	ldr	r3, [pc, #136]	@ (8009570 <setOperatingMode+0xb0>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = op_mode;
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4b20      	ldr	r3, [pc, #128]	@ (8009570 <setOperatingMode+0xb0>)
 80094f0:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0x00;
 80094f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009570 <setOperatingMode+0xb0>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 80094f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009570 <setOperatingMode+0xb0>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 80094fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009570 <setOperatingMode+0xb0>)
 8009500:	2200      	movs	r2, #0
 8009502:	71da      	strb	r2, [r3, #7]
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009504:	4b1b      	ldr	r3, [pc, #108]	@ (8009574 <setOperatingMode+0xb4>)
 8009506:	4a1a      	ldr	r2, [pc, #104]	@ (8009570 <setOperatingMode+0xb0>)
 8009508:	4918      	ldr	r1, [pc, #96]	@ (800956c <setOperatingMode+0xac>)
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7fa faa8 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <setOperatingMode+0x5a>
	{
		CAN_Error_Handler();
 8009516:	f7f8 fb7f 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 800951a:	bf00      	nop
 800951c:	4b15      	ldr	r3, [pc, #84]	@ (8009574 <setOperatingMode+0xb4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fa fb6c 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1f6      	bne.n	800951c <setOperatingMode+0x5c>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
	//for left motor 0x602
	txHeader.StdId = LEFT_MOTOR;
 800952e:	4b0f      	ldr	r3, [pc, #60]	@ (800956c <setOperatingMode+0xac>)
 8009530:	f240 6202 	movw	r2, #1538	@ 0x602
 8009534:	601a      	str	r2, [r3, #0]
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009536:	4b0f      	ldr	r3, [pc, #60]	@ (8009574 <setOperatingMode+0xb4>)
 8009538:	4a0d      	ldr	r2, [pc, #52]	@ (8009570 <setOperatingMode+0xb0>)
 800953a:	490c      	ldr	r1, [pc, #48]	@ (800956c <setOperatingMode+0xac>)
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7fa fa8f 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <setOperatingMode+0x8c>
	{
		CAN_Error_Handler();
 8009548:	f7f8 fb66 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 800954c:	bf00      	nop
 800954e:	4b09      	ldr	r3, [pc, #36]	@ (8009574 <setOperatingMode+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7fa fb53 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f6      	bne.n	800954e <setOperatingMode+0x8e>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 8009560:	bf00      	nop
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	2000213c 	.word	0x2000213c
 8009570:	20002154 	.word	0x20002154
 8009574:	20002138 	.word	0x20002138

08009578 <enableMotorRight>:
void enableMotorRight(CAN_HandleTypeDef *p_hcan1, int16_t flag)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	807b      	strh	r3, [r7, #2]
	txHeader.StdId = RIGHT_MOTOR; 
 8009584:	4b1d      	ldr	r3, [pc, #116]	@ (80095fc <enableMotorRight+0x84>)
 8009586:	f240 6201 	movw	r2, #1537	@ 0x601
 800958a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 800958c:	4b1c      	ldr	r3, [pc, #112]	@ (8009600 <enableMotorRight+0x88>)
 800958e:	222b      	movs	r2, #43	@ 0x2b
 8009590:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = CONTROL_WORD_1ST_BYTE;
 8009592:	4b1b      	ldr	r3, [pc, #108]	@ (8009600 <enableMotorRight+0x88>)
 8009594:	2240      	movs	r2, #64	@ 0x40
 8009596:	705a      	strb	r2, [r3, #1]
	tx_data[2] = CONTROL_WORD_2ND_BYTE;
 8009598:	4b19      	ldr	r3, [pc, #100]	@ (8009600 <enableMotorRight+0x88>)
 800959a:	2260      	movs	r2, #96	@ 0x60
 800959c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = CONTROL_WORD_3RD_BYTE;
 800959e:	4b18      	ldr	r3, [pc, #96]	@ (8009600 <enableMotorRight+0x88>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = flag & 0xFF;
 80095a4:	887b      	ldrh	r3, [r7, #2]
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	4b15      	ldr	r3, [pc, #84]	@ (8009600 <enableMotorRight+0x88>)
 80095aa:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (flag >> 8) & 0xFF;
 80095ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80095b0:	121b      	asrs	r3, r3, #8
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <enableMotorRight+0x88>)
 80095b8:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 80095ba:	4b11      	ldr	r3, [pc, #68]	@ (8009600 <enableMotorRight+0x88>)
 80095bc:	2200      	movs	r2, #0
 80095be:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 80095c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009600 <enableMotorRight+0x88>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	71da      	strb	r2, [r3, #7]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 80095c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009604 <enableMotorRight+0x8c>)
 80095c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009600 <enableMotorRight+0x88>)
 80095ca:	490c      	ldr	r1, [pc, #48]	@ (80095fc <enableMotorRight+0x84>)
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fa fa47 	bl	8003a60 <HAL_CAN_AddTxMessage>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <enableMotorRight+0x64>
	{
		CAN_Error_Handler();
 80095d8:	f7f8 fb1e 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 80095dc:	bf00      	nop
 80095de:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <enableMotorRight+0x8c>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7fa fb0b 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f6      	bne.n	80095de <enableMotorRight+0x66>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000213c 	.word	0x2000213c
 8009600:	20002154 	.word	0x20002154
 8009604:	20002138 	.word	0x20002138

08009608 <enableMotorLeft>:
void enableMotorLeft(CAN_HandleTypeDef *p_hcan1, int16_t flag)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	807b      	strh	r3, [r7, #2]
	txHeader.StdId = LEFT_MOTOR; 
 8009614:	4b1d      	ldr	r3, [pc, #116]	@ (800968c <enableMotorLeft+0x84>)
 8009616:	f240 6202 	movw	r2, #1538	@ 0x602
 800961a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 800961c:	4b1c      	ldr	r3, [pc, #112]	@ (8009690 <enableMotorLeft+0x88>)
 800961e:	222b      	movs	r2, #43	@ 0x2b
 8009620:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = CONTROL_WORD_1ST_BYTE;
 8009622:	4b1b      	ldr	r3, [pc, #108]	@ (8009690 <enableMotorLeft+0x88>)
 8009624:	2240      	movs	r2, #64	@ 0x40
 8009626:	705a      	strb	r2, [r3, #1]
	tx_data[2] = CONTROL_WORD_2ND_BYTE;
 8009628:	4b19      	ldr	r3, [pc, #100]	@ (8009690 <enableMotorLeft+0x88>)
 800962a:	2260      	movs	r2, #96	@ 0x60
 800962c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = CONTROL_WORD_3RD_BYTE;
 800962e:	4b18      	ldr	r3, [pc, #96]	@ (8009690 <enableMotorLeft+0x88>)
 8009630:	2200      	movs	r2, #0
 8009632:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = flag & 0xFF;
 8009634:	887b      	ldrh	r3, [r7, #2]
 8009636:	b2da      	uxtb	r2, r3
 8009638:	4b15      	ldr	r3, [pc, #84]	@ (8009690 <enableMotorLeft+0x88>)
 800963a:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (flag >> 8) & 0xFF;
 800963c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009640:	121b      	asrs	r3, r3, #8
 8009642:	b21b      	sxth	r3, r3
 8009644:	b2da      	uxtb	r2, r3
 8009646:	4b12      	ldr	r3, [pc, #72]	@ (8009690 <enableMotorLeft+0x88>)
 8009648:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 800964a:	4b11      	ldr	r3, [pc, #68]	@ (8009690 <enableMotorLeft+0x88>)
 800964c:	2200      	movs	r2, #0
 800964e:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009650:	4b0f      	ldr	r3, [pc, #60]	@ (8009690 <enableMotorLeft+0x88>)
 8009652:	2200      	movs	r2, #0
 8009654:	71da      	strb	r2, [r3, #7]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009656:	4b0f      	ldr	r3, [pc, #60]	@ (8009694 <enableMotorLeft+0x8c>)
 8009658:	4a0d      	ldr	r2, [pc, #52]	@ (8009690 <enableMotorLeft+0x88>)
 800965a:	490c      	ldr	r1, [pc, #48]	@ (800968c <enableMotorLeft+0x84>)
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fa f9ff 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <enableMotorLeft+0x64>
	{
		CAN_Error_Handler();
 8009668:	f7f8 fad6 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 800966c:	bf00      	nop
 800966e:	4b09      	ldr	r3, [pc, #36]	@ (8009694 <enableMotorLeft+0x8c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fa fac3 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1f6      	bne.n	800966e <enableMotorLeft+0x66>
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	2000213c 	.word	0x2000213c
 8009690:	20002154 	.word	0x20002154
 8009694:	20002138 	.word	0x20002138

08009698 <transmitAccel>:
	delay_us(200);
	txHeader.StdId = LEFT_MOTOR;
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
}
void transmitAccel(CAN_HandleTypeDef *p_hcan1, uint32_t flag)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
	txHeader.StdId = RIGHT_MOTOR;
 80096a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009750 <transmitAccel+0xb8>)
 80096a4:	f240 6201 	movw	r2, #1537	@ 0x601
 80096a8:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_FOURBYTE;
 80096aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009754 <transmitAccel+0xbc>)
 80096ac:	2223      	movs	r2, #35	@ 0x23
 80096ae:	701a      	strb	r2, [r3, #0]
	tx_data[1] = ACCELERATION_1ST_BYTE;
 80096b0:	4b28      	ldr	r3, [pc, #160]	@ (8009754 <transmitAccel+0xbc>)
 80096b2:	2283      	movs	r2, #131	@ 0x83
 80096b4:	705a      	strb	r2, [r3, #1]
	tx_data[2] = ACCELERATION_2ND_BYTE;
 80096b6:	4b27      	ldr	r3, [pc, #156]	@ (8009754 <transmitAccel+0xbc>)
 80096b8:	2260      	movs	r2, #96	@ 0x60
 80096ba:	709a      	strb	r2, [r3, #2]
	tx_data[3] = ACCELERATION_3RD_BYTE;
 80096bc:	4b25      	ldr	r3, [pc, #148]	@ (8009754 <transmitAccel+0xbc>)
 80096be:	2200      	movs	r2, #0
 80096c0:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = flag & 0xFF;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	4b23      	ldr	r3, [pc, #140]	@ (8009754 <transmitAccel+0xbc>)
 80096c8:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (flag >> 8) & 0xFF;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	0a1b      	lsrs	r3, r3, #8
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	4b20      	ldr	r3, [pc, #128]	@ (8009754 <transmitAccel+0xbc>)
 80096d2:	715a      	strb	r2, [r3, #5]
	tx_data[6] = (flag >> 16) & 0xFF;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	0c1b      	lsrs	r3, r3, #16
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	4b1e      	ldr	r3, [pc, #120]	@ (8009754 <transmitAccel+0xbc>)
 80096dc:	719a      	strb	r2, [r3, #6]
	tx_data[7] = (flag >> 24) & 0xFF;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	0e1b      	lsrs	r3, r3, #24
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009754 <transmitAccel+0xbc>)
 80096e6:	71da      	strb	r2, [r3, #7]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 80096e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009758 <transmitAccel+0xc0>)
 80096ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009754 <transmitAccel+0xbc>)
 80096ec:	4918      	ldr	r1, [pc, #96]	@ (8009750 <transmitAccel+0xb8>)
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7fa f9b6 	bl	8003a60 <HAL_CAN_AddTxMessage>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <transmitAccel+0x66>
	{
		CAN_Error_Handler();
 80096fa:	f7f8 fa8d 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 80096fe:	bf00      	nop
 8009700:	4b15      	ldr	r3, [pc, #84]	@ (8009758 <transmitAccel+0xc0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7fa fa7a 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f6      	bne.n	8009700 <transmitAccel+0x68>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
	// Left
	txHeader.StdId = LEFT_MOTOR;
 8009712:	4b0f      	ldr	r3, [pc, #60]	@ (8009750 <transmitAccel+0xb8>)
 8009714:	f240 6202 	movw	r2, #1538	@ 0x602
 8009718:	601a      	str	r2, [r3, #0]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 800971a:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <transmitAccel+0xc0>)
 800971c:	4a0d      	ldr	r2, [pc, #52]	@ (8009754 <transmitAccel+0xbc>)
 800971e:	490c      	ldr	r1, [pc, #48]	@ (8009750 <transmitAccel+0xb8>)
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7fa f99d 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <transmitAccel+0x98>
	{
		CAN_Error_Handler();
 800972c:	f7f8 fa74 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009730:	bf00      	nop
 8009732:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <transmitAccel+0xc0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7fa fa61 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f6      	bne.n	8009732 <transmitAccel+0x9a>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	2000213c 	.word	0x2000213c
 8009754:	20002154 	.word	0x20002154
 8009758:	20002138 	.word	0x20002138

0800975c <transmitDecel>:
void transmitDecel(CAN_HandleTypeDef *p_hcan1, uint32_t flag)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
	txHeader.StdId = RIGHT_MOTOR;
 8009766:	4b2b      	ldr	r3, [pc, #172]	@ (8009814 <transmitDecel+0xb8>)
 8009768:	f240 6201 	movw	r2, #1537	@ 0x601
 800976c:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_FOURBYTE;
 800976e:	4b2a      	ldr	r3, [pc, #168]	@ (8009818 <transmitDecel+0xbc>)
 8009770:	2223      	movs	r2, #35	@ 0x23
 8009772:	701a      	strb	r2, [r3, #0]
	tx_data[1] = DECELERATION_1ST_BYTE;
 8009774:	4b28      	ldr	r3, [pc, #160]	@ (8009818 <transmitDecel+0xbc>)
 8009776:	2284      	movs	r2, #132	@ 0x84
 8009778:	705a      	strb	r2, [r3, #1]
	tx_data[2] = DECELERATION_2ND_BYTE;
 800977a:	4b27      	ldr	r3, [pc, #156]	@ (8009818 <transmitDecel+0xbc>)
 800977c:	2260      	movs	r2, #96	@ 0x60
 800977e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = DECELERATION_3RD_BYTE;
 8009780:	4b25      	ldr	r3, [pc, #148]	@ (8009818 <transmitDecel+0xbc>)
 8009782:	2200      	movs	r2, #0
 8009784:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = flag & 0xFF;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b23      	ldr	r3, [pc, #140]	@ (8009818 <transmitDecel+0xbc>)
 800978c:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (flag >> 8) & 0xFF;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	0a1b      	lsrs	r3, r3, #8
 8009792:	b2da      	uxtb	r2, r3
 8009794:	4b20      	ldr	r3, [pc, #128]	@ (8009818 <transmitDecel+0xbc>)
 8009796:	715a      	strb	r2, [r3, #5]
	tx_data[6] = (flag >> 16) & 0xFF;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	b2da      	uxtb	r2, r3
 800979e:	4b1e      	ldr	r3, [pc, #120]	@ (8009818 <transmitDecel+0xbc>)
 80097a0:	719a      	strb	r2, [r3, #6]
	tx_data[7] = (flag >> 24) & 0xFF;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	0e1b      	lsrs	r3, r3, #24
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <transmitDecel+0xbc>)
 80097aa:	71da      	strb	r2, [r3, #7]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 80097ac:	4b1b      	ldr	r3, [pc, #108]	@ (800981c <transmitDecel+0xc0>)
 80097ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009818 <transmitDecel+0xbc>)
 80097b0:	4918      	ldr	r1, [pc, #96]	@ (8009814 <transmitDecel+0xb8>)
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fa f954 	bl	8003a60 <HAL_CAN_AddTxMessage>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <transmitDecel+0x66>
	{
		CAN_Error_Handler();
 80097be:	f7f8 fa2b 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 80097c2:	bf00      	nop
 80097c4:	4b15      	ldr	r3, [pc, #84]	@ (800981c <transmitDecel+0xc0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7fa fa18 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1f6      	bne.n	80097c4 <transmitDecel+0x68>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
	// Left
	txHeader.StdId = LEFT_MOTOR;
 80097d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009814 <transmitDecel+0xb8>)
 80097d8:	f240 6202 	movw	r2, #1538	@ 0x602
 80097dc:	601a      	str	r2, [r3, #0]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 80097de:	4b0f      	ldr	r3, [pc, #60]	@ (800981c <transmitDecel+0xc0>)
 80097e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009818 <transmitDecel+0xbc>)
 80097e2:	490c      	ldr	r1, [pc, #48]	@ (8009814 <transmitDecel+0xb8>)
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7fa f93b 	bl	8003a60 <HAL_CAN_AddTxMessage>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <transmitDecel+0x98>
	{
		CAN_Error_Handler();
 80097f0:	f7f8 fa12 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 80097f4:	bf00      	nop
 80097f6:	4b09      	ldr	r3, [pc, #36]	@ (800981c <transmitDecel+0xc0>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7fa f9ff 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1f6      	bne.n	80097f6 <transmitDecel+0x9a>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2000213c 	.word	0x2000213c
 8009818:	20002154 	.word	0x20002154
 800981c:	20002138 	.word	0x20002138

08009820 <setTargetVelocityRpmRight>:
	
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
}

void setTargetVelocityRpmRight(CAN_HandleTypeDef *p_hcan1,int16_t rpm)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	807b      	strh	r3, [r7, #2]
	txHeader.StdId = RIGHT_MOTOR; 
 800982c:	4b15      	ldr	r3, [pc, #84]	@ (8009884 <setTargetVelocityRpmRight+0x64>)
 800982e:	f240 6201 	movw	r2, #1537	@ 0x601
 8009832:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 8009834:	4b14      	ldr	r3, [pc, #80]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009836:	222b      	movs	r2, #43	@ 0x2b
 8009838:	701a      	strb	r2, [r3, #0]
	tx_data[1] = DESIRE_VEL_RPM_1ST_BYTE;
 800983a:	4b13      	ldr	r3, [pc, #76]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 800983c:	22f0      	movs	r2, #240	@ 0xf0
 800983e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = DESIRE_VEL_RPM_2ND_BYTE;
 8009840:	4b11      	ldr	r3, [pc, #68]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009842:	222f      	movs	r2, #47	@ 0x2f
 8009844:	709a      	strb	r2, [r3, #2]
	tx_data[3] = DESIRE_VEL_RPM_3RD_BYTE;
 8009846:	4b10      	ldr	r3, [pc, #64]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009848:	2209      	movs	r2, #9
 800984a:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = rpm & 0xFF;
 800984c:	887b      	ldrh	r3, [r7, #2]
 800984e:	b2da      	uxtb	r2, r3
 8009850:	4b0d      	ldr	r3, [pc, #52]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009852:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (rpm >>  8) & 0xFF;
 8009854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009858:	121b      	asrs	r3, r3, #8
 800985a:	b21b      	sxth	r3, r3
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009860:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009862:	4b09      	ldr	r3, [pc, #36]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009864:	2200      	movs	r2, #0
 8009866:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009868:	4b07      	ldr	r3, [pc, #28]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 800986a:	2200      	movs	r2, #0
 800986c:	71da      	strb	r2, [r3, #7]
	
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox); // need hal ok
 800986e:	4b07      	ldr	r3, [pc, #28]	@ (800988c <setTargetVelocityRpmRight+0x6c>)
 8009870:	4a05      	ldr	r2, [pc, #20]	@ (8009888 <setTargetVelocityRpmRight+0x68>)
 8009872:	4904      	ldr	r1, [pc, #16]	@ (8009884 <setTargetVelocityRpmRight+0x64>)
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7fa f8f3 	bl	8003a60 <HAL_CAN_AddTxMessage>
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	2000213c 	.word	0x2000213c
 8009888:	20002154 	.word	0x20002154
 800988c:	20002138 	.word	0x20002138

08009890 <setTargetVelocityRpmLeft>:
void setTargetVelocityRpmLeft(CAN_HandleTypeDef *p_hcan1,int16_t rpm)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	807b      	strh	r3, [r7, #2]
	txHeader.StdId = LEFT_MOTOR; 
 800989c:	4b17      	ldr	r3, [pc, #92]	@ (80098fc <setTargetVelocityRpmLeft+0x6c>)
 800989e:	f240 6202 	movw	r2, #1538	@ 0x602
 80098a2:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 80098a4:	4b16      	ldr	r3, [pc, #88]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098a6:	222b      	movs	r2, #43	@ 0x2b
 80098a8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = DESIRE_VEL_RPM_1ST_BYTE;
 80098aa:	4b15      	ldr	r3, [pc, #84]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098ac:	22f0      	movs	r2, #240	@ 0xf0
 80098ae:	705a      	strb	r2, [r3, #1]
	tx_data[2] = DESIRE_VEL_RPM_2ND_BYTE;
 80098b0:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098b2:	222f      	movs	r2, #47	@ 0x2f
 80098b4:	709a      	strb	r2, [r3, #2]
	tx_data[3] = DESIRE_VEL_RPM_3RD_BYTE;
 80098b6:	4b12      	ldr	r3, [pc, #72]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098b8:	2209      	movs	r2, #9
 80098ba:	70da      	strb	r2, [r3, #3]
	
	rpm *= -1;
 80098bc:	887b      	ldrh	r3, [r7, #2]
 80098be:	425b      	negs	r3, r3
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	807b      	strh	r3, [r7, #2]
	
	tx_data[4] = rpm & 0xFF;
 80098c4:	887b      	ldrh	r3, [r7, #2]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098ca:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (rpm >>  8) & 0xFF;
 80098cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098d0:	121b      	asrs	r3, r3, #8
 80098d2:	b21b      	sxth	r3, r3
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098d8:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 80098da:	4b09      	ldr	r3, [pc, #36]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098dc:	2200      	movs	r2, #0
 80098de:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	71da      	strb	r2, [r3, #7]
	
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
 80098e6:	4b07      	ldr	r3, [pc, #28]	@ (8009904 <setTargetVelocityRpmLeft+0x74>)
 80098e8:	4a05      	ldr	r2, [pc, #20]	@ (8009900 <setTargetVelocityRpmLeft+0x70>)
 80098ea:	4904      	ldr	r1, [pc, #16]	@ (80098fc <setTargetVelocityRpmLeft+0x6c>)
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7fa f8b7 	bl	8003a60 <HAL_CAN_AddTxMessage>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	2000213c 	.word	0x2000213c
 8009900:	20002154 	.word	0x20002154
 8009904:	20002138 	.word	0x20002138

08009908 <setMaxRPM>:
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
}

/* MAXIMUM SPEED SETTING */
void setMaxRPM(CAN_HandleTypeDef *p_hcan1,uint8_t rpm)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
	txHeader.StdId = RIGHT_MOTOR; 
 8009914:	4b27      	ldr	r3, [pc, #156]	@ (80099b4 <setMaxRPM+0xac>)
 8009916:	f240 6201 	movw	r2, #1537	@ 0x601
 800991a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 800991c:	4b26      	ldr	r3, [pc, #152]	@ (80099b8 <setMaxRPM+0xb0>)
 800991e:	222b      	movs	r2, #43	@ 0x2b
 8009920:	701a      	strb	r2, [r3, #0]
	tx_data[1] = MAX_SPEED_RPM_1ST_BYTE;
 8009922:	4b25      	ldr	r3, [pc, #148]	@ (80099b8 <setMaxRPM+0xb0>)
 8009924:	2280      	movs	r2, #128	@ 0x80
 8009926:	705a      	strb	r2, [r3, #1]
	tx_data[2] = MAX_SPEED_RPM_2ND_BYTE;
 8009928:	4b23      	ldr	r3, [pc, #140]	@ (80099b8 <setMaxRPM+0xb0>)
 800992a:	2260      	movs	r2, #96	@ 0x60
 800992c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = MAX_SPEED_RPM_3RD_BYTE;
 800992e:	4b22      	ldr	r3, [pc, #136]	@ (80099b8 <setMaxRPM+0xb0>)
 8009930:	2200      	movs	r2, #0
 8009932:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = rpm;
 8009934:	4a20      	ldr	r2, [pc, #128]	@ (80099b8 <setMaxRPM+0xb0>)
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	7113      	strb	r3, [r2, #4]
	tx_data[5] = 0x00;
 800993a:	4b1f      	ldr	r3, [pc, #124]	@ (80099b8 <setMaxRPM+0xb0>)
 800993c:	2200      	movs	r2, #0
 800993e:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009940:	4b1d      	ldr	r3, [pc, #116]	@ (80099b8 <setMaxRPM+0xb0>)
 8009942:	2200      	movs	r2, #0
 8009944:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009946:	4b1c      	ldr	r3, [pc, #112]	@ (80099b8 <setMaxRPM+0xb0>)
 8009948:	2200      	movs	r2, #0
 800994a:	71da      	strb	r2, [r3, #7]
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 800994c:	4b1b      	ldr	r3, [pc, #108]	@ (80099bc <setMaxRPM+0xb4>)
 800994e:	4a1a      	ldr	r2, [pc, #104]	@ (80099b8 <setMaxRPM+0xb0>)
 8009950:	4918      	ldr	r1, [pc, #96]	@ (80099b4 <setMaxRPM+0xac>)
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fa f884 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <setMaxRPM+0x5a>
	{
		CAN_Error_Handler();
 800995e:	f7f8 f95b 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009962:	bf00      	nop
 8009964:	4b15      	ldr	r3, [pc, #84]	@ (80099bc <setMaxRPM+0xb4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7fa f948 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1f6      	bne.n	8009964 <setMaxRPM+0x5c>
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
	txHeader.StdId = LEFT_MOTOR;
 8009976:	4b0f      	ldr	r3, [pc, #60]	@ (80099b4 <setMaxRPM+0xac>)
 8009978:	f240 6202 	movw	r2, #1538	@ 0x602
 800997c:	601a      	str	r2, [r3, #0]
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 800997e:	4b0f      	ldr	r3, [pc, #60]	@ (80099bc <setMaxRPM+0xb4>)
 8009980:	4a0d      	ldr	r2, [pc, #52]	@ (80099b8 <setMaxRPM+0xb0>)
 8009982:	490c      	ldr	r1, [pc, #48]	@ (80099b4 <setMaxRPM+0xac>)
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fa f86b 	bl	8003a60 <HAL_CAN_AddTxMessage>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <setMaxRPM+0x8c>
	{
		CAN_Error_Handler();
 8009990:	f7f8 f942 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009994:	bf00      	nop
 8009996:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <setMaxRPM+0xb4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fa f92f 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1f6      	bne.n	8009996 <setMaxRPM+0x8e>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000213c 	.word	0x2000213c
 80099b8:	20002154 	.word	0x20002154
 80099bc:	20002138 	.word	0x20002138

080099c0 <calculateAccelDecel>:
	return (double)(rpm/9.549297);
}

/* Acceleration & Deceleration */
uint32_t calculateAccelDecel (uint32_t rev_per_sec_sqr)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	return (uint32_t)(rev_per_sec_sqr * 67.108864);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7f6 fd93 	bl	80004f4 <__aeabi_ui2d>
 80099ce:	a308      	add	r3, pc, #32	@ (adr r3, 80099f0 <calculateAccelDecel+0x30>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f6 fe08 	bl	80005e8 <__aeabi_dmul>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4610      	mov	r0, r2
 80099de:	4619      	mov	r1, r3
 80099e0:	f7f7 f8b2 	bl	8000b48 <__aeabi_d2uiz>
 80099e4:	4603      	mov	r3, r0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80099f4:	4050c6f7 	.word	0x4050c6f7

080099f8 <setAccel>:
void setAccel(CAN_HandleTypeDef *p_hcan1,uint32_t rev_per_sec_sqr)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
	uint32_t flag = calculateAccelDecel(rev_per_sec_sqr);
 8009a02:	6838      	ldr	r0, [r7, #0]
 8009a04:	f7ff ffdc 	bl	80099c0 <calculateAccelDecel>
 8009a08:	60f8      	str	r0, [r7, #12]
	transmitAccel(p_hcan1,flag);
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff fe43 	bl	8009698 <transmitAccel>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <setDecel>:
void setDecel(CAN_HandleTypeDef *p_hcan1,uint32_t rev_per_sec_sqr)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
	uint32_t flag = calculateAccelDecel(rev_per_sec_sqr);
 8009a24:	6838      	ldr	r0, [r7, #0]
 8009a26:	f7ff ffcb 	bl	80099c0 <calculateAccelDecel>
 8009a2a:	60f8      	str	r0, [r7, #12]
	transmitDecel(p_hcan1,flag);
 8009a2c:	68f9      	ldr	r1, [r7, #12]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fe94 	bl	800975c <transmitDecel>
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <setActualSpeedSamplingCycle>:

/* Speed Related functions */
void setActualSpeedSamplingCycle(CAN_HandleTypeDef *p_hcan1, uint16_t milliSec)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	807b      	strh	r3, [r7, #2]
	txHeader.StdId = RIGHT_MOTOR; 
 8009a48:	4b29      	ldr	r3, [pc, #164]	@ (8009af0 <setActualSpeedSamplingCycle+0xb4>)
 8009a4a:	f240 6201 	movw	r2, #1537	@ 0x601
 8009a4e:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_TWO_BYTE;
 8009a50:	4b28      	ldr	r3, [pc, #160]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a52:	222b      	movs	r2, #43	@ 0x2b
 8009a54:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = SAMPLE_CYCLE_ACTUAL_SPEED_1Byte;
 8009a56:	4b27      	ldr	r3, [pc, #156]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a58:	22f9      	movs	r2, #249	@ 0xf9
 8009a5a:	705a      	strb	r2, [r3, #1]
	tx_data[2] = SAMPLE_CYCLE_ACTUAL_SPEED_2Byte;
 8009a5c:	4b25      	ldr	r3, [pc, #148]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a5e:	2260      	movs	r2, #96	@ 0x60
 8009a60:	709a      	strb	r2, [r3, #2]
	tx_data[3] = SAMPLE_CYCLE_ACTUAL_SPEED_3Byte;
 8009a62:	4b24      	ldr	r3, [pc, #144]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a64:	221a      	movs	r2, #26
 8009a66:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = milliSec & 0xFF;
 8009a68:	887b      	ldrh	r3, [r7, #2]
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	4b21      	ldr	r3, [pc, #132]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a6e:	711a      	strb	r2, [r3, #4]
	tx_data[5] = (milliSec >> 8) & 0xFF;
 8009a70:	887b      	ldrh	r3, [r7, #2]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	4b1e      	ldr	r3, [pc, #120]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a7a:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009a82:	4b1c      	ldr	r3, [pc, #112]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	71da      	strb	r2, [r3, #7]
	
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009a88:	4b1b      	ldr	r3, [pc, #108]	@ (8009af8 <setActualSpeedSamplingCycle+0xbc>)
 8009a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009a8c:	4918      	ldr	r1, [pc, #96]	@ (8009af0 <setActualSpeedSamplingCycle+0xb4>)
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f9 ffe6 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <setActualSpeedSamplingCycle+0x62>
	{
		CAN_Error_Handler();
 8009a9a:	f7f8 f8bd 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009a9e:	bf00      	nop
 8009aa0:	4b15      	ldr	r3, [pc, #84]	@ (8009af8 <setActualSpeedSamplingCycle+0xbc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fa f8aa 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f6      	bne.n	8009aa0 <setActualSpeedSamplingCycle+0x64>
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	// LEFT
	txHeader.StdId = LEFT_MOTOR;
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8009af0 <setActualSpeedSamplingCycle+0xb4>)
 8009ab4:	f240 6202 	movw	r2, #1538	@ 0x602
 8009ab8:	601a      	str	r2, [r3, #0]
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009aba:	4b0f      	ldr	r3, [pc, #60]	@ (8009af8 <setActualSpeedSamplingCycle+0xbc>)
 8009abc:	4a0d      	ldr	r2, [pc, #52]	@ (8009af4 <setActualSpeedSamplingCycle+0xb8>)
 8009abe:	490c      	ldr	r1, [pc, #48]	@ (8009af0 <setActualSpeedSamplingCycle+0xb4>)
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7f9 ffcd 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <setActualSpeedSamplingCycle+0x94>
	{
		CAN_Error_Handler();
 8009acc:	f7f8 f8a4 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009ad0:	bf00      	nop
 8009ad2:	4b09      	ldr	r3, [pc, #36]	@ (8009af8 <setActualSpeedSamplingCycle+0xbc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7fa f891 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1f6      	bne.n	8009ad2 <setActualSpeedSamplingCycle+0x96>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	2000213c 	.word	0x2000213c
 8009af4:	20002154 	.word	0x20002154
 8009af8:	20002138 	.word	0x20002138

08009afc <getActualRpmRight>:

void getActualRpmRight(CAN_HandleTypeDef *p_hcan1)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	txHeader.StdId = RIGHT_MOTOR; 
 8009b04:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <getActualRpmRight+0x54>)
 8009b06:	f240 6201 	movw	r2, #1537	@ 0x601
 8009b0a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_REQUEST;
 8009b0c:	4b11      	ldr	r3, [pc, #68]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b0e:	2240      	movs	r2, #64	@ 0x40
 8009b10:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = ACTUAL_SPEED_RPM_1Byte;
 8009b12:	4b10      	ldr	r3, [pc, #64]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b14:	22f9      	movs	r2, #249	@ 0xf9
 8009b16:	705a      	strb	r2, [r3, #1]
	tx_data[2] = ACTUAL_SPEED_RPM_2Byte;
 8009b18:	4b0e      	ldr	r3, [pc, #56]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b1a:	2260      	movs	r2, #96	@ 0x60
 8009b1c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = ACTUAL_SPEED_RPM_3Byte;
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b20:	2218      	movs	r2, #24
 8009b22:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = 0x00;
 8009b24:	4b0b      	ldr	r3, [pc, #44]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0x00;
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009b36:	4b07      	ldr	r3, [pc, #28]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
 8009b3c:	4b06      	ldr	r3, [pc, #24]	@ (8009b58 <getActualRpmRight+0x5c>)
 8009b3e:	4a05      	ldr	r2, [pc, #20]	@ (8009b54 <getActualRpmRight+0x58>)
 8009b40:	4903      	ldr	r1, [pc, #12]	@ (8009b50 <getActualRpmRight+0x54>)
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7f9 ff8c 	bl	8003a60 <HAL_CAN_AddTxMessage>
	// rx cmd 60 ok, 80 failed;
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	2000213c 	.word	0x2000213c
 8009b54:	20002154 	.word	0x20002154
 8009b58:	20002138 	.word	0x20002138

08009b5c <getActualRpmLeft>:
void getActualRpmLeft(CAN_HandleTypeDef *p_hcan1)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	txHeader.StdId = LEFT_MOTOR;
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <getActualRpmLeft+0x54>)
 8009b66:	f240 6202 	movw	r2, #1538	@ 0x602
 8009b6a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_REQUEST;
 8009b6c:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b6e:	2240      	movs	r2, #64	@ 0x40
 8009b70:	701a      	strb	r2, [r3, #0]
	
	tx_data[1] = ACTUAL_SPEED_RPM_1Byte;
 8009b72:	4b10      	ldr	r3, [pc, #64]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b74:	22f9      	movs	r2, #249	@ 0xf9
 8009b76:	705a      	strb	r2, [r3, #1]
	tx_data[2] = ACTUAL_SPEED_RPM_2Byte;
 8009b78:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b7a:	2260      	movs	r2, #96	@ 0x60
 8009b7c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = ACTUAL_SPEED_RPM_3Byte;
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b80:	2218      	movs	r2, #24
 8009b82:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = 0x00;
 8009b84:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0x00;
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009b90:	4b08      	ldr	r3, [pc, #32]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009b96:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox);
 8009b9c:	4b06      	ldr	r3, [pc, #24]	@ (8009bb8 <getActualRpmLeft+0x5c>)
 8009b9e:	4a05      	ldr	r2, [pc, #20]	@ (8009bb4 <getActualRpmLeft+0x58>)
 8009ba0:	4903      	ldr	r1, [pc, #12]	@ (8009bb0 <getActualRpmLeft+0x54>)
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7f9 ff5c 	bl	8003a60 <HAL_CAN_AddTxMessage>
	// rx cmd 60 ok, 80 failed;
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	2000213c 	.word	0x2000213c
 8009bb4:	20002154 	.word	0x20002154
 8009bb8:	20002138 	.word	0x20002138

08009bbc <disableMotors>:

void disableMotors(CAN_HandleTypeDef *p_hcan1)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	/* Servo Stop */
	enableMotorLeft(p_hcan1,CONTROL_WORD_DISABLE);
 8009bc4:	2106      	movs	r1, #6
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fd1e 	bl	8009608 <enableMotorLeft>
	//-->delay_us(200);	
	enableMotorRight(p_hcan1,CONTROL_WORD_DISABLE);
 8009bcc:	2106      	movs	r1, #6
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff fcd2 	bl	8009578 <enableMotorRight>
	//-->delay_us(200);
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <clearMotors>:
void clearMotors(CAN_HandleTypeDef *p_hcan1)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	enableMotorLeft(p_hcan1,CONTROL_WORD_CLEAR);
 8009be4:	2186      	movs	r1, #134	@ 0x86
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff fd0e 	bl	8009608 <enableMotorLeft>
	//-->delay_us(200);	
	enableMotorRight(p_hcan1,CONTROL_WORD_CLEAR);
 8009bec:	2186      	movs	r1, #134	@ 0x86
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fcc2 	bl	8009578 <enableMotorRight>
	//-->delay_us(200);
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <clearActualPostion>:
/* Position Related Functions */
void clearActualPostion(CAN_HandleTypeDef *p_hcan1)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	txHeader.StdId = RIGHT_MOTOR;   
 8009c04:	4b27      	ldr	r3, [pc, #156]	@ (8009ca4 <clearActualPostion+0xa8>)
 8009c06:	f240 6201 	movw	r2, #1537	@ 0x601
 8009c0a:	601a      	str	r2, [r3, #0]
	tx_data[0] = SEND_ONE_BYTE;
 8009c0c:	4b26      	ldr	r3, [pc, #152]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c0e:	222f      	movs	r2, #47	@ 0x2f
 8009c10:	701a      	strb	r2, [r3, #0]
	tx_data[1] = CLEAR_ACTUAL_POSITION_1Byte;
 8009c12:	4b25      	ldr	r3, [pc, #148]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c14:	227c      	movs	r2, #124	@ 0x7c
 8009c16:	705a      	strb	r2, [r3, #1]
	tx_data[2] = CLEAR_ACTUAL_POSITION_2Byte;
 8009c18:	4b23      	ldr	r3, [pc, #140]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c1a:	2260      	movs	r2, #96	@ 0x60
 8009c1c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = CLEAR_ACTUAL_POSITION_3Byte;
 8009c1e:	4b22      	ldr	r3, [pc, #136]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c20:	2202      	movs	r2, #2
 8009c22:	70da      	strb	r2, [r3, #3]
	
	tx_data[4] = 0x01;
 8009c24:	4b20      	ldr	r3, [pc, #128]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0x00;
 8009c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0x00;
 8009c30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0x00;
 8009c36:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	71da      	strb	r2, [r3, #7]
	
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8009cac <clearActualPostion+0xb0>)
 8009c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c40:	4918      	ldr	r1, [pc, #96]	@ (8009ca4 <clearActualPostion+0xa8>)
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7f9 ff0c 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <clearActualPostion+0x56>
	{
		CAN_Error_Handler();
 8009c4e:	f7f7 ffe3 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009c52:	bf00      	nop
 8009c54:	4b15      	ldr	r3, [pc, #84]	@ (8009cac <clearActualPostion+0xb0>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f9 ffd0 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1f6      	bne.n	8009c54 <clearActualPostion+0x58>
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
	
	txHeader.StdId = LEFT_MOTOR;
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <clearActualPostion+0xa8>)
 8009c68:	f240 6202 	movw	r2, #1538	@ 0x602
 8009c6c:	601a      	str	r2, [r3, #0]
	#ifdef CAN_DEBUG
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
	#endif
	
	// rx cmd 60 ok, 80 failed;
	if ( HAL_CAN_AddTxMessage(p_hcan1, &txHeader, tx_data, &txMailbox) != HAL_OK )
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009cac <clearActualPostion+0xb0>)
 8009c70:	4a0d      	ldr	r2, [pc, #52]	@ (8009ca8 <clearActualPostion+0xac>)
 8009c72:	490c      	ldr	r1, [pc, #48]	@ (8009ca4 <clearActualPostion+0xa8>)
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7f9 fef3 	bl	8003a60 <HAL_CAN_AddTxMessage>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <clearActualPostion+0x88>
	{
		CAN_Error_Handler();
 8009c80:	f7f7 ffca 	bl	8001c18 <CAN_Error_Handler>
	}
	
	// Polling ( Continuous checking ) for Transmit status
	while( HAL_CAN_IsTxMessagePending(p_hcan1, txMailbox) )
 8009c84:	bf00      	nop
 8009c86:	4b09      	ldr	r3, [pc, #36]	@ (8009cac <clearActualPostion+0xb0>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7f9 ffb7 	bl	8003c00 <HAL_CAN_IsTxMessagePending>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f6      	bne.n	8009c86 <clearActualPostion+0x8a>
	{
		#ifdef CAN_DEBUG
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port,GREEN_LED_Pin);
		#endif
	}
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	2000213c 	.word	0x2000213c
 8009ca8:	20002154 	.word	0x20002154
 8009cac:	20002138 	.word	0x20002138

08009cb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cbc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009cc0:	f7f9 f828 	bl	8002d14 <USBD_static_malloc>
 8009cc4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	32b0      	adds	r2, #176	@ 0xb0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e0d4      	b.n	8009e8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ce0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f002 ffa9 	bl	800cc3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32b0      	adds	r2, #176	@ 0xb0
 8009cf6:	68f9      	ldr	r1, [r7, #12]
 8009cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	32b0      	adds	r2, #176	@ 0xb0
 8009d06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7c1b      	ldrb	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d138      	bne.n	8009d8a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d18:	4b5e      	ldr	r3, [pc, #376]	@ (8009e94 <USBD_CDC_Init+0x1e4>)
 8009d1a:	7819      	ldrb	r1, [r3, #0]
 8009d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d20:	2202      	movs	r2, #2
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7f8 fed3 	bl	8002ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d28:	4b5a      	ldr	r3, [pc, #360]	@ (8009e94 <USBD_CDC_Init+0x1e4>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3324      	adds	r3, #36	@ 0x24
 8009d3e:	2201      	movs	r2, #1
 8009d40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d42:	4b55      	ldr	r3, [pc, #340]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009d44:	7819      	ldrb	r1, [r3, #0]
 8009d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7f8 febe 	bl	8002ace <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d52:	4b51      	ldr	r3, [pc, #324]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 020f 	and.w	r2, r3, #15
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	440b      	add	r3, r1
 8009d66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8009e9c <USBD_CDC_Init+0x1ec>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	f003 020f 	and.w	r2, r3, #15
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	3326      	adds	r3, #38	@ 0x26
 8009d84:	2210      	movs	r2, #16
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	e035      	b.n	8009df6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d8a:	4b42      	ldr	r3, [pc, #264]	@ (8009e94 <USBD_CDC_Init+0x1e4>)
 8009d8c:	7819      	ldrb	r1, [r3, #0]
 8009d8e:	2340      	movs	r3, #64	@ 0x40
 8009d90:	2202      	movs	r2, #2
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7f8 fe9b 	bl	8002ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d98:	4b3e      	ldr	r3, [pc, #248]	@ (8009e94 <USBD_CDC_Init+0x1e4>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 020f 	and.w	r2, r3, #15
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	3324      	adds	r3, #36	@ 0x24
 8009dae:	2201      	movs	r2, #1
 8009db0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009db2:	4b39      	ldr	r3, [pc, #228]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009db4:	7819      	ldrb	r1, [r3, #0]
 8009db6:	2340      	movs	r3, #64	@ 0x40
 8009db8:	2202      	movs	r2, #2
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7f8 fe87 	bl	8002ace <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009dc0:	4b35      	ldr	r3, [pc, #212]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	f003 020f 	and.w	r2, r3, #15
 8009dc8:	6879      	ldr	r1, [r7, #4]
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	440b      	add	r3, r1
 8009dd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dd8:	2201      	movs	r2, #1
 8009dda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8009e9c <USBD_CDC_Init+0x1ec>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 020f 	and.w	r2, r3, #15
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	3326      	adds	r3, #38	@ 0x26
 8009df2:	2210      	movs	r2, #16
 8009df4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009df6:	4b29      	ldr	r3, [pc, #164]	@ (8009e9c <USBD_CDC_Init+0x1ec>)
 8009df8:	7819      	ldrb	r1, [r3, #0]
 8009dfa:	2308      	movs	r3, #8
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7f8 fe65 	bl	8002ace <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e04:	4b25      	ldr	r3, [pc, #148]	@ (8009e9c <USBD_CDC_Init+0x1ec>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	3324      	adds	r3, #36	@ 0x24
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	33b0      	adds	r3, #176	@ 0xb0
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009e54:	2302      	movs	r3, #2
 8009e56:	e018      	b.n	8009e8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7c1b      	ldrb	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e60:	4b0d      	ldr	r3, [pc, #52]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009e62:	7819      	ldrb	r1, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7f8 ff1c 	bl	8002cac <USBD_LL_PrepareReceive>
 8009e74:	e008      	b.n	8009e88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e76:	4b08      	ldr	r3, [pc, #32]	@ (8009e98 <USBD_CDC_Init+0x1e8>)
 8009e78:	7819      	ldrb	r1, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e80:	2340      	movs	r3, #64	@ 0x40
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7f8 ff12 	bl	8002cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200000fb 	.word	0x200000fb
 8009e98:	200000fc 	.word	0x200000fc
 8009e9c:	200000fd 	.word	0x200000fd

08009ea0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009eac:	4b3a      	ldr	r3, [pc, #232]	@ (8009f98 <USBD_CDC_DeInit+0xf8>)
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7f8 fe31 	bl	8002b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009eb8:	4b37      	ldr	r3, [pc, #220]	@ (8009f98 <USBD_CDC_DeInit+0xf8>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f003 020f 	and.w	r2, r3, #15
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	3324      	adds	r3, #36	@ 0x24
 8009ece:	2200      	movs	r2, #0
 8009ed0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009ed2:	4b32      	ldr	r3, [pc, #200]	@ (8009f9c <USBD_CDC_DeInit+0xfc>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7f8 fe1e 	bl	8002b1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ede:	4b2f      	ldr	r3, [pc, #188]	@ (8009f9c <USBD_CDC_DeInit+0xfc>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	f003 020f 	and.w	r2, r3, #15
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009efa:	4b29      	ldr	r3, [pc, #164]	@ (8009fa0 <USBD_CDC_DeInit+0x100>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7f8 fe0a 	bl	8002b1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f06:	4b26      	ldr	r3, [pc, #152]	@ (8009fa0 <USBD_CDC_DeInit+0x100>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 020f 	and.w	r2, r3, #15
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	3324      	adds	r3, #36	@ 0x24
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f20:	4b1f      	ldr	r3, [pc, #124]	@ (8009fa0 <USBD_CDC_DeInit+0x100>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	f003 020f 	and.w	r2, r3, #15
 8009f28:	6879      	ldr	r1, [r7, #4]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	440b      	add	r3, r1
 8009f34:	3326      	adds	r3, #38	@ 0x26
 8009f36:	2200      	movs	r2, #0
 8009f38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	32b0      	adds	r2, #176	@ 0xb0
 8009f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01f      	beq.n	8009f8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	33b0      	adds	r3, #176	@ 0xb0
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	32b0      	adds	r2, #176	@ 0xb0
 8009f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7f8 fede 	bl	8002d30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	32b0      	adds	r2, #176	@ 0xb0
 8009f7e:	2100      	movs	r1, #0
 8009f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200000fb 	.word	0x200000fb
 8009f9c:	200000fc 	.word	0x200000fc
 8009fa0:	200000fd 	.word	0x200000fd

08009fa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	32b0      	adds	r2, #176	@ 0xb0
 8009fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e0bf      	b.n	800a154 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d050      	beq.n	800a082 <USBD_CDC_Setup+0xde>
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	f040 80af 	bne.w	800a144 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	88db      	ldrh	r3, [r3, #6]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d03a      	beq.n	800a064 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	b25b      	sxtb	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	da1b      	bge.n	800a030 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	33b0      	adds	r3, #176	@ 0xb0
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a00e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	88d2      	ldrh	r2, [r2, #6]
 800a014:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88db      	ldrh	r3, [r3, #6]
 800a01a:	2b07      	cmp	r3, #7
 800a01c:	bf28      	it	cs
 800a01e:	2307      	movcs	r3, #7
 800a020:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	89fa      	ldrh	r2, [r7, #14]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 fd87 	bl	800bb3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a02e:	e090      	b.n	800a152 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	785a      	ldrb	r2, [r3, #1]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	88db      	ldrh	r3, [r3, #6]
 800a03e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a040:	d803      	bhi.n	800a04a <USBD_CDC_Setup+0xa6>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	88db      	ldrh	r3, [r3, #6]
 800a046:	b2da      	uxtb	r2, r3
 800a048:	e000      	b.n	800a04c <USBD_CDC_Setup+0xa8>
 800a04a:	2240      	movs	r2, #64	@ 0x40
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a052:	6939      	ldr	r1, [r7, #16]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a05a:	461a      	mov	r2, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 fd99 	bl	800bb94 <USBD_CtlPrepareRx>
      break;
 800a062:	e076      	b.n	800a152 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	33b0      	adds	r3, #176	@ 0xb0
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	7850      	ldrb	r0, [r2, #1]
 800a07a:	2200      	movs	r2, #0
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	4798      	blx	r3
      break;
 800a080:	e067      	b.n	800a152 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	2b0b      	cmp	r3, #11
 800a088:	d851      	bhi.n	800a12e <USBD_CDC_Setup+0x18a>
 800a08a:	a201      	add	r2, pc, #4	@ (adr r2, 800a090 <USBD_CDC_Setup+0xec>)
 800a08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a090:	0800a0c1 	.word	0x0800a0c1
 800a094:	0800a13d 	.word	0x0800a13d
 800a098:	0800a12f 	.word	0x0800a12f
 800a09c:	0800a12f 	.word	0x0800a12f
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a12f 	.word	0x0800a12f
 800a0a8:	0800a12f 	.word	0x0800a12f
 800a0ac:	0800a12f 	.word	0x0800a12f
 800a0b0:	0800a12f 	.word	0x0800a12f
 800a0b4:	0800a12f 	.word	0x0800a12f
 800a0b8:	0800a0eb 	.word	0x0800a0eb
 800a0bc:	0800a115 	.word	0x0800a115
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d107      	bne.n	800a0dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a0cc:	f107 030a 	add.w	r3, r7, #10
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f001 fd31 	bl	800bb3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0da:	e032      	b.n	800a142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fcbb 	bl	800ba5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	75fb      	strb	r3, [r7, #23]
          break;
 800a0e8:	e02b      	b.n	800a142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d107      	bne.n	800a106 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0f6:	f107 030d 	add.w	r3, r7, #13
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 fd1c 	bl	800bb3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a104:	e01d      	b.n	800a142 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fca6 	bl	800ba5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a10e:	2303      	movs	r3, #3
 800a110:	75fb      	strb	r3, [r7, #23]
          break;
 800a112:	e016      	b.n	800a142 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d00f      	beq.n	800a140 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 fc99 	bl	800ba5a <USBD_CtlError>
            ret = USBD_FAIL;
 800a128:	2303      	movs	r3, #3
 800a12a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a12c:	e008      	b.n	800a140 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fc92 	bl	800ba5a <USBD_CtlError>
          ret = USBD_FAIL;
 800a136:	2303      	movs	r3, #3
 800a138:	75fb      	strb	r3, [r7, #23]
          break;
 800a13a:	e002      	b.n	800a142 <USBD_CDC_Setup+0x19e>
          break;
 800a13c:	bf00      	nop
 800a13e:	e008      	b.n	800a152 <USBD_CDC_Setup+0x1ae>
          break;
 800a140:	bf00      	nop
      }
      break;
 800a142:	e006      	b.n	800a152 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fc87 	bl	800ba5a <USBD_CtlError>
      ret = USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	75fb      	strb	r3, [r7, #23]
      break;
 800a150:	bf00      	nop
  }

  return (uint8_t)ret;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a16e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	32b0      	adds	r2, #176	@ 0xb0
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a182:	2303      	movs	r3, #3
 800a184:	e065      	b.n	800a252 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	32b0      	adds	r2, #176	@ 0xb0
 800a190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a194:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	f003 020f 	and.w	r2, r3, #15
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3318      	adds	r3, #24
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d02f      	beq.n	800a210 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	f003 020f 	and.w	r2, r3, #15
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	3318      	adds	r3, #24
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	78fb      	ldrb	r3, [r7, #3]
 800a1c8:	f003 010f 	and.w	r1, r3, #15
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	00db      	lsls	r3, r3, #3
 800a1d2:	440b      	add	r3, r1
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4403      	add	r3, r0
 800a1d8:	331c      	adds	r3, #28
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1e0:	fb01 f303 	mul.w	r3, r1, r3
 800a1e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d112      	bne.n	800a210 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	f003 020f 	and.w	r2, r3, #15
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	3318      	adds	r3, #24
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a202:	78f9      	ldrb	r1, [r7, #3]
 800a204:	2300      	movs	r3, #0
 800a206:	2200      	movs	r2, #0
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7f8 fd2e 	bl	8002c6a <USBD_LL_Transmit>
 800a20e:	e01f      	b.n	800a250 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2200      	movs	r2, #0
 800a214:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	33b0      	adds	r3, #176	@ 0xb0
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d010      	beq.n	800a250 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	33b0      	adds	r3, #176	@ 0xb0
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a24c:	78fa      	ldrb	r2, [r7, #3]
 800a24e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	32b0      	adds	r2, #176	@ 0xb0
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	32b0      	adds	r2, #176	@ 0xb0
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	e01a      	b.n	800a2c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7f8 fd2c 	bl	8002cee <USBD_LL_GetRxDataSize>
 800a296:	4602      	mov	r2, r0
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	33b0      	adds	r3, #176	@ 0xb0
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	32b0      	adds	r2, #176	@ 0xb0
 800a2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e024      	b.n	800a336 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	33b0      	adds	r3, #176	@ 0xb0
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d019      	beq.n	800a334 <USBD_CDC_EP0_RxReady+0x6a>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a306:	2bff      	cmp	r3, #255	@ 0xff
 800a308:	d014      	beq.n	800a334 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	33b0      	adds	r3, #176	@ 0xb0
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a322:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a32a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	22ff      	movs	r2, #255	@ 0xff
 800a330:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a348:	2182      	movs	r1, #130	@ 0x82
 800a34a:	4818      	ldr	r0, [pc, #96]	@ (800a3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a34c:	f000 fd4f 	bl	800adee <USBD_GetEpDesc>
 800a350:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a352:	2101      	movs	r1, #1
 800a354:	4815      	ldr	r0, [pc, #84]	@ (800a3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a356:	f000 fd4a 	bl	800adee <USBD_GetEpDesc>
 800a35a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a35c:	2181      	movs	r1, #129	@ 0x81
 800a35e:	4813      	ldr	r0, [pc, #76]	@ (800a3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a360:	f000 fd45 	bl	800adee <USBD_GetEpDesc>
 800a364:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2210      	movs	r2, #16
 800a370:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d006      	beq.n	800a386 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a380:	711a      	strb	r2, [r3, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d006      	beq.n	800a39a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a394:	711a      	strb	r2, [r3, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2243      	movs	r2, #67	@ 0x43
 800a39e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3a0:	4b02      	ldr	r3, [pc, #8]	@ (800a3ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200000b8 	.word	0x200000b8

0800a3b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3b8:	2182      	movs	r1, #130	@ 0x82
 800a3ba:	4818      	ldr	r0, [pc, #96]	@ (800a41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3bc:	f000 fd17 	bl	800adee <USBD_GetEpDesc>
 800a3c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	4815      	ldr	r0, [pc, #84]	@ (800a41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3c6:	f000 fd12 	bl	800adee <USBD_GetEpDesc>
 800a3ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3cc:	2181      	movs	r1, #129	@ 0x81
 800a3ce:	4813      	ldr	r0, [pc, #76]	@ (800a41c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a3d0:	f000 fd0d 	bl	800adee <USBD_GetEpDesc>
 800a3d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2210      	movs	r2, #16
 800a3e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	711a      	strb	r2, [r3, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f042 0202 	orr.w	r2, r2, #2
 800a3f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d006      	beq.n	800a40a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	711a      	strb	r2, [r3, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f042 0202 	orr.w	r2, r2, #2
 800a408:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2243      	movs	r2, #67	@ 0x43
 800a40e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a410:	4b02      	ldr	r3, [pc, #8]	@ (800a41c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	200000b8 	.word	0x200000b8

0800a420 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a428:	2182      	movs	r1, #130	@ 0x82
 800a42a:	4818      	ldr	r0, [pc, #96]	@ (800a48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a42c:	f000 fcdf 	bl	800adee <USBD_GetEpDesc>
 800a430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a432:	2101      	movs	r1, #1
 800a434:	4815      	ldr	r0, [pc, #84]	@ (800a48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a436:	f000 fcda 	bl	800adee <USBD_GetEpDesc>
 800a43a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a43c:	2181      	movs	r1, #129	@ 0x81
 800a43e:	4813      	ldr	r0, [pc, #76]	@ (800a48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a440:	f000 fcd5 	bl	800adee <USBD_GetEpDesc>
 800a444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d002      	beq.n	800a452 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2210      	movs	r2, #16
 800a450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a460:	711a      	strb	r2, [r3, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a474:	711a      	strb	r2, [r3, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2243      	movs	r2, #67	@ 0x43
 800a47e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a480:	4b02      	ldr	r3, [pc, #8]	@ (800a48c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200000b8 	.word	0x200000b8

0800a490 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	220a      	movs	r2, #10
 800a49c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a49e:	4b03      	ldr	r3, [pc, #12]	@ (800a4ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	20000074 	.word	0x20000074

0800a4b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e009      	b.n	800a4d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	33b0      	adds	r3, #176	@ 0xb0
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	32b0      	adds	r2, #176	@ 0xb0
 800a4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d101      	bne.n	800a50a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a506:	2303      	movs	r3, #3
 800a508:	e008      	b.n	800a51c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	32b0      	adds	r2, #176	@ 0xb0
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	e004      	b.n	800a556 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	32b0      	adds	r2, #176	@ 0xb0
 800a576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a57c:	2301      	movs	r3, #1
 800a57e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a586:	2303      	movs	r3, #3
 800a588:	e025      	b.n	800a5d6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a590:	2b00      	cmp	r3, #0
 800a592:	d11f      	bne.n	800a5d4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2201      	movs	r2, #1
 800a598:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a59c:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <USBD_CDC_TransmitPacket+0x7c>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f003 020f 	and.w	r2, r3, #15
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4403      	add	r3, r0
 800a5b6:	3318      	adds	r3, #24
 800a5b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a5ba:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <USBD_CDC_TransmitPacket+0x7c>)
 800a5bc:	7819      	ldrb	r1, [r3, #0]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7f8 fb4d 	bl	8002c6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200000fb 	.word	0x200000fb

0800a5e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32b0      	adds	r2, #176	@ 0xb0
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32b0      	adds	r2, #176	@ 0xb0
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a60e:	2303      	movs	r3, #3
 800a610:	e018      	b.n	800a644 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7c1b      	ldrb	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a61a:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <USBD_CDC_ReceivePacket+0x68>)
 800a61c:	7819      	ldrb	r1, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7f8 fb3f 	bl	8002cac <USBD_LL_PrepareReceive>
 800a62e:	e008      	b.n	800a642 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a630:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <USBD_CDC_ReceivePacket+0x68>)
 800a632:	7819      	ldrb	r1, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a63a:	2340      	movs	r3, #64	@ 0x40
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7f8 fb35 	bl	8002cac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	200000fc 	.word	0x200000fc

0800a650 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a664:	2303      	movs	r3, #3
 800a666:	e01f      	b.n	800a6a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	79fa      	ldrb	r2, [r7, #7]
 800a69a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7f8 f9af 	bl	8002a00 <USBD_LL_Init>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e025      	b.n	800a714 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32ae      	adds	r2, #174	@ 0xae
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00f      	beq.n	800a704 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32ae      	adds	r2, #174	@ 0xae
 800a6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	f107 020e 	add.w	r2, r7, #14
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f8 f9b7 	bl	8002a98 <USBD_LL_Start>
 800a72a:	4603      	mov	r3, r0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a73c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a760:	2b00      	cmp	r3, #0
 800a762:	d009      	beq.n	800a778 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	4611      	mov	r1, r2
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a778:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	4611      	mov	r1, r2
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	4798      	blx	r3
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f001 f90c 	bl	800b9e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a7dc:	461a      	mov	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7ea:	f003 031f 	and.w	r3, r3, #31
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d01a      	beq.n	800a828 <USBD_LL_SetupStage+0x72>
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d822      	bhi.n	800a83c <USBD_LL_SetupStage+0x86>
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <USBD_LL_SetupStage+0x4a>
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d00a      	beq.n	800a814 <USBD_LL_SetupStage+0x5e>
 800a7fe:	e01d      	b.n	800a83c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fb63 	bl	800aed4 <USBD_StdDevReq>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
      break;
 800a812:	e020      	b.n	800a856 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fbcb 	bl	800afb8 <USBD_StdItfReq>
 800a822:	4603      	mov	r3, r0
 800a824:	73fb      	strb	r3, [r7, #15]
      break;
 800a826:	e016      	b.n	800a856 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fc2d 	bl	800b090 <USBD_StdEPReq>
 800a836:	4603      	mov	r3, r0
 800a838:	73fb      	strb	r3, [r7, #15]
      break;
 800a83a:	e00c      	b.n	800a856 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a842:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a846:	b2db      	uxtb	r3, r3
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7f8 f984 	bl	8002b58 <USBD_LL_StallEP>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
      break;
 800a854:	bf00      	nop
  }

  return ret;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	460b      	mov	r3, r1
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d16e      	bne.n	800a956 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a87e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a886:	2b03      	cmp	r3, #3
 800a888:	f040 8098 	bne.w	800a9bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	429a      	cmp	r2, r3
 800a896:	d913      	bls.n	800a8c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	1ad2      	subs	r2, r2, r3
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	bf28      	it	cs
 800a8b2:	4613      	movcs	r3, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f001 f988 	bl	800bbce <USBD_CtlContinueRx>
 800a8be:	e07d      	b.n	800a9bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a8c6:	f003 031f 	and.w	r3, r3, #31
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d014      	beq.n	800a8f8 <USBD_LL_DataOutStage+0x98>
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d81d      	bhi.n	800a90e <USBD_LL_DataOutStage+0xae>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <USBD_LL_DataOutStage+0x7c>
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d003      	beq.n	800a8e2 <USBD_LL_DataOutStage+0x82>
 800a8da:	e018      	b.n	800a90e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	75bb      	strb	r3, [r7, #22]
            break;
 800a8e0:	e018      	b.n	800a914 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 fa64 	bl	800adba <USBD_CoreFindIF>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75bb      	strb	r3, [r7, #22]
            break;
 800a8f6:	e00d      	b.n	800a914 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	4619      	mov	r1, r3
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fa66 	bl	800add4 <USBD_CoreFindEP>
 800a908:	4603      	mov	r3, r0
 800a90a:	75bb      	strb	r3, [r7, #22]
            break;
 800a90c:	e002      	b.n	800a914 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	75bb      	strb	r3, [r7, #22]
            break;
 800a912:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a914:	7dbb      	ldrb	r3, [r7, #22]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d119      	bne.n	800a94e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b03      	cmp	r3, #3
 800a924:	d113      	bne.n	800a94e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a926:	7dba      	ldrb	r2, [r7, #22]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	32ae      	adds	r2, #174	@ 0xae
 800a92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00b      	beq.n	800a94e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a936:	7dba      	ldrb	r2, [r7, #22]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a93e:	7dba      	ldrb	r2, [r7, #22]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	32ae      	adds	r2, #174	@ 0xae
 800a944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 f94e 	bl	800bbf0 <USBD_CtlSendStatus>
 800a954:	e032      	b.n	800a9bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a956:	7afb      	ldrb	r3, [r7, #11]
 800a958:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	4619      	mov	r1, r3
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fa37 	bl	800add4 <USBD_CoreFindEP>
 800a966:	4603      	mov	r3, r0
 800a968:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a96a:	7dbb      	ldrb	r3, [r7, #22]
 800a96c:	2bff      	cmp	r3, #255	@ 0xff
 800a96e:	d025      	beq.n	800a9bc <USBD_LL_DataOutStage+0x15c>
 800a970:	7dbb      	ldrb	r3, [r7, #22]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d122      	bne.n	800a9bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d117      	bne.n	800a9b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a982:	7dba      	ldrb	r2, [r7, #22]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	32ae      	adds	r2, #174	@ 0xae
 800a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00f      	beq.n	800a9b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a992:	7dba      	ldrb	r2, [r7, #22]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a99a:	7dba      	ldrb	r2, [r7, #22]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	32ae      	adds	r2, #174	@ 0xae
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	7afa      	ldrb	r2, [r7, #11]
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	e000      	b.n	800a9be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b086      	sub	sp, #24
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d16f      	bne.n	800aaba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3314      	adds	r3, #20
 800a9de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d15a      	bne.n	800aaa0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d914      	bls.n	800aa20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f001 f8b0 	bl	800bb72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa12:	2300      	movs	r3, #0
 800aa14:	2200      	movs	r2, #0
 800aa16:	2100      	movs	r1, #0
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7f8 f947 	bl	8002cac <USBD_LL_PrepareReceive>
 800aa1e:	e03f      	b.n	800aaa0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	68da      	ldr	r2, [r3, #12]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d11c      	bne.n	800aa66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d316      	bcc.n	800aa66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d20f      	bcs.n	800aa66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f001 f891 	bl	800bb72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7f8 f924 	bl	8002cac <USBD_LL_PrepareReceive>
 800aa64:	e01c      	b.n	800aaa0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d10f      	bne.n	800aa92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa92:	2180      	movs	r1, #128	@ 0x80
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7f8 f85f 	bl	8002b58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f001 f8bb 	bl	800bc16 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d03a      	beq.n	800ab20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff fe42 	bl	800a734 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aab8:	e032      	b.n	800ab20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aaba:	7afb      	ldrb	r3, [r7, #11]
 800aabc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 f985 	bl	800add4 <USBD_CoreFindEP>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	2bff      	cmp	r3, #255	@ 0xff
 800aad2:	d025      	beq.n	800ab20 <USBD_LL_DataInStage+0x15a>
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d122      	bne.n	800ab20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d11c      	bne.n	800ab20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aae6:	7dfa      	ldrb	r2, [r7, #23]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	32ae      	adds	r2, #174	@ 0xae
 800aaec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d014      	beq.n	800ab20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aaf6:	7dfa      	ldrb	r2, [r7, #23]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aafe:	7dfa      	ldrb	r2, [r7, #23]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	32ae      	adds	r2, #174	@ 0xae
 800ab04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	7afa      	ldrb	r2, [r7, #11]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	4798      	blx	r3
 800ab12:	4603      	mov	r3, r0
 800ab14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab16:	7dbb      	ldrb	r3, [r7, #22]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab1c:	7dbb      	ldrb	r3, [r7, #22]
 800ab1e:	e000      	b.n	800ab22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d014      	beq.n	800ab90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6852      	ldr	r2, [r2, #4]
 800ab7e:	b2d2      	uxtb	r2, r2
 800ab80:	4611      	mov	r1, r2
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab90:	2340      	movs	r3, #64	@ 0x40
 800ab92:	2200      	movs	r2, #0
 800ab94:	2100      	movs	r1, #0
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7f7 ff99 	bl	8002ace <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2240      	movs	r2, #64	@ 0x40
 800aba8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abac:	2340      	movs	r3, #64	@ 0x40
 800abae:	2200      	movs	r2, #0
 800abb0:	2180      	movs	r1, #128	@ 0x80
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7f7 ff8b 	bl	8002ace <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2240      	movs	r2, #64	@ 0x40
 800abc2:	621a      	str	r2, [r3, #32]

  return ret;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	78fa      	ldrb	r2, [r7, #3]
 800abde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d006      	beq.n	800ac10 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2204      	movs	r2, #4
 800ac14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	d106      	bne.n	800ac48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d110      	bne.n	800ac8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d005      	beq.n	800ac8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	32ae      	adds	r2, #174	@ 0xae
 800acac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e01c      	b.n	800acf2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d115      	bne.n	800acf0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	32ae      	adds	r2, #174	@ 0xae
 800acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32ae      	adds	r2, #174	@ 0xae
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	78fa      	ldrb	r2, [r7, #3]
 800acea:	4611      	mov	r1, r2
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	32ae      	adds	r2, #174	@ 0xae
 800ad10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e01c      	b.n	800ad56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d115      	bne.n	800ad54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	32ae      	adds	r2, #174	@ 0xae
 800ad32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	32ae      	adds	r2, #174	@ 0xae
 800ad46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4c:	78fa      	ldrb	r2, [r7, #3]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b083      	sub	sp, #12
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00e      	beq.n	800adb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6852      	ldr	r2, [r2, #4]
 800ad9e:	b2d2      	uxtb	r2, r2
 800ada0:	4611      	mov	r1, r2
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800adac:	2303      	movs	r3, #3
 800adae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	460b      	mov	r3, r1
 800adc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800adc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	460b      	mov	r3, r1
 800adde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ade0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	885b      	ldrh	r3, [r3, #2]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d91f      	bls.n	800ae54 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae1a:	e013      	b.n	800ae44 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae1c:	f107 030a 	add.w	r3, r7, #10
 800ae20:	4619      	mov	r1, r3
 800ae22:	6978      	ldr	r0, [r7, #20]
 800ae24:	f000 f81b 	bl	800ae5e <USBD_GetNextDesc>
 800ae28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b05      	cmp	r3, #5
 800ae30:	d108      	bne.n	800ae44 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	789b      	ldrb	r3, [r3, #2]
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d008      	beq.n	800ae52 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	885b      	ldrh	r3, [r3, #2]
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	897b      	ldrh	r3, [r7, #10]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d8e5      	bhi.n	800ae1c <USBD_GetEpDesc+0x2e>
 800ae50:	e000      	b.n	800ae54 <USBD_GetEpDesc+0x66>
          break;
 800ae52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ae54:	693b      	ldr	r3, [r7, #16]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	4413      	add	r3, r2
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	461a      	mov	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4413      	add	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae88:	68fb      	ldr	r3, [r7, #12]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b087      	sub	sp, #28
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeb4:	8a3b      	ldrh	r3, [r7, #16]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	b21a      	sxth	r2, r3
 800aeba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	b21b      	sxth	r3, r3
 800aec2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aec4:	89fb      	ldrh	r3, [r7, #14]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aeea:	2b40      	cmp	r3, #64	@ 0x40
 800aeec:	d005      	beq.n	800aefa <USBD_StdDevReq+0x26>
 800aeee:	2b40      	cmp	r3, #64	@ 0x40
 800aef0:	d857      	bhi.n	800afa2 <USBD_StdDevReq+0xce>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <USBD_StdDevReq+0x42>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d153      	bne.n	800afa2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	32ae      	adds	r2, #174	@ 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
      break;
 800af14:	e04a      	b.n	800afac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d83b      	bhi.n	800af96 <USBD_StdDevReq+0xc2>
 800af1e:	a201      	add	r2, pc, #4	@ (adr r2, 800af24 <USBD_StdDevReq+0x50>)
 800af20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af24:	0800af79 	.word	0x0800af79
 800af28:	0800af8d 	.word	0x0800af8d
 800af2c:	0800af97 	.word	0x0800af97
 800af30:	0800af83 	.word	0x0800af83
 800af34:	0800af97 	.word	0x0800af97
 800af38:	0800af57 	.word	0x0800af57
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af97 	.word	0x0800af97
 800af44:	0800af6f 	.word	0x0800af6f
 800af48:	0800af61 	.word	0x0800af61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa3c 	bl	800b3cc <USBD_GetDescriptor>
          break;
 800af54:	e024      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fba1 	bl	800b6a0 <USBD_SetAddress>
          break;
 800af5e:	e01f      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fbe0 	bl	800b728 <USBD_SetConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
          break;
 800af6c:	e018      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc83 	bl	800b87c <USBD_GetConfig>
          break;
 800af76:	e013      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fcb4 	bl	800b8e8 <USBD_GetStatus>
          break;
 800af80:	e00e      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fce3 	bl	800b950 <USBD_SetFeature>
          break;
 800af8a:	e009      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fd07 	bl	800b9a2 <USBD_ClrFeature>
          break;
 800af94:	e004      	b.n	800afa0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fd5e 	bl	800ba5a <USBD_CtlError>
          break;
 800af9e:	bf00      	nop
      }
      break;
 800afa0:	e004      	b.n	800afac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd58 	bl	800ba5a <USBD_CtlError>
      break;
 800afaa:	bf00      	nop
  }

  return ret;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop

0800afb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afce:	2b40      	cmp	r3, #64	@ 0x40
 800afd0:	d005      	beq.n	800afde <USBD_StdItfReq+0x26>
 800afd2:	2b40      	cmp	r3, #64	@ 0x40
 800afd4:	d852      	bhi.n	800b07c <USBD_StdItfReq+0xc4>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <USBD_StdItfReq+0x26>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d14e      	bne.n	800b07c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d840      	bhi.n	800b06e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	889b      	ldrh	r3, [r3, #4]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d836      	bhi.n	800b064 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	889b      	ldrh	r3, [r3, #4]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff fedb 	bl	800adba <USBD_CoreFindIF>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2bff      	cmp	r3, #255	@ 0xff
 800b00c:	d01d      	beq.n	800b04a <USBD_StdItfReq+0x92>
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d11a      	bne.n	800b04a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b014:	7bba      	ldrb	r2, [r7, #14]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32ae      	adds	r2, #174	@ 0xae
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00f      	beq.n	800b044 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b024:	7bba      	ldrb	r2, [r7, #14]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b02c:	7bba      	ldrb	r2, [r7, #14]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32ae      	adds	r2, #174	@ 0xae
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b042:	e004      	b.n	800b04e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b048:	e001      	b.n	800b04e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	88db      	ldrh	r3, [r3, #6]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d110      	bne.n	800b078 <USBD_StdItfReq+0xc0>
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10d      	bne.n	800b078 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fdc7 	bl	800bbf0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b062:	e009      	b.n	800b078 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fcf7 	bl	800ba5a <USBD_CtlError>
          break;
 800b06c:	e004      	b.n	800b078 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fcf2 	bl	800ba5a <USBD_CtlError>
          break;
 800b076:	e000      	b.n	800b07a <USBD_StdItfReq+0xc2>
          break;
 800b078:	bf00      	nop
      }
      break;
 800b07a:	e004      	b.n	800b086 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fceb 	bl	800ba5a <USBD_CtlError>
      break;
 800b084:	bf00      	nop
  }

  return ret;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	889b      	ldrh	r3, [r3, #4]
 800b0a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b0ac:	2b40      	cmp	r3, #64	@ 0x40
 800b0ae:	d007      	beq.n	800b0c0 <USBD_StdEPReq+0x30>
 800b0b0:	2b40      	cmp	r3, #64	@ 0x40
 800b0b2:	f200 817f 	bhi.w	800b3b4 <USBD_StdEPReq+0x324>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d02a      	beq.n	800b110 <USBD_StdEPReq+0x80>
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	f040 817a 	bne.w	800b3b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff fe85 	bl	800add4 <USBD_CoreFindEP>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ce:	7b7b      	ldrb	r3, [r7, #13]
 800b0d0:	2bff      	cmp	r3, #255	@ 0xff
 800b0d2:	f000 8174 	beq.w	800b3be <USBD_StdEPReq+0x32e>
 800b0d6:	7b7b      	ldrb	r3, [r7, #13]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f040 8170 	bne.w	800b3be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b0de:	7b7a      	ldrb	r2, [r7, #13]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b0e6:	7b7a      	ldrb	r2, [r7, #13]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	32ae      	adds	r2, #174	@ 0xae
 800b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8163 	beq.w	800b3be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b0f8:	7b7a      	ldrb	r2, [r7, #13]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32ae      	adds	r2, #174	@ 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b10e:	e156      	b.n	800b3be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d008      	beq.n	800b12a <USBD_StdEPReq+0x9a>
 800b118:	2b03      	cmp	r3, #3
 800b11a:	f300 8145 	bgt.w	800b3a8 <USBD_StdEPReq+0x318>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 809b 	beq.w	800b25a <USBD_StdEPReq+0x1ca>
 800b124:	2b01      	cmp	r3, #1
 800b126:	d03c      	beq.n	800b1a2 <USBD_StdEPReq+0x112>
 800b128:	e13e      	b.n	800b3a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d002      	beq.n	800b13c <USBD_StdEPReq+0xac>
 800b136:	2b03      	cmp	r3, #3
 800b138:	d016      	beq.n	800b168 <USBD_StdEPReq+0xd8>
 800b13a:	e02c      	b.n	800b196 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00d      	beq.n	800b15e <USBD_StdEPReq+0xce>
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	2b80      	cmp	r3, #128	@ 0x80
 800b146:	d00a      	beq.n	800b15e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7f7 fd03 	bl	8002b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b152:	2180      	movs	r1, #128	@ 0x80
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7f7 fcff 	bl	8002b58 <USBD_LL_StallEP>
 800b15a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b15c:	e020      	b.n	800b1a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fc7a 	bl	800ba5a <USBD_CtlError>
              break;
 800b166:	e01b      	b.n	800b1a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	885b      	ldrh	r3, [r3, #2]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10e      	bne.n	800b18e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00b      	beq.n	800b18e <USBD_StdEPReq+0xfe>
 800b176:	7bbb      	ldrb	r3, [r7, #14]
 800b178:	2b80      	cmp	r3, #128	@ 0x80
 800b17a:	d008      	beq.n	800b18e <USBD_StdEPReq+0xfe>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7f7 fce5 	bl	8002b58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fd2e 	bl	800bbf0 <USBD_CtlSendStatus>

              break;
 800b194:	e004      	b.n	800b1a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fc5e 	bl	800ba5a <USBD_CtlError>
              break;
 800b19e:	bf00      	nop
          }
          break;
 800b1a0:	e107      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d002      	beq.n	800b1b4 <USBD_StdEPReq+0x124>
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d016      	beq.n	800b1e0 <USBD_StdEPReq+0x150>
 800b1b2:	e04b      	b.n	800b24c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00d      	beq.n	800b1d6 <USBD_StdEPReq+0x146>
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b80      	cmp	r3, #128	@ 0x80
 800b1be:	d00a      	beq.n	800b1d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7f7 fcc7 	bl	8002b58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ca:	2180      	movs	r1, #128	@ 0x80
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7f7 fcc3 	bl	8002b58 <USBD_LL_StallEP>
 800b1d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1d4:	e040      	b.n	800b258 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc3e 	bl	800ba5a <USBD_CtlError>
              break;
 800b1de:	e03b      	b.n	800b258 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d136      	bne.n	800b256 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7f7 fccd 	bl	8002b96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fcf7 	bl	800bbf0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff fde4 	bl	800add4 <USBD_CoreFindEP>
 800b20c:	4603      	mov	r3, r0
 800b20e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b210:	7b7b      	ldrb	r3, [r7, #13]
 800b212:	2bff      	cmp	r3, #255	@ 0xff
 800b214:	d01f      	beq.n	800b256 <USBD_StdEPReq+0x1c6>
 800b216:	7b7b      	ldrb	r3, [r7, #13]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d11c      	bne.n	800b256 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b21c:	7b7a      	ldrb	r2, [r7, #13]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b224:	7b7a      	ldrb	r2, [r7, #13]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	32ae      	adds	r2, #174	@ 0xae
 800b22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d010      	beq.n	800b256 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b234:	7b7a      	ldrb	r2, [r7, #13]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	32ae      	adds	r2, #174	@ 0xae
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b24a:	e004      	b.n	800b256 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fc03 	bl	800ba5a <USBD_CtlError>
              break;
 800b254:	e000      	b.n	800b258 <USBD_StdEPReq+0x1c8>
              break;
 800b256:	bf00      	nop
          }
          break;
 800b258:	e0ab      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b02      	cmp	r3, #2
 800b264:	d002      	beq.n	800b26c <USBD_StdEPReq+0x1dc>
 800b266:	2b03      	cmp	r3, #3
 800b268:	d032      	beq.n	800b2d0 <USBD_StdEPReq+0x240>
 800b26a:	e097      	b.n	800b39c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d007      	beq.n	800b282 <USBD_StdEPReq+0x1f2>
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b80      	cmp	r3, #128	@ 0x80
 800b276:	d004      	beq.n	800b282 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fbed 	bl	800ba5a <USBD_CtlError>
                break;
 800b280:	e091      	b.n	800b3a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b286:	2b00      	cmp	r3, #0
 800b288:	da0b      	bge.n	800b2a2 <USBD_StdEPReq+0x212>
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	3310      	adds	r3, #16
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4413      	add	r3, r2
 800b29e:	3304      	adds	r3, #4
 800b2a0:	e00b      	b.n	800b2ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fc37 	bl	800bb3c <USBD_CtlSendData>
              break;
 800b2ce:	e06a      	b.n	800b3a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da11      	bge.n	800b2fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2d8:	7bbb      	ldrb	r3, [r7, #14]
 800b2da:	f003 020f 	and.w	r2, r3, #15
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	440b      	add	r3, r1
 800b2ea:	3324      	adds	r3, #36	@ 0x24
 800b2ec:	881b      	ldrh	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d117      	bne.n	800b322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fbb0 	bl	800ba5a <USBD_CtlError>
                  break;
 800b2fa:	e054      	b.n	800b3a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fb9d 	bl	800ba5a <USBD_CtlError>
                  break;
 800b320:	e041      	b.n	800b3a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b326:	2b00      	cmp	r3, #0
 800b328:	da0b      	bge.n	800b342 <USBD_StdEPReq+0x2b2>
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	3310      	adds	r3, #16
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	4413      	add	r3, r2
 800b33e:	3304      	adds	r3, #4
 800b340:	e00b      	b.n	800b35a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	4413      	add	r3, r2
 800b358:	3304      	adds	r3, #4
 800b35a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <USBD_StdEPReq+0x2d8>
 800b362:	7bbb      	ldrb	r3, [r7, #14]
 800b364:	2b80      	cmp	r3, #128	@ 0x80
 800b366:	d103      	bne.n	800b370 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	e00e      	b.n	800b38e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b370:	7bbb      	ldrb	r3, [r7, #14]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7f7 fc2d 	bl	8002bd4 <USBD_LL_IsStallEP>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2201      	movs	r2, #1
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	e002      	b.n	800b38e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2202      	movs	r2, #2
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fbd1 	bl	800bb3c <USBD_CtlSendData>
              break;
 800b39a:	e004      	b.n	800b3a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fb5b 	bl	800ba5a <USBD_CtlError>
              break;
 800b3a4:	bf00      	nop
          }
          break;
 800b3a6:	e004      	b.n	800b3b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb55 	bl	800ba5a <USBD_CtlError>
          break;
 800b3b0:	bf00      	nop
      }
      break;
 800b3b2:	e005      	b.n	800b3c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fb4f 	bl	800ba5a <USBD_CtlError>
      break;
 800b3bc:	e000      	b.n	800b3c0 <USBD_StdEPReq+0x330>
      break;
 800b3be:	bf00      	nop
  }

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	0a1b      	lsrs	r3, r3, #8
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	2b06      	cmp	r3, #6
 800b3ee:	f200 8128 	bhi.w	800b642 <USBD_GetDescriptor+0x276>
 800b3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <USBD_GetDescriptor+0x2c>)
 800b3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b42d 	.word	0x0800b42d
 800b400:	0800b46d 	.word	0x0800b46d
 800b404:	0800b643 	.word	0x0800b643
 800b408:	0800b643 	.word	0x0800b643
 800b40c:	0800b5e3 	.word	0x0800b5e3
 800b410:	0800b60f 	.word	0x0800b60f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	7c12      	ldrb	r2, [r2, #16]
 800b420:	f107 0108 	add.w	r1, r7, #8
 800b424:	4610      	mov	r0, r2
 800b426:	4798      	blx	r3
 800b428:	60f8      	str	r0, [r7, #12]
      break;
 800b42a:	e112      	b.n	800b652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	7c1b      	ldrb	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10d      	bne.n	800b450 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b43c:	f107 0208 	add.w	r2, r7, #8
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3301      	adds	r3, #1
 800b44a:	2202      	movs	r2, #2
 800b44c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b44e:	e100      	b.n	800b652 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b458:	f107 0208 	add.w	r2, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	2202      	movs	r2, #2
 800b468:	701a      	strb	r2, [r3, #0]
      break;
 800b46a:	e0f2      	b.n	800b652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	885b      	ldrh	r3, [r3, #2]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b05      	cmp	r3, #5
 800b474:	f200 80ac 	bhi.w	800b5d0 <USBD_GetDescriptor+0x204>
 800b478:	a201      	add	r2, pc, #4	@ (adr r2, 800b480 <USBD_GetDescriptor+0xb4>)
 800b47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47e:	bf00      	nop
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b4cd 	.word	0x0800b4cd
 800b488:	0800b501 	.word	0x0800b501
 800b48c:	0800b535 	.word	0x0800b535
 800b490:	0800b569 	.word	0x0800b569
 800b494:	0800b59d 	.word	0x0800b59d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	7c12      	ldrb	r2, [r2, #16]
 800b4b0:	f107 0108 	add.w	r1, r7, #8
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
 800b4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ba:	e091      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 facb 	bl	800ba5a <USBD_CtlError>
            err++;
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ca:	e089      	b.n	800b5e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00b      	beq.n	800b4f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	7c12      	ldrb	r2, [r2, #16]
 800b4e4:	f107 0108 	add.w	r1, r7, #8
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
 800b4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ee:	e077      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fab1 	bl	800ba5a <USBD_CtlError>
            err++;
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4fe:	e06f      	b.n	800b5e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00b      	beq.n	800b524 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	7c12      	ldrb	r2, [r2, #16]
 800b518:	f107 0108 	add.w	r1, r7, #8
 800b51c:	4610      	mov	r0, r2
 800b51e:	4798      	blx	r3
 800b520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b522:	e05d      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fa97 	bl	800ba5a <USBD_CtlError>
            err++;
 800b52c:	7afb      	ldrb	r3, [r7, #11]
 800b52e:	3301      	adds	r3, #1
 800b530:	72fb      	strb	r3, [r7, #11]
          break;
 800b532:	e055      	b.n	800b5e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	7c12      	ldrb	r2, [r2, #16]
 800b54c:	f107 0108 	add.w	r1, r7, #8
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b556:	e043      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa7d 	bl	800ba5a <USBD_CtlError>
            err++;
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	3301      	adds	r3, #1
 800b564:	72fb      	strb	r3, [r7, #11]
          break;
 800b566:	e03b      	b.n	800b5e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00b      	beq.n	800b58c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b57a:	695b      	ldr	r3, [r3, #20]
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	7c12      	ldrb	r2, [r2, #16]
 800b580:	f107 0108 	add.w	r1, r7, #8
 800b584:	4610      	mov	r0, r2
 800b586:	4798      	blx	r3
 800b588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b58a:	e029      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fa63 	bl	800ba5a <USBD_CtlError>
            err++;
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	3301      	adds	r3, #1
 800b598:	72fb      	strb	r3, [r7, #11]
          break;
 800b59a:	e021      	b.n	800b5e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00b      	beq.n	800b5c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	7c12      	ldrb	r2, [r2, #16]
 800b5b4:	f107 0108 	add.w	r1, r7, #8
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
 800b5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5be:	e00f      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fa49 	bl	800ba5a <USBD_CtlError>
            err++;
 800b5c8:	7afb      	ldrb	r3, [r7, #11]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ce:	e007      	b.n	800b5e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa41 	bl	800ba5a <USBD_CtlError>
          err++;
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b5de:	bf00      	nop
      }
      break;
 800b5e0:	e037      	b.n	800b652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7c1b      	ldrb	r3, [r3, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d109      	bne.n	800b5fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f2:	f107 0208 	add.w	r2, r7, #8
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4798      	blx	r3
 800b5fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5fc:	e029      	b.n	800b652 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa2a 	bl	800ba5a <USBD_CtlError>
        err++;
 800b606:	7afb      	ldrb	r3, [r7, #11]
 800b608:	3301      	adds	r3, #1
 800b60a:	72fb      	strb	r3, [r7, #11]
      break;
 800b60c:	e021      	b.n	800b652 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	7c1b      	ldrb	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10d      	bne.n	800b632 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b61e:	f107 0208 	add.w	r2, r7, #8
 800b622:	4610      	mov	r0, r2
 800b624:	4798      	blx	r3
 800b626:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3301      	adds	r3, #1
 800b62c:	2207      	movs	r2, #7
 800b62e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b630:	e00f      	b.n	800b652 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fa10 	bl	800ba5a <USBD_CtlError>
        err++;
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	3301      	adds	r3, #1
 800b63e:	72fb      	strb	r3, [r7, #11]
      break;
 800b640:	e007      	b.n	800b652 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fa08 	bl	800ba5a <USBD_CtlError>
      err++;
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	3301      	adds	r3, #1
 800b64e:	72fb      	strb	r3, [r7, #11]
      break;
 800b650:	bf00      	nop
  }

  if (err != 0U)
 800b652:	7afb      	ldrb	r3, [r7, #11]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11e      	bne.n	800b696 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	88db      	ldrh	r3, [r3, #6]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d016      	beq.n	800b68e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b660:	893b      	ldrh	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00e      	beq.n	800b684 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	88da      	ldrh	r2, [r3, #6]
 800b66a:	893b      	ldrh	r3, [r7, #8]
 800b66c:	4293      	cmp	r3, r2
 800b66e:	bf28      	it	cs
 800b670:	4613      	movcs	r3, r2
 800b672:	b29b      	uxth	r3, r3
 800b674:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b676:	893b      	ldrh	r3, [r7, #8]
 800b678:	461a      	mov	r2, r3
 800b67a:	68f9      	ldr	r1, [r7, #12]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 fa5d 	bl	800bb3c <USBD_CtlSendData>
 800b682:	e009      	b.n	800b698 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9e7 	bl	800ba5a <USBD_CtlError>
 800b68c:	e004      	b.n	800b698 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 faae 	bl	800bbf0 <USBD_CtlSendStatus>
 800b694:	e000      	b.n	800b698 <USBD_GetDescriptor+0x2cc>
    return;
 800b696:	bf00      	nop
  }
}
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop

0800b6a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	889b      	ldrh	r3, [r3, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d131      	bne.n	800b716 <USBD_SetAddress+0x76>
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	88db      	ldrh	r3, [r3, #6]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d12d      	bne.n	800b716 <USBD_SetAddress+0x76>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	885b      	ldrh	r3, [r3, #2]
 800b6be:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6c0:	d829      	bhi.n	800b716 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	885b      	ldrh	r3, [r3, #2]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d104      	bne.n	800b6e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f9bc 	bl	800ba5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e2:	e01d      	b.n	800b720 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7bfa      	ldrb	r2, [r7, #15]
 800b6e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7f7 fa9b 	bl	8002c2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa7a 	bl	800bbf0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6fc:	7bfb      	ldrb	r3, [r7, #15]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d004      	beq.n	800b70c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2202      	movs	r2, #2
 800b706:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b70a:	e009      	b.n	800b720 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b714:	e004      	b.n	800b720 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f99e 	bl	800ba5a <USBD_CtlError>
  }
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	4b4e      	ldr	r3, [pc, #312]	@ (800b878 <USBD_SetConfig+0x150>)
 800b73e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b740:	4b4d      	ldr	r3, [pc, #308]	@ (800b878 <USBD_SetConfig+0x150>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d905      	bls.n	800b754 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b748:	6839      	ldr	r1, [r7, #0]
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f985 	bl	800ba5a <USBD_CtlError>
    return USBD_FAIL;
 800b750:	2303      	movs	r3, #3
 800b752:	e08c      	b.n	800b86e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d002      	beq.n	800b766 <USBD_SetConfig+0x3e>
 800b760:	2b03      	cmp	r3, #3
 800b762:	d029      	beq.n	800b7b8 <USBD_SetConfig+0x90>
 800b764:	e075      	b.n	800b852 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b766:	4b44      	ldr	r3, [pc, #272]	@ (800b878 <USBD_SetConfig+0x150>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d020      	beq.n	800b7b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b76e:	4b42      	ldr	r3, [pc, #264]	@ (800b878 <USBD_SetConfig+0x150>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b778:	4b3f      	ldr	r3, [pc, #252]	@ (800b878 <USBD_SetConfig+0x150>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7fe ffe3 	bl	800a74a <USBD_SetClassConfig>
 800b784:	4603      	mov	r3, r0
 800b786:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d008      	beq.n	800b7a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f962 	bl	800ba5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2202      	movs	r2, #2
 800b79a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b79e:	e065      	b.n	800b86c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fa25 	bl	800bbf0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b7ae:	e05d      	b.n	800b86c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fa1d 	bl	800bbf0 <USBD_CtlSendStatus>
      break;
 800b7b6:	e059      	b.n	800b86c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b7b8:	4b2f      	ldr	r3, [pc, #188]	@ (800b878 <USBD_SetConfig+0x150>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d112      	bne.n	800b7e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b7c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b878 <USBD_SetConfig+0x150>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7d2:	4b29      	ldr	r3, [pc, #164]	@ (800b878 <USBD_SetConfig+0x150>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7fe ffd2 	bl	800a782 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa06 	bl	800bbf0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7e4:	e042      	b.n	800b86c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b7e6:	4b24      	ldr	r3, [pc, #144]	@ (800b878 <USBD_SetConfig+0x150>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d02a      	beq.n	800b84a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7fe ffc0 	bl	800a782 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b802:	4b1d      	ldr	r3, [pc, #116]	@ (800b878 <USBD_SetConfig+0x150>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b80c:	4b1a      	ldr	r3, [pc, #104]	@ (800b878 <USBD_SetConfig+0x150>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7fe ff99 	bl	800a74a <USBD_SetClassConfig>
 800b818:	4603      	mov	r3, r0
 800b81a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00f      	beq.n	800b842 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f918 	bl	800ba5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7fe ffa5 	bl	800a782 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b840:	e014      	b.n	800b86c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f9d4 	bl	800bbf0 <USBD_CtlSendStatus>
      break;
 800b848:	e010      	b.n	800b86c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f9d0 	bl	800bbf0 <USBD_CtlSendStatus>
      break;
 800b850:	e00c      	b.n	800b86c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f900 	bl	800ba5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b85a:	4b07      	ldr	r3, [pc, #28]	@ (800b878 <USBD_SetConfig+0x150>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7fe ff8e 	bl	800a782 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	73fb      	strb	r3, [r7, #15]
      break;
 800b86a:	bf00      	nop
  }

  return ret;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	2000215c 	.word	0x2000215c

0800b87c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88db      	ldrh	r3, [r3, #6]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d004      	beq.n	800b898 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f8e2 	bl	800ba5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b896:	e023      	b.n	800b8e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	dc02      	bgt.n	800b8aa <USBD_GetConfig+0x2e>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dc03      	bgt.n	800b8b0 <USBD_GetConfig+0x34>
 800b8a8:	e015      	b.n	800b8d6 <USBD_GetConfig+0x5a>
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d00b      	beq.n	800b8c6 <USBD_GetConfig+0x4a>
 800b8ae:	e012      	b.n	800b8d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f93c 	bl	800bb3c <USBD_CtlSendData>
        break;
 800b8c4:	e00c      	b.n	800b8e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f934 	bl	800bb3c <USBD_CtlSendData>
        break;
 800b8d4:	e004      	b.n	800b8e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f8be 	bl	800ba5a <USBD_CtlError>
        break;
 800b8de:	bf00      	nop
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d81e      	bhi.n	800b93e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	88db      	ldrh	r3, [r3, #6]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d004      	beq.n	800b912 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f8a5 	bl	800ba5a <USBD_CtlError>
        break;
 800b910:	e01a      	b.n	800b948 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d005      	beq.n	800b92e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	f043 0202 	orr.w	r2, r3, #2
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	330c      	adds	r3, #12
 800b932:	2202      	movs	r2, #2
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f900 	bl	800bb3c <USBD_CtlSendData>
      break;
 800b93c:	e004      	b.n	800b948 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f88a 	bl	800ba5a <USBD_CtlError>
      break;
 800b946:	bf00      	nop
  }
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	885b      	ldrh	r3, [r3, #2]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d107      	bne.n	800b972 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f940 	bl	800bbf0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b970:	e013      	b.n	800b99a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	885b      	ldrh	r3, [r3, #2]
 800b976:	2b02      	cmp	r3, #2
 800b978:	d10b      	bne.n	800b992 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	889b      	ldrh	r3, [r3, #4]
 800b97e:	0a1b      	lsrs	r3, r3, #8
 800b980:	b29b      	uxth	r3, r3
 800b982:	b2da      	uxtb	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f930 	bl	800bbf0 <USBD_CtlSendStatus>
}
 800b990:	e003      	b.n	800b99a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f860 	bl	800ba5a <USBD_CtlError>
}
 800b99a:	bf00      	nop
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b082      	sub	sp, #8
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d80b      	bhi.n	800b9d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	885b      	ldrh	r3, [r3, #2]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d10c      	bne.n	800b9dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f910 	bl	800bbf0 <USBD_CtlSendStatus>
      }
      break;
 800b9d0:	e004      	b.n	800b9dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f840 	bl	800ba5a <USBD_CtlError>
      break;
 800b9da:	e000      	b.n	800b9de <USBD_ClrFeature+0x3c>
      break;
 800b9dc:	bf00      	nop
  }
}
 800b9de:	bf00      	nop
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff fa40 	bl	800ae96 <SWAPBYTE>
 800ba16:	4603      	mov	r3, r0
 800ba18:	461a      	mov	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3301      	adds	r3, #1
 800ba22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff fa33 	bl	800ae96 <SWAPBYTE>
 800ba30:	4603      	mov	r3, r0
 800ba32:	461a      	mov	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3301      	adds	r3, #1
 800ba42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f7ff fa26 	bl	800ae96 <SWAPBYTE>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	80da      	strh	r2, [r3, #6]
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba64:	2180      	movs	r1, #128	@ 0x80
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f7f7 f876 	bl	8002b58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7f7 f872 	bl	8002b58 <USBD_LL_StallEP>
}
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d036      	beq.n	800bb00 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f000 f836 	bl	800bb08 <USBD_GetLen>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	3301      	adds	r3, #1
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	4413      	add	r3, r2
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	7812      	ldrb	r2, [r2, #0]
 800bab4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	3301      	adds	r3, #1
 800baba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	2203      	movs	r2, #3
 800bac4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	3301      	adds	r3, #1
 800baca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bacc:	e013      	b.n	800baf6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	4413      	add	r3, r2
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	7812      	ldrb	r2, [r2, #0]
 800bad8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	3301      	adds	r3, #1
 800bade:	613b      	str	r3, [r7, #16]
    idx++;
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
 800bae2:	3301      	adds	r3, #1
 800bae4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	4413      	add	r3, r2
 800baec:	2200      	movs	r2, #0
 800baee:	701a      	strb	r2, [r3, #0]
    idx++;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	3301      	adds	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e7      	bne.n	800bace <USBD_GetString+0x52>
 800bafe:	e000      	b.n	800bb02 <USBD_GetString+0x86>
    return;
 800bb00:	bf00      	nop
  }
}
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b085      	sub	sp, #20
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb18:	e005      	b.n	800bb26 <USBD_GetLen+0x1e>
  {
    len++;
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	3301      	adds	r3, #1
 800bb24:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f5      	bne.n	800bb1a <USBD_GetLen+0x12>
  }

  return len;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7f7 f881 	bl	8002c6a <USBD_LL_Transmit>

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	2100      	movs	r1, #0
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f7f7 f870 	bl	8002c6a <USBD_LL_Transmit>

  return USBD_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2203      	movs	r2, #3
 800bba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7f7 f874 	bl	8002cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	2100      	movs	r1, #0
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7f7 f863 	bl	8002cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc00:	2300      	movs	r3, #0
 800bc02:	2200      	movs	r2, #0
 800bc04:	2100      	movs	r1, #0
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7f7 f82f 	bl	8002c6a <USBD_LL_Transmit>

  return USBD_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b082      	sub	sp, #8
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2205      	movs	r2, #5
 800bc22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc26:	2300      	movs	r3, #0
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7f7 f83d 	bl	8002cac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <sulp>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	ec45 4b10 	vmov	d0, r4, r5
 800bc46:	4616      	mov	r6, r2
 800bc48:	f002 f85c 	bl	800dd04 <__ulp>
 800bc4c:	ec51 0b10 	vmov	r0, r1, d0
 800bc50:	b17e      	cbz	r6, 800bc72 <sulp+0x36>
 800bc52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dd09      	ble.n	800bc72 <sulp+0x36>
 800bc5e:	051b      	lsls	r3, r3, #20
 800bc60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bc64:	2400      	movs	r4, #0
 800bc66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	462b      	mov	r3, r5
 800bc6e:	f7f4 fcbb 	bl	80005e8 <__aeabi_dmul>
 800bc72:	ec41 0b10 	vmov	d0, r0, r1
 800bc76:	bd70      	pop	{r4, r5, r6, pc}

0800bc78 <_strtod_l>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	b09f      	sub	sp, #124	@ 0x7c
 800bc7e:	460c      	mov	r4, r1
 800bc80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bc82:	2200      	movs	r2, #0
 800bc84:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc86:	9005      	str	r0, [sp, #20]
 800bc88:	f04f 0a00 	mov.w	sl, #0
 800bc8c:	f04f 0b00 	mov.w	fp, #0
 800bc90:	460a      	mov	r2, r1
 800bc92:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc94:	7811      	ldrb	r1, [r2, #0]
 800bc96:	292b      	cmp	r1, #43	@ 0x2b
 800bc98:	d04a      	beq.n	800bd30 <_strtod_l+0xb8>
 800bc9a:	d838      	bhi.n	800bd0e <_strtod_l+0x96>
 800bc9c:	290d      	cmp	r1, #13
 800bc9e:	d832      	bhi.n	800bd06 <_strtod_l+0x8e>
 800bca0:	2908      	cmp	r1, #8
 800bca2:	d832      	bhi.n	800bd0a <_strtod_l+0x92>
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d03b      	beq.n	800bd20 <_strtod_l+0xa8>
 800bca8:	2200      	movs	r2, #0
 800bcaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bcac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bcae:	782a      	ldrb	r2, [r5, #0]
 800bcb0:	2a30      	cmp	r2, #48	@ 0x30
 800bcb2:	f040 80b3 	bne.w	800be1c <_strtod_l+0x1a4>
 800bcb6:	786a      	ldrb	r2, [r5, #1]
 800bcb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bcbc:	2a58      	cmp	r2, #88	@ 0x58
 800bcbe:	d16e      	bne.n	800bd9e <_strtod_l+0x126>
 800bcc0:	9302      	str	r3, [sp, #8]
 800bcc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	ab1a      	add	r3, sp, #104	@ 0x68
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	4a8e      	ldr	r2, [pc, #568]	@ (800bf04 <_strtod_l+0x28c>)
 800bccc:	9805      	ldr	r0, [sp, #20]
 800bcce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bcd0:	a919      	add	r1, sp, #100	@ 0x64
 800bcd2:	f001 f911 	bl	800cef8 <__gethex>
 800bcd6:	f010 060f 	ands.w	r6, r0, #15
 800bcda:	4604      	mov	r4, r0
 800bcdc:	d005      	beq.n	800bcea <_strtod_l+0x72>
 800bcde:	2e06      	cmp	r6, #6
 800bce0:	d128      	bne.n	800bd34 <_strtod_l+0xbc>
 800bce2:	3501      	adds	r5, #1
 800bce4:	2300      	movs	r3, #0
 800bce6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f040 858e 	bne.w	800c80e <_strtod_l+0xb96>
 800bcf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcf4:	b1cb      	cbz	r3, 800bd2a <_strtod_l+0xb2>
 800bcf6:	4652      	mov	r2, sl
 800bcf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bcfc:	ec43 2b10 	vmov	d0, r2, r3
 800bd00:	b01f      	add	sp, #124	@ 0x7c
 800bd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd06:	2920      	cmp	r1, #32
 800bd08:	d1ce      	bne.n	800bca8 <_strtod_l+0x30>
 800bd0a:	3201      	adds	r2, #1
 800bd0c:	e7c1      	b.n	800bc92 <_strtod_l+0x1a>
 800bd0e:	292d      	cmp	r1, #45	@ 0x2d
 800bd10:	d1ca      	bne.n	800bca8 <_strtod_l+0x30>
 800bd12:	2101      	movs	r1, #1
 800bd14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd16:	1c51      	adds	r1, r2, #1
 800bd18:	9119      	str	r1, [sp, #100]	@ 0x64
 800bd1a:	7852      	ldrb	r2, [r2, #1]
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d1c5      	bne.n	800bcac <_strtod_l+0x34>
 800bd20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bd22:	9419      	str	r4, [sp, #100]	@ 0x64
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f040 8570 	bne.w	800c80a <_strtod_l+0xb92>
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	e7e5      	b.n	800bcfc <_strtod_l+0x84>
 800bd30:	2100      	movs	r1, #0
 800bd32:	e7ef      	b.n	800bd14 <_strtod_l+0x9c>
 800bd34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd36:	b13a      	cbz	r2, 800bd48 <_strtod_l+0xd0>
 800bd38:	2135      	movs	r1, #53	@ 0x35
 800bd3a:	a81c      	add	r0, sp, #112	@ 0x70
 800bd3c:	f002 f8dc 	bl	800def8 <__copybits>
 800bd40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd42:	9805      	ldr	r0, [sp, #20]
 800bd44:	f001 fcaa 	bl	800d69c <_Bfree>
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bd4c:	2e04      	cmp	r6, #4
 800bd4e:	d806      	bhi.n	800bd5e <_strtod_l+0xe6>
 800bd50:	e8df f006 	tbb	[pc, r6]
 800bd54:	201d0314 	.word	0x201d0314
 800bd58:	14          	.byte	0x14
 800bd59:	00          	.byte	0x00
 800bd5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bd5e:	05e1      	lsls	r1, r4, #23
 800bd60:	bf48      	it	mi
 800bd62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bd66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd6a:	0d1b      	lsrs	r3, r3, #20
 800bd6c:	051b      	lsls	r3, r3, #20
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1bb      	bne.n	800bcea <_strtod_l+0x72>
 800bd72:	f000 ffc5 	bl	800cd00 <__errno>
 800bd76:	2322      	movs	r3, #34	@ 0x22
 800bd78:	6003      	str	r3, [r0, #0]
 800bd7a:	e7b6      	b.n	800bcea <_strtod_l+0x72>
 800bd7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bd80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bd88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd8c:	e7e7      	b.n	800bd5e <_strtod_l+0xe6>
 800bd8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bf0c <_strtod_l+0x294>
 800bd92:	e7e4      	b.n	800bd5e <_strtod_l+0xe6>
 800bd94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bd98:	f04f 3aff 	mov.w	sl, #4294967295
 800bd9c:	e7df      	b.n	800bd5e <_strtod_l+0xe6>
 800bd9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b30      	cmp	r3, #48	@ 0x30
 800bda8:	d0f9      	beq.n	800bd9e <_strtod_l+0x126>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d09d      	beq.n	800bcea <_strtod_l+0x72>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9308      	str	r3, [sp, #32]
 800bdba:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdbc:	461f      	mov	r7, r3
 800bdbe:	220a      	movs	r2, #10
 800bdc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bdc2:	7805      	ldrb	r5, [r0, #0]
 800bdc4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bdc8:	b2d9      	uxtb	r1, r3
 800bdca:	2909      	cmp	r1, #9
 800bdcc:	d928      	bls.n	800be20 <_strtod_l+0x1a8>
 800bdce:	494e      	ldr	r1, [pc, #312]	@ (800bf08 <_strtod_l+0x290>)
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f000 ff3c 	bl	800cc4e <strncmp>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d032      	beq.n	800be40 <_strtod_l+0x1c8>
 800bdda:	2000      	movs	r0, #0
 800bddc:	462a      	mov	r2, r5
 800bdde:	4681      	mov	r9, r0
 800bde0:	463d      	mov	r5, r7
 800bde2:	4603      	mov	r3, r0
 800bde4:	2a65      	cmp	r2, #101	@ 0x65
 800bde6:	d001      	beq.n	800bdec <_strtod_l+0x174>
 800bde8:	2a45      	cmp	r2, #69	@ 0x45
 800bdea:	d114      	bne.n	800be16 <_strtod_l+0x19e>
 800bdec:	b91d      	cbnz	r5, 800bdf6 <_strtod_l+0x17e>
 800bdee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdf0:	4302      	orrs	r2, r0
 800bdf2:	d095      	beq.n	800bd20 <_strtod_l+0xa8>
 800bdf4:	2500      	movs	r5, #0
 800bdf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bdf8:	1c62      	adds	r2, r4, #1
 800bdfa:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdfc:	7862      	ldrb	r2, [r4, #1]
 800bdfe:	2a2b      	cmp	r2, #43	@ 0x2b
 800be00:	d077      	beq.n	800bef2 <_strtod_l+0x27a>
 800be02:	2a2d      	cmp	r2, #45	@ 0x2d
 800be04:	d07b      	beq.n	800befe <_strtod_l+0x286>
 800be06:	f04f 0c00 	mov.w	ip, #0
 800be0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800be0e:	2909      	cmp	r1, #9
 800be10:	f240 8082 	bls.w	800bf18 <_strtod_l+0x2a0>
 800be14:	9419      	str	r4, [sp, #100]	@ 0x64
 800be16:	f04f 0800 	mov.w	r8, #0
 800be1a:	e0a2      	b.n	800bf62 <_strtod_l+0x2ea>
 800be1c:	2300      	movs	r3, #0
 800be1e:	e7c7      	b.n	800bdb0 <_strtod_l+0x138>
 800be20:	2f08      	cmp	r7, #8
 800be22:	bfd5      	itete	le
 800be24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800be26:	9908      	ldrgt	r1, [sp, #32]
 800be28:	fb02 3301 	mlale	r3, r2, r1, r3
 800be2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800be30:	f100 0001 	add.w	r0, r0, #1
 800be34:	bfd4      	ite	le
 800be36:	930a      	strle	r3, [sp, #40]	@ 0x28
 800be38:	9308      	strgt	r3, [sp, #32]
 800be3a:	3701      	adds	r7, #1
 800be3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800be3e:	e7bf      	b.n	800bdc0 <_strtod_l+0x148>
 800be40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	9219      	str	r2, [sp, #100]	@ 0x64
 800be46:	785a      	ldrb	r2, [r3, #1]
 800be48:	b37f      	cbz	r7, 800beaa <_strtod_l+0x232>
 800be4a:	4681      	mov	r9, r0
 800be4c:	463d      	mov	r5, r7
 800be4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800be52:	2b09      	cmp	r3, #9
 800be54:	d912      	bls.n	800be7c <_strtod_l+0x204>
 800be56:	2301      	movs	r3, #1
 800be58:	e7c4      	b.n	800bde4 <_strtod_l+0x16c>
 800be5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be5c:	1c5a      	adds	r2, r3, #1
 800be5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800be60:	785a      	ldrb	r2, [r3, #1]
 800be62:	3001      	adds	r0, #1
 800be64:	2a30      	cmp	r2, #48	@ 0x30
 800be66:	d0f8      	beq.n	800be5a <_strtod_l+0x1e2>
 800be68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	f200 84d3 	bhi.w	800c818 <_strtod_l+0xba0>
 800be72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be74:	930c      	str	r3, [sp, #48]	@ 0x30
 800be76:	4681      	mov	r9, r0
 800be78:	2000      	movs	r0, #0
 800be7a:	4605      	mov	r5, r0
 800be7c:	3a30      	subs	r2, #48	@ 0x30
 800be7e:	f100 0301 	add.w	r3, r0, #1
 800be82:	d02a      	beq.n	800beda <_strtod_l+0x262>
 800be84:	4499      	add	r9, r3
 800be86:	eb00 0c05 	add.w	ip, r0, r5
 800be8a:	462b      	mov	r3, r5
 800be8c:	210a      	movs	r1, #10
 800be8e:	4563      	cmp	r3, ip
 800be90:	d10d      	bne.n	800beae <_strtod_l+0x236>
 800be92:	1c69      	adds	r1, r5, #1
 800be94:	4401      	add	r1, r0
 800be96:	4428      	add	r0, r5
 800be98:	2808      	cmp	r0, #8
 800be9a:	dc16      	bgt.n	800beca <_strtod_l+0x252>
 800be9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be9e:	230a      	movs	r3, #10
 800bea0:	fb03 2300 	mla	r3, r3, r0, r2
 800bea4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea6:	2300      	movs	r3, #0
 800bea8:	e018      	b.n	800bedc <_strtod_l+0x264>
 800beaa:	4638      	mov	r0, r7
 800beac:	e7da      	b.n	800be64 <_strtod_l+0x1ec>
 800beae:	2b08      	cmp	r3, #8
 800beb0:	f103 0301 	add.w	r3, r3, #1
 800beb4:	dc03      	bgt.n	800bebe <_strtod_l+0x246>
 800beb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800beb8:	434e      	muls	r6, r1
 800beba:	960a      	str	r6, [sp, #40]	@ 0x28
 800bebc:	e7e7      	b.n	800be8e <_strtod_l+0x216>
 800bebe:	2b10      	cmp	r3, #16
 800bec0:	bfde      	ittt	le
 800bec2:	9e08      	ldrle	r6, [sp, #32]
 800bec4:	434e      	mulle	r6, r1
 800bec6:	9608      	strle	r6, [sp, #32]
 800bec8:	e7e1      	b.n	800be8e <_strtod_l+0x216>
 800beca:	280f      	cmp	r0, #15
 800becc:	dceb      	bgt.n	800bea6 <_strtod_l+0x22e>
 800bece:	9808      	ldr	r0, [sp, #32]
 800bed0:	230a      	movs	r3, #10
 800bed2:	fb03 2300 	mla	r3, r3, r0, r2
 800bed6:	9308      	str	r3, [sp, #32]
 800bed8:	e7e5      	b.n	800bea6 <_strtod_l+0x22e>
 800beda:	4629      	mov	r1, r5
 800bedc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bede:	1c50      	adds	r0, r2, #1
 800bee0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bee2:	7852      	ldrb	r2, [r2, #1]
 800bee4:	4618      	mov	r0, r3
 800bee6:	460d      	mov	r5, r1
 800bee8:	e7b1      	b.n	800be4e <_strtod_l+0x1d6>
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	2301      	movs	r3, #1
 800bef0:	e77d      	b.n	800bdee <_strtod_l+0x176>
 800bef2:	f04f 0c00 	mov.w	ip, #0
 800bef6:	1ca2      	adds	r2, r4, #2
 800bef8:	9219      	str	r2, [sp, #100]	@ 0x64
 800befa:	78a2      	ldrb	r2, [r4, #2]
 800befc:	e785      	b.n	800be0a <_strtod_l+0x192>
 800befe:	f04f 0c01 	mov.w	ip, #1
 800bf02:	e7f8      	b.n	800bef6 <_strtod_l+0x27e>
 800bf04:	0800ead4 	.word	0x0800ead4
 800bf08:	0800eab0 	.word	0x0800eab0
 800bf0c:	7ff00000 	.word	0x7ff00000
 800bf10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf12:	1c51      	adds	r1, r2, #1
 800bf14:	9119      	str	r1, [sp, #100]	@ 0x64
 800bf16:	7852      	ldrb	r2, [r2, #1]
 800bf18:	2a30      	cmp	r2, #48	@ 0x30
 800bf1a:	d0f9      	beq.n	800bf10 <_strtod_l+0x298>
 800bf1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bf20:	2908      	cmp	r1, #8
 800bf22:	f63f af78 	bhi.w	800be16 <_strtod_l+0x19e>
 800bf26:	3a30      	subs	r2, #48	@ 0x30
 800bf28:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bf2e:	f04f 080a 	mov.w	r8, #10
 800bf32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bf34:	1c56      	adds	r6, r2, #1
 800bf36:	9619      	str	r6, [sp, #100]	@ 0x64
 800bf38:	7852      	ldrb	r2, [r2, #1]
 800bf3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bf3e:	f1be 0f09 	cmp.w	lr, #9
 800bf42:	d939      	bls.n	800bfb8 <_strtod_l+0x340>
 800bf44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bf46:	1a76      	subs	r6, r6, r1
 800bf48:	2e08      	cmp	r6, #8
 800bf4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bf4e:	dc03      	bgt.n	800bf58 <_strtod_l+0x2e0>
 800bf50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf52:	4588      	cmp	r8, r1
 800bf54:	bfa8      	it	ge
 800bf56:	4688      	movge	r8, r1
 800bf58:	f1bc 0f00 	cmp.w	ip, #0
 800bf5c:	d001      	beq.n	800bf62 <_strtod_l+0x2ea>
 800bf5e:	f1c8 0800 	rsb	r8, r8, #0
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	d14e      	bne.n	800c004 <_strtod_l+0x38c>
 800bf66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf68:	4308      	orrs	r0, r1
 800bf6a:	f47f aebe 	bne.w	800bcea <_strtod_l+0x72>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f47f aed6 	bne.w	800bd20 <_strtod_l+0xa8>
 800bf74:	2a69      	cmp	r2, #105	@ 0x69
 800bf76:	d028      	beq.n	800bfca <_strtod_l+0x352>
 800bf78:	dc25      	bgt.n	800bfc6 <_strtod_l+0x34e>
 800bf7a:	2a49      	cmp	r2, #73	@ 0x49
 800bf7c:	d025      	beq.n	800bfca <_strtod_l+0x352>
 800bf7e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bf80:	f47f aece 	bne.w	800bd20 <_strtod_l+0xa8>
 800bf84:	499b      	ldr	r1, [pc, #620]	@ (800c1f4 <_strtod_l+0x57c>)
 800bf86:	a819      	add	r0, sp, #100	@ 0x64
 800bf88:	f001 f9d8 	bl	800d33c <__match>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f43f aec7 	beq.w	800bd20 <_strtod_l+0xa8>
 800bf92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b28      	cmp	r3, #40	@ 0x28
 800bf98:	d12e      	bne.n	800bff8 <_strtod_l+0x380>
 800bf9a:	4997      	ldr	r1, [pc, #604]	@ (800c1f8 <_strtod_l+0x580>)
 800bf9c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf9e:	a819      	add	r0, sp, #100	@ 0x64
 800bfa0:	f001 f9e0 	bl	800d364 <__hexnan>
 800bfa4:	2805      	cmp	r0, #5
 800bfa6:	d127      	bne.n	800bff8 <_strtod_l+0x380>
 800bfa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bfaa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bfae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bfb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bfb6:	e698      	b.n	800bcea <_strtod_l+0x72>
 800bfb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bfba:	fb08 2101 	mla	r1, r8, r1, r2
 800bfbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bfc2:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfc4:	e7b5      	b.n	800bf32 <_strtod_l+0x2ba>
 800bfc6:	2a6e      	cmp	r2, #110	@ 0x6e
 800bfc8:	e7da      	b.n	800bf80 <_strtod_l+0x308>
 800bfca:	498c      	ldr	r1, [pc, #560]	@ (800c1fc <_strtod_l+0x584>)
 800bfcc:	a819      	add	r0, sp, #100	@ 0x64
 800bfce:	f001 f9b5 	bl	800d33c <__match>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	f43f aea4 	beq.w	800bd20 <_strtod_l+0xa8>
 800bfd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfda:	4989      	ldr	r1, [pc, #548]	@ (800c200 <_strtod_l+0x588>)
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	a819      	add	r0, sp, #100	@ 0x64
 800bfe0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfe2:	f001 f9ab 	bl	800d33c <__match>
 800bfe6:	b910      	cbnz	r0, 800bfee <_strtod_l+0x376>
 800bfe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfea:	3301      	adds	r3, #1
 800bfec:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c210 <_strtod_l+0x598>
 800bff2:	f04f 0a00 	mov.w	sl, #0
 800bff6:	e678      	b.n	800bcea <_strtod_l+0x72>
 800bff8:	4882      	ldr	r0, [pc, #520]	@ (800c204 <_strtod_l+0x58c>)
 800bffa:	f000 febd 	bl	800cd78 <nan>
 800bffe:	ec5b ab10 	vmov	sl, fp, d0
 800c002:	e672      	b.n	800bcea <_strtod_l+0x72>
 800c004:	eba8 0309 	sub.w	r3, r8, r9
 800c008:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c00c:	2f00      	cmp	r7, #0
 800c00e:	bf08      	it	eq
 800c010:	462f      	moveq	r7, r5
 800c012:	2d10      	cmp	r5, #16
 800c014:	462c      	mov	r4, r5
 800c016:	bfa8      	it	ge
 800c018:	2410      	movge	r4, #16
 800c01a:	f7f4 fa6b 	bl	80004f4 <__aeabi_ui2d>
 800c01e:	2d09      	cmp	r5, #9
 800c020:	4682      	mov	sl, r0
 800c022:	468b      	mov	fp, r1
 800c024:	dc13      	bgt.n	800c04e <_strtod_l+0x3d6>
 800c026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f43f ae5e 	beq.w	800bcea <_strtod_l+0x72>
 800c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c030:	dd78      	ble.n	800c124 <_strtod_l+0x4ac>
 800c032:	2b16      	cmp	r3, #22
 800c034:	dc5f      	bgt.n	800c0f6 <_strtod_l+0x47e>
 800c036:	4974      	ldr	r1, [pc, #464]	@ (800c208 <_strtod_l+0x590>)
 800c038:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c03c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c040:	4652      	mov	r2, sl
 800c042:	465b      	mov	r3, fp
 800c044:	f7f4 fad0 	bl	80005e8 <__aeabi_dmul>
 800c048:	4682      	mov	sl, r0
 800c04a:	468b      	mov	fp, r1
 800c04c:	e64d      	b.n	800bcea <_strtod_l+0x72>
 800c04e:	4b6e      	ldr	r3, [pc, #440]	@ (800c208 <_strtod_l+0x590>)
 800c050:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c054:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c058:	f7f4 fac6 	bl	80005e8 <__aeabi_dmul>
 800c05c:	4682      	mov	sl, r0
 800c05e:	9808      	ldr	r0, [sp, #32]
 800c060:	468b      	mov	fp, r1
 800c062:	f7f4 fa47 	bl	80004f4 <__aeabi_ui2d>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	f7f4 f905 	bl	800027c <__adddf3>
 800c072:	2d0f      	cmp	r5, #15
 800c074:	4682      	mov	sl, r0
 800c076:	468b      	mov	fp, r1
 800c078:	ddd5      	ble.n	800c026 <_strtod_l+0x3ae>
 800c07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c07c:	1b2c      	subs	r4, r5, r4
 800c07e:	441c      	add	r4, r3
 800c080:	2c00      	cmp	r4, #0
 800c082:	f340 8096 	ble.w	800c1b2 <_strtod_l+0x53a>
 800c086:	f014 030f 	ands.w	r3, r4, #15
 800c08a:	d00a      	beq.n	800c0a2 <_strtod_l+0x42a>
 800c08c:	495e      	ldr	r1, [pc, #376]	@ (800c208 <_strtod_l+0x590>)
 800c08e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c092:	4652      	mov	r2, sl
 800c094:	465b      	mov	r3, fp
 800c096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c09a:	f7f4 faa5 	bl	80005e8 <__aeabi_dmul>
 800c09e:	4682      	mov	sl, r0
 800c0a0:	468b      	mov	fp, r1
 800c0a2:	f034 040f 	bics.w	r4, r4, #15
 800c0a6:	d073      	beq.n	800c190 <_strtod_l+0x518>
 800c0a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c0ac:	dd48      	ble.n	800c140 <_strtod_l+0x4c8>
 800c0ae:	2400      	movs	r4, #0
 800c0b0:	46a0      	mov	r8, r4
 800c0b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c0b4:	46a1      	mov	r9, r4
 800c0b6:	9a05      	ldr	r2, [sp, #20]
 800c0b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c210 <_strtod_l+0x598>
 800c0bc:	2322      	movs	r3, #34	@ 0x22
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	f04f 0a00 	mov.w	sl, #0
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f43f ae0f 	beq.w	800bcea <_strtod_l+0x72>
 800c0cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0ce:	9805      	ldr	r0, [sp, #20]
 800c0d0:	f001 fae4 	bl	800d69c <_Bfree>
 800c0d4:	9805      	ldr	r0, [sp, #20]
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f001 fae0 	bl	800d69c <_Bfree>
 800c0dc:	9805      	ldr	r0, [sp, #20]
 800c0de:	4641      	mov	r1, r8
 800c0e0:	f001 fadc 	bl	800d69c <_Bfree>
 800c0e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0e6:	9805      	ldr	r0, [sp, #20]
 800c0e8:	f001 fad8 	bl	800d69c <_Bfree>
 800c0ec:	9805      	ldr	r0, [sp, #20]
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	f001 fad4 	bl	800d69c <_Bfree>
 800c0f4:	e5f9      	b.n	800bcea <_strtod_l+0x72>
 800c0f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	dbbc      	blt.n	800c07a <_strtod_l+0x402>
 800c100:	4c41      	ldr	r4, [pc, #260]	@ (800c208 <_strtod_l+0x590>)
 800c102:	f1c5 050f 	rsb	r5, r5, #15
 800c106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c10a:	4652      	mov	r2, sl
 800c10c:	465b      	mov	r3, fp
 800c10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c112:	f7f4 fa69 	bl	80005e8 <__aeabi_dmul>
 800c116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c118:	1b5d      	subs	r5, r3, r5
 800c11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c11e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c122:	e78f      	b.n	800c044 <_strtod_l+0x3cc>
 800c124:	3316      	adds	r3, #22
 800c126:	dba8      	blt.n	800c07a <_strtod_l+0x402>
 800c128:	4b37      	ldr	r3, [pc, #220]	@ (800c208 <_strtod_l+0x590>)
 800c12a:	eba9 0808 	sub.w	r8, r9, r8
 800c12e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c132:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c136:	4650      	mov	r0, sl
 800c138:	4659      	mov	r1, fp
 800c13a:	f7f4 fb7f 	bl	800083c <__aeabi_ddiv>
 800c13e:	e783      	b.n	800c048 <_strtod_l+0x3d0>
 800c140:	4b32      	ldr	r3, [pc, #200]	@ (800c20c <_strtod_l+0x594>)
 800c142:	9308      	str	r3, [sp, #32]
 800c144:	2300      	movs	r3, #0
 800c146:	1124      	asrs	r4, r4, #4
 800c148:	4650      	mov	r0, sl
 800c14a:	4659      	mov	r1, fp
 800c14c:	461e      	mov	r6, r3
 800c14e:	2c01      	cmp	r4, #1
 800c150:	dc21      	bgt.n	800c196 <_strtod_l+0x51e>
 800c152:	b10b      	cbz	r3, 800c158 <_strtod_l+0x4e0>
 800c154:	4682      	mov	sl, r0
 800c156:	468b      	mov	fp, r1
 800c158:	492c      	ldr	r1, [pc, #176]	@ (800c20c <_strtod_l+0x594>)
 800c15a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c15e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c162:	4652      	mov	r2, sl
 800c164:	465b      	mov	r3, fp
 800c166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16a:	f7f4 fa3d 	bl	80005e8 <__aeabi_dmul>
 800c16e:	4b28      	ldr	r3, [pc, #160]	@ (800c210 <_strtod_l+0x598>)
 800c170:	460a      	mov	r2, r1
 800c172:	400b      	ands	r3, r1
 800c174:	4927      	ldr	r1, [pc, #156]	@ (800c214 <_strtod_l+0x59c>)
 800c176:	428b      	cmp	r3, r1
 800c178:	4682      	mov	sl, r0
 800c17a:	d898      	bhi.n	800c0ae <_strtod_l+0x436>
 800c17c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c180:	428b      	cmp	r3, r1
 800c182:	bf86      	itte	hi
 800c184:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c218 <_strtod_l+0x5a0>
 800c188:	f04f 3aff 	movhi.w	sl, #4294967295
 800c18c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c190:	2300      	movs	r3, #0
 800c192:	9308      	str	r3, [sp, #32]
 800c194:	e07a      	b.n	800c28c <_strtod_l+0x614>
 800c196:	07e2      	lsls	r2, r4, #31
 800c198:	d505      	bpl.n	800c1a6 <_strtod_l+0x52e>
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 fa22 	bl	80005e8 <__aeabi_dmul>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	9a08      	ldr	r2, [sp, #32]
 800c1a8:	3208      	adds	r2, #8
 800c1aa:	3601      	adds	r6, #1
 800c1ac:	1064      	asrs	r4, r4, #1
 800c1ae:	9208      	str	r2, [sp, #32]
 800c1b0:	e7cd      	b.n	800c14e <_strtod_l+0x4d6>
 800c1b2:	d0ed      	beq.n	800c190 <_strtod_l+0x518>
 800c1b4:	4264      	negs	r4, r4
 800c1b6:	f014 020f 	ands.w	r2, r4, #15
 800c1ba:	d00a      	beq.n	800c1d2 <_strtod_l+0x55a>
 800c1bc:	4b12      	ldr	r3, [pc, #72]	@ (800c208 <_strtod_l+0x590>)
 800c1be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1c2:	4650      	mov	r0, sl
 800c1c4:	4659      	mov	r1, fp
 800c1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ca:	f7f4 fb37 	bl	800083c <__aeabi_ddiv>
 800c1ce:	4682      	mov	sl, r0
 800c1d0:	468b      	mov	fp, r1
 800c1d2:	1124      	asrs	r4, r4, #4
 800c1d4:	d0dc      	beq.n	800c190 <_strtod_l+0x518>
 800c1d6:	2c1f      	cmp	r4, #31
 800c1d8:	dd20      	ble.n	800c21c <_strtod_l+0x5a4>
 800c1da:	2400      	movs	r4, #0
 800c1dc:	46a0      	mov	r8, r4
 800c1de:	940a      	str	r4, [sp, #40]	@ 0x28
 800c1e0:	46a1      	mov	r9, r4
 800c1e2:	9a05      	ldr	r2, [sp, #20]
 800c1e4:	2322      	movs	r3, #34	@ 0x22
 800c1e6:	f04f 0a00 	mov.w	sl, #0
 800c1ea:	f04f 0b00 	mov.w	fp, #0
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e768      	b.n	800c0c4 <_strtod_l+0x44c>
 800c1f2:	bf00      	nop
 800c1f4:	0800eabb 	.word	0x0800eabb
 800c1f8:	0800eac0 	.word	0x0800eac0
 800c1fc:	0800eab2 	.word	0x0800eab2
 800c200:	0800eab5 	.word	0x0800eab5
 800c204:	0800ee66 	.word	0x0800ee66
 800c208:	0800ed30 	.word	0x0800ed30
 800c20c:	0800ed08 	.word	0x0800ed08
 800c210:	7ff00000 	.word	0x7ff00000
 800c214:	7ca00000 	.word	0x7ca00000
 800c218:	7fefffff 	.word	0x7fefffff
 800c21c:	f014 0310 	ands.w	r3, r4, #16
 800c220:	bf18      	it	ne
 800c222:	236a      	movne	r3, #106	@ 0x6a
 800c224:	4ea9      	ldr	r6, [pc, #676]	@ (800c4cc <_strtod_l+0x854>)
 800c226:	9308      	str	r3, [sp, #32]
 800c228:	4650      	mov	r0, sl
 800c22a:	4659      	mov	r1, fp
 800c22c:	2300      	movs	r3, #0
 800c22e:	07e2      	lsls	r2, r4, #31
 800c230:	d504      	bpl.n	800c23c <_strtod_l+0x5c4>
 800c232:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c236:	f7f4 f9d7 	bl	80005e8 <__aeabi_dmul>
 800c23a:	2301      	movs	r3, #1
 800c23c:	1064      	asrs	r4, r4, #1
 800c23e:	f106 0608 	add.w	r6, r6, #8
 800c242:	d1f4      	bne.n	800c22e <_strtod_l+0x5b6>
 800c244:	b10b      	cbz	r3, 800c24a <_strtod_l+0x5d2>
 800c246:	4682      	mov	sl, r0
 800c248:	468b      	mov	fp, r1
 800c24a:	9b08      	ldr	r3, [sp, #32]
 800c24c:	b1b3      	cbz	r3, 800c27c <_strtod_l+0x604>
 800c24e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c252:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c256:	2b00      	cmp	r3, #0
 800c258:	4659      	mov	r1, fp
 800c25a:	dd0f      	ble.n	800c27c <_strtod_l+0x604>
 800c25c:	2b1f      	cmp	r3, #31
 800c25e:	dd55      	ble.n	800c30c <_strtod_l+0x694>
 800c260:	2b34      	cmp	r3, #52	@ 0x34
 800c262:	bfde      	ittt	le
 800c264:	f04f 33ff 	movle.w	r3, #4294967295
 800c268:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c26c:	4093      	lslle	r3, r2
 800c26e:	f04f 0a00 	mov.w	sl, #0
 800c272:	bfcc      	ite	gt
 800c274:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c278:	ea03 0b01 	andle.w	fp, r3, r1
 800c27c:	2200      	movs	r2, #0
 800c27e:	2300      	movs	r3, #0
 800c280:	4650      	mov	r0, sl
 800c282:	4659      	mov	r1, fp
 800c284:	f7f4 fc18 	bl	8000ab8 <__aeabi_dcmpeq>
 800c288:	2800      	cmp	r0, #0
 800c28a:	d1a6      	bne.n	800c1da <_strtod_l+0x562>
 800c28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c292:	9805      	ldr	r0, [sp, #20]
 800c294:	462b      	mov	r3, r5
 800c296:	463a      	mov	r2, r7
 800c298:	f001 fa68 	bl	800d76c <__s2b>
 800c29c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f43f af05 	beq.w	800c0ae <_strtod_l+0x436>
 800c2a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	eba9 0308 	sub.w	r3, r9, r8
 800c2ac:	bfa8      	it	ge
 800c2ae:	2300      	movge	r3, #0
 800c2b0:	9312      	str	r3, [sp, #72]	@ 0x48
 800c2b2:	2400      	movs	r4, #0
 800c2b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c2b8:	9316      	str	r3, [sp, #88]	@ 0x58
 800c2ba:	46a0      	mov	r8, r4
 800c2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2be:	9805      	ldr	r0, [sp, #20]
 800c2c0:	6859      	ldr	r1, [r3, #4]
 800c2c2:	f001 f9ab 	bl	800d61c <_Balloc>
 800c2c6:	4681      	mov	r9, r0
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f43f aef4 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c2ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d0:	691a      	ldr	r2, [r3, #16]
 800c2d2:	3202      	adds	r2, #2
 800c2d4:	f103 010c 	add.w	r1, r3, #12
 800c2d8:	0092      	lsls	r2, r2, #2
 800c2da:	300c      	adds	r0, #12
 800c2dc:	f000 fd3d 	bl	800cd5a <memcpy>
 800c2e0:	ec4b ab10 	vmov	d0, sl, fp
 800c2e4:	9805      	ldr	r0, [sp, #20]
 800c2e6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2e8:	a91b      	add	r1, sp, #108	@ 0x6c
 800c2ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c2ee:	f001 fd79 	bl	800dde4 <__d2b>
 800c2f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f43f aede 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c2fa:	9805      	ldr	r0, [sp, #20]
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	f001 facb 	bl	800d898 <__i2b>
 800c302:	4680      	mov	r8, r0
 800c304:	b948      	cbnz	r0, 800c31a <_strtod_l+0x6a2>
 800c306:	f04f 0800 	mov.w	r8, #0
 800c30a:	e6d4      	b.n	800c0b6 <_strtod_l+0x43e>
 800c30c:	f04f 32ff 	mov.w	r2, #4294967295
 800c310:	fa02 f303 	lsl.w	r3, r2, r3
 800c314:	ea03 0a0a 	and.w	sl, r3, sl
 800c318:	e7b0      	b.n	800c27c <_strtod_l+0x604>
 800c31a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c31c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c31e:	2d00      	cmp	r5, #0
 800c320:	bfab      	itete	ge
 800c322:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c324:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c326:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c328:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c32a:	bfac      	ite	ge
 800c32c:	18ef      	addge	r7, r5, r3
 800c32e:	1b5e      	sublt	r6, r3, r5
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	1aed      	subs	r5, r5, r3
 800c334:	4415      	add	r5, r2
 800c336:	4b66      	ldr	r3, [pc, #408]	@ (800c4d0 <_strtod_l+0x858>)
 800c338:	3d01      	subs	r5, #1
 800c33a:	429d      	cmp	r5, r3
 800c33c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c340:	da50      	bge.n	800c3e4 <_strtod_l+0x76c>
 800c342:	1b5b      	subs	r3, r3, r5
 800c344:	2b1f      	cmp	r3, #31
 800c346:	eba2 0203 	sub.w	r2, r2, r3
 800c34a:	f04f 0101 	mov.w	r1, #1
 800c34e:	dc3d      	bgt.n	800c3cc <_strtod_l+0x754>
 800c350:	fa01 f303 	lsl.w	r3, r1, r3
 800c354:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c356:	2300      	movs	r3, #0
 800c358:	9310      	str	r3, [sp, #64]	@ 0x40
 800c35a:	18bd      	adds	r5, r7, r2
 800c35c:	9b08      	ldr	r3, [sp, #32]
 800c35e:	42af      	cmp	r7, r5
 800c360:	4416      	add	r6, r2
 800c362:	441e      	add	r6, r3
 800c364:	463b      	mov	r3, r7
 800c366:	bfa8      	it	ge
 800c368:	462b      	movge	r3, r5
 800c36a:	42b3      	cmp	r3, r6
 800c36c:	bfa8      	it	ge
 800c36e:	4633      	movge	r3, r6
 800c370:	2b00      	cmp	r3, #0
 800c372:	bfc2      	ittt	gt
 800c374:	1aed      	subgt	r5, r5, r3
 800c376:	1af6      	subgt	r6, r6, r3
 800c378:	1aff      	subgt	r7, r7, r3
 800c37a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	dd16      	ble.n	800c3ae <_strtod_l+0x736>
 800c380:	4641      	mov	r1, r8
 800c382:	9805      	ldr	r0, [sp, #20]
 800c384:	461a      	mov	r2, r3
 800c386:	f001 fb47 	bl	800da18 <__pow5mult>
 800c38a:	4680      	mov	r8, r0
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d0ba      	beq.n	800c306 <_strtod_l+0x68e>
 800c390:	4601      	mov	r1, r0
 800c392:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c394:	9805      	ldr	r0, [sp, #20]
 800c396:	f001 fa95 	bl	800d8c4 <__multiply>
 800c39a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f43f ae8a 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c3a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3a4:	9805      	ldr	r0, [sp, #20]
 800c3a6:	f001 f979 	bl	800d69c <_Bfree>
 800c3aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	dc1d      	bgt.n	800c3ee <_strtod_l+0x776>
 800c3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd23      	ble.n	800c400 <_strtod_l+0x788>
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c3bc:	9805      	ldr	r0, [sp, #20]
 800c3be:	f001 fb2b 	bl	800da18 <__pow5mult>
 800c3c2:	4681      	mov	r9, r0
 800c3c4:	b9e0      	cbnz	r0, 800c400 <_strtod_l+0x788>
 800c3c6:	f04f 0900 	mov.w	r9, #0
 800c3ca:	e674      	b.n	800c0b6 <_strtod_l+0x43e>
 800c3cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c3d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c3d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c3d8:	35e2      	adds	r5, #226	@ 0xe2
 800c3da:	fa01 f305 	lsl.w	r3, r1, r5
 800c3de:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c3e2:	e7ba      	b.n	800c35a <_strtod_l+0x6e2>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3ec:	e7b5      	b.n	800c35a <_strtod_l+0x6e2>
 800c3ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3f0:	9805      	ldr	r0, [sp, #20]
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	f001 fb6a 	bl	800dacc <__lshift>
 800c3f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d1d9      	bne.n	800c3b2 <_strtod_l+0x73a>
 800c3fe:	e65a      	b.n	800c0b6 <_strtod_l+0x43e>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd07      	ble.n	800c414 <_strtod_l+0x79c>
 800c404:	4649      	mov	r1, r9
 800c406:	9805      	ldr	r0, [sp, #20]
 800c408:	4632      	mov	r2, r6
 800c40a:	f001 fb5f 	bl	800dacc <__lshift>
 800c40e:	4681      	mov	r9, r0
 800c410:	2800      	cmp	r0, #0
 800c412:	d0d8      	beq.n	800c3c6 <_strtod_l+0x74e>
 800c414:	2f00      	cmp	r7, #0
 800c416:	dd08      	ble.n	800c42a <_strtod_l+0x7b2>
 800c418:	4641      	mov	r1, r8
 800c41a:	9805      	ldr	r0, [sp, #20]
 800c41c:	463a      	mov	r2, r7
 800c41e:	f001 fb55 	bl	800dacc <__lshift>
 800c422:	4680      	mov	r8, r0
 800c424:	2800      	cmp	r0, #0
 800c426:	f43f ae46 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c42a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c42c:	9805      	ldr	r0, [sp, #20]
 800c42e:	464a      	mov	r2, r9
 800c430:	f001 fbd4 	bl	800dbdc <__mdiff>
 800c434:	4604      	mov	r4, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	f43f ae3d 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c43c:	68c3      	ldr	r3, [r0, #12]
 800c43e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c440:	2300      	movs	r3, #0
 800c442:	60c3      	str	r3, [r0, #12]
 800c444:	4641      	mov	r1, r8
 800c446:	f001 fbad 	bl	800dba4 <__mcmp>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	da46      	bge.n	800c4dc <_strtod_l+0x864>
 800c44e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c450:	ea53 030a 	orrs.w	r3, r3, sl
 800c454:	d16c      	bne.n	800c530 <_strtod_l+0x8b8>
 800c456:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d168      	bne.n	800c530 <_strtod_l+0x8b8>
 800c45e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c462:	0d1b      	lsrs	r3, r3, #20
 800c464:	051b      	lsls	r3, r3, #20
 800c466:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c46a:	d961      	bls.n	800c530 <_strtod_l+0x8b8>
 800c46c:	6963      	ldr	r3, [r4, #20]
 800c46e:	b913      	cbnz	r3, 800c476 <_strtod_l+0x7fe>
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	2b01      	cmp	r3, #1
 800c474:	dd5c      	ble.n	800c530 <_strtod_l+0x8b8>
 800c476:	4621      	mov	r1, r4
 800c478:	2201      	movs	r2, #1
 800c47a:	9805      	ldr	r0, [sp, #20]
 800c47c:	f001 fb26 	bl	800dacc <__lshift>
 800c480:	4641      	mov	r1, r8
 800c482:	4604      	mov	r4, r0
 800c484:	f001 fb8e 	bl	800dba4 <__mcmp>
 800c488:	2800      	cmp	r0, #0
 800c48a:	dd51      	ble.n	800c530 <_strtod_l+0x8b8>
 800c48c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c490:	9a08      	ldr	r2, [sp, #32]
 800c492:	0d1b      	lsrs	r3, r3, #20
 800c494:	051b      	lsls	r3, r3, #20
 800c496:	2a00      	cmp	r2, #0
 800c498:	d06b      	beq.n	800c572 <_strtod_l+0x8fa>
 800c49a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c49e:	d868      	bhi.n	800c572 <_strtod_l+0x8fa>
 800c4a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c4a4:	f67f ae9d 	bls.w	800c1e2 <_strtod_l+0x56a>
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4d4 <_strtod_l+0x85c>)
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f7f4 f89a 	bl	80005e8 <__aeabi_dmul>
 800c4b4:	4b08      	ldr	r3, [pc, #32]	@ (800c4d8 <_strtod_l+0x860>)
 800c4b6:	400b      	ands	r3, r1
 800c4b8:	4682      	mov	sl, r0
 800c4ba:	468b      	mov	fp, r1
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f47f ae05 	bne.w	800c0cc <_strtod_l+0x454>
 800c4c2:	9a05      	ldr	r2, [sp, #20]
 800c4c4:	2322      	movs	r3, #34	@ 0x22
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	e600      	b.n	800c0cc <_strtod_l+0x454>
 800c4ca:	bf00      	nop
 800c4cc:	0800eae8 	.word	0x0800eae8
 800c4d0:	fffffc02 	.word	0xfffffc02
 800c4d4:	39500000 	.word	0x39500000
 800c4d8:	7ff00000 	.word	0x7ff00000
 800c4dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c4e0:	d165      	bne.n	800c5ae <_strtod_l+0x936>
 800c4e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4e8:	b35a      	cbz	r2, 800c542 <_strtod_l+0x8ca>
 800c4ea:	4a9f      	ldr	r2, [pc, #636]	@ (800c768 <_strtod_l+0xaf0>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d12b      	bne.n	800c548 <_strtod_l+0x8d0>
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	4651      	mov	r1, sl
 800c4f4:	b303      	cbz	r3, 800c538 <_strtod_l+0x8c0>
 800c4f6:	4b9d      	ldr	r3, [pc, #628]	@ (800c76c <_strtod_l+0xaf4>)
 800c4f8:	465a      	mov	r2, fp
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c500:	f04f 32ff 	mov.w	r2, #4294967295
 800c504:	d81b      	bhi.n	800c53e <_strtod_l+0x8c6>
 800c506:	0d1b      	lsrs	r3, r3, #20
 800c508:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c50c:	fa02 f303 	lsl.w	r3, r2, r3
 800c510:	4299      	cmp	r1, r3
 800c512:	d119      	bne.n	800c548 <_strtod_l+0x8d0>
 800c514:	4b96      	ldr	r3, [pc, #600]	@ (800c770 <_strtod_l+0xaf8>)
 800c516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c518:	429a      	cmp	r2, r3
 800c51a:	d102      	bne.n	800c522 <_strtod_l+0x8aa>
 800c51c:	3101      	adds	r1, #1
 800c51e:	f43f adca 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c522:	4b92      	ldr	r3, [pc, #584]	@ (800c76c <_strtod_l+0xaf4>)
 800c524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c526:	401a      	ands	r2, r3
 800c528:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c52c:	f04f 0a00 	mov.w	sl, #0
 800c530:	9b08      	ldr	r3, [sp, #32]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1b8      	bne.n	800c4a8 <_strtod_l+0x830>
 800c536:	e5c9      	b.n	800c0cc <_strtod_l+0x454>
 800c538:	f04f 33ff 	mov.w	r3, #4294967295
 800c53c:	e7e8      	b.n	800c510 <_strtod_l+0x898>
 800c53e:	4613      	mov	r3, r2
 800c540:	e7e6      	b.n	800c510 <_strtod_l+0x898>
 800c542:	ea53 030a 	orrs.w	r3, r3, sl
 800c546:	d0a1      	beq.n	800c48c <_strtod_l+0x814>
 800c548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c54a:	b1db      	cbz	r3, 800c584 <_strtod_l+0x90c>
 800c54c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c54e:	4213      	tst	r3, r2
 800c550:	d0ee      	beq.n	800c530 <_strtod_l+0x8b8>
 800c552:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c554:	9a08      	ldr	r2, [sp, #32]
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	b1bb      	cbz	r3, 800c58c <_strtod_l+0x914>
 800c55c:	f7ff fb6e 	bl	800bc3c <sulp>
 800c560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c564:	ec53 2b10 	vmov	r2, r3, d0
 800c568:	f7f3 fe88 	bl	800027c <__adddf3>
 800c56c:	4682      	mov	sl, r0
 800c56e:	468b      	mov	fp, r1
 800c570:	e7de      	b.n	800c530 <_strtod_l+0x8b8>
 800c572:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c576:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c57a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c57e:	f04f 3aff 	mov.w	sl, #4294967295
 800c582:	e7d5      	b.n	800c530 <_strtod_l+0x8b8>
 800c584:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c586:	ea13 0f0a 	tst.w	r3, sl
 800c58a:	e7e1      	b.n	800c550 <_strtod_l+0x8d8>
 800c58c:	f7ff fb56 	bl	800bc3c <sulp>
 800c590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c594:	ec53 2b10 	vmov	r2, r3, d0
 800c598:	f7f3 fe6e 	bl	8000278 <__aeabi_dsub>
 800c59c:	2200      	movs	r2, #0
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4682      	mov	sl, r0
 800c5a2:	468b      	mov	fp, r1
 800c5a4:	f7f4 fa88 	bl	8000ab8 <__aeabi_dcmpeq>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d0c1      	beq.n	800c530 <_strtod_l+0x8b8>
 800c5ac:	e619      	b.n	800c1e2 <_strtod_l+0x56a>
 800c5ae:	4641      	mov	r1, r8
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f001 fc6f 	bl	800de94 <__ratio>
 800c5b6:	ec57 6b10 	vmov	r6, r7, d0
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	4639      	mov	r1, r7
 800c5c4:	f7f4 fa8c 	bl	8000ae0 <__aeabi_dcmple>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d06f      	beq.n	800c6ac <_strtod_l+0xa34>
 800c5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d17a      	bne.n	800c6c8 <_strtod_l+0xa50>
 800c5d2:	f1ba 0f00 	cmp.w	sl, #0
 800c5d6:	d158      	bne.n	800c68a <_strtod_l+0xa12>
 800c5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d15a      	bne.n	800c698 <_strtod_l+0xa20>
 800c5e2:	4b64      	ldr	r3, [pc, #400]	@ (800c774 <_strtod_l+0xafc>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f4 fa6f 	bl	8000acc <__aeabi_dcmplt>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d159      	bne.n	800c6a6 <_strtod_l+0xa2e>
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	4b60      	ldr	r3, [pc, #384]	@ (800c778 <_strtod_l+0xb00>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f7f3 fff5 	bl	80005e8 <__aeabi_dmul>
 800c5fe:	4606      	mov	r6, r0
 800c600:	460f      	mov	r7, r1
 800c602:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c606:	9606      	str	r6, [sp, #24]
 800c608:	9307      	str	r3, [sp, #28]
 800c60a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c60e:	4d57      	ldr	r5, [pc, #348]	@ (800c76c <_strtod_l+0xaf4>)
 800c610:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c616:	401d      	ands	r5, r3
 800c618:	4b58      	ldr	r3, [pc, #352]	@ (800c77c <_strtod_l+0xb04>)
 800c61a:	429d      	cmp	r5, r3
 800c61c:	f040 80b2 	bne.w	800c784 <_strtod_l+0xb0c>
 800c620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c622:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c626:	ec4b ab10 	vmov	d0, sl, fp
 800c62a:	f001 fb6b 	bl	800dd04 <__ulp>
 800c62e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c632:	ec51 0b10 	vmov	r0, r1, d0
 800c636:	f7f3 ffd7 	bl	80005e8 <__aeabi_dmul>
 800c63a:	4652      	mov	r2, sl
 800c63c:	465b      	mov	r3, fp
 800c63e:	f7f3 fe1d 	bl	800027c <__adddf3>
 800c642:	460b      	mov	r3, r1
 800c644:	4949      	ldr	r1, [pc, #292]	@ (800c76c <_strtod_l+0xaf4>)
 800c646:	4a4e      	ldr	r2, [pc, #312]	@ (800c780 <_strtod_l+0xb08>)
 800c648:	4019      	ands	r1, r3
 800c64a:	4291      	cmp	r1, r2
 800c64c:	4682      	mov	sl, r0
 800c64e:	d942      	bls.n	800c6d6 <_strtod_l+0xa5e>
 800c650:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c652:	4b47      	ldr	r3, [pc, #284]	@ (800c770 <_strtod_l+0xaf8>)
 800c654:	429a      	cmp	r2, r3
 800c656:	d103      	bne.n	800c660 <_strtod_l+0x9e8>
 800c658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c65a:	3301      	adds	r3, #1
 800c65c:	f43f ad2b 	beq.w	800c0b6 <_strtod_l+0x43e>
 800c660:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c770 <_strtod_l+0xaf8>
 800c664:	f04f 3aff 	mov.w	sl, #4294967295
 800c668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c66a:	9805      	ldr	r0, [sp, #20]
 800c66c:	f001 f816 	bl	800d69c <_Bfree>
 800c670:	9805      	ldr	r0, [sp, #20]
 800c672:	4649      	mov	r1, r9
 800c674:	f001 f812 	bl	800d69c <_Bfree>
 800c678:	9805      	ldr	r0, [sp, #20]
 800c67a:	4641      	mov	r1, r8
 800c67c:	f001 f80e 	bl	800d69c <_Bfree>
 800c680:	9805      	ldr	r0, [sp, #20]
 800c682:	4621      	mov	r1, r4
 800c684:	f001 f80a 	bl	800d69c <_Bfree>
 800c688:	e618      	b.n	800c2bc <_strtod_l+0x644>
 800c68a:	f1ba 0f01 	cmp.w	sl, #1
 800c68e:	d103      	bne.n	800c698 <_strtod_l+0xa20>
 800c690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c692:	2b00      	cmp	r3, #0
 800c694:	f43f ada5 	beq.w	800c1e2 <_strtod_l+0x56a>
 800c698:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c748 <_strtod_l+0xad0>
 800c69c:	4f35      	ldr	r7, [pc, #212]	@ (800c774 <_strtod_l+0xafc>)
 800c69e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6a2:	2600      	movs	r6, #0
 800c6a4:	e7b1      	b.n	800c60a <_strtod_l+0x992>
 800c6a6:	4f34      	ldr	r7, [pc, #208]	@ (800c778 <_strtod_l+0xb00>)
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	e7aa      	b.n	800c602 <_strtod_l+0x98a>
 800c6ac:	4b32      	ldr	r3, [pc, #200]	@ (800c778 <_strtod_l+0xb00>)
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f7f3 ff98 	bl	80005e8 <__aeabi_dmul>
 800c6b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460f      	mov	r7, r1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d09f      	beq.n	800c602 <_strtod_l+0x98a>
 800c6c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c6c6:	e7a0      	b.n	800c60a <_strtod_l+0x992>
 800c6c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c750 <_strtod_l+0xad8>
 800c6cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6d0:	ec57 6b17 	vmov	r6, r7, d7
 800c6d4:	e799      	b.n	800c60a <_strtod_l+0x992>
 800c6d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c6da:	9b08      	ldr	r3, [sp, #32]
 800c6dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1c1      	bne.n	800c668 <_strtod_l+0x9f0>
 800c6e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c6e8:	0d1b      	lsrs	r3, r3, #20
 800c6ea:	051b      	lsls	r3, r3, #20
 800c6ec:	429d      	cmp	r5, r3
 800c6ee:	d1bb      	bne.n	800c668 <_strtod_l+0x9f0>
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	f7f4 fab0 	bl	8000c58 <__aeabi_d2lz>
 800c6f8:	f7f3 ff48 	bl	800058c <__aeabi_l2d>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	4630      	mov	r0, r6
 800c702:	4639      	mov	r1, r7
 800c704:	f7f3 fdb8 	bl	8000278 <__aeabi_dsub>
 800c708:	460b      	mov	r3, r1
 800c70a:	4602      	mov	r2, r0
 800c70c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c710:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c716:	ea46 060a 	orr.w	r6, r6, sl
 800c71a:	431e      	orrs	r6, r3
 800c71c:	d06f      	beq.n	800c7fe <_strtod_l+0xb86>
 800c71e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c758 <_strtod_l+0xae0>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f4 f9d2 	bl	8000acc <__aeabi_dcmplt>
 800c728:	2800      	cmp	r0, #0
 800c72a:	f47f accf 	bne.w	800c0cc <_strtod_l+0x454>
 800c72e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c760 <_strtod_l+0xae8>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c738:	f7f4 f9e6 	bl	8000b08 <__aeabi_dcmpgt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d093      	beq.n	800c668 <_strtod_l+0x9f0>
 800c740:	e4c4      	b.n	800c0cc <_strtod_l+0x454>
 800c742:	bf00      	nop
 800c744:	f3af 8000 	nop.w
 800c748:	00000000 	.word	0x00000000
 800c74c:	bff00000 	.word	0xbff00000
 800c750:	00000000 	.word	0x00000000
 800c754:	3ff00000 	.word	0x3ff00000
 800c758:	94a03595 	.word	0x94a03595
 800c75c:	3fdfffff 	.word	0x3fdfffff
 800c760:	35afe535 	.word	0x35afe535
 800c764:	3fe00000 	.word	0x3fe00000
 800c768:	000fffff 	.word	0x000fffff
 800c76c:	7ff00000 	.word	0x7ff00000
 800c770:	7fefffff 	.word	0x7fefffff
 800c774:	3ff00000 	.word	0x3ff00000
 800c778:	3fe00000 	.word	0x3fe00000
 800c77c:	7fe00000 	.word	0x7fe00000
 800c780:	7c9fffff 	.word	0x7c9fffff
 800c784:	9b08      	ldr	r3, [sp, #32]
 800c786:	b323      	cbz	r3, 800c7d2 <_strtod_l+0xb5a>
 800c788:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c78c:	d821      	bhi.n	800c7d2 <_strtod_l+0xb5a>
 800c78e:	a328      	add	r3, pc, #160	@ (adr r3, 800c830 <_strtod_l+0xbb8>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f4 f9a2 	bl	8000ae0 <__aeabi_dcmple>
 800c79c:	b1a0      	cbz	r0, 800c7c8 <_strtod_l+0xb50>
 800c79e:	4639      	mov	r1, r7
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f7f4 f9d1 	bl	8000b48 <__aeabi_d2uiz>
 800c7a6:	2801      	cmp	r0, #1
 800c7a8:	bf38      	it	cc
 800c7aa:	2001      	movcc	r0, #1
 800c7ac:	f7f3 fea2 	bl	80004f4 <__aeabi_ui2d>
 800c7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b2:	4606      	mov	r6, r0
 800c7b4:	460f      	mov	r7, r1
 800c7b6:	b9fb      	cbnz	r3, 800c7f8 <_strtod_l+0xb80>
 800c7b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800c7be:	9315      	str	r3, [sp, #84]	@ 0x54
 800c7c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c7c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c7c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c7ce:	1b5b      	subs	r3, r3, r5
 800c7d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c7d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c7d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c7da:	f001 fa93 	bl	800dd04 <__ulp>
 800c7de:	4650      	mov	r0, sl
 800c7e0:	ec53 2b10 	vmov	r2, r3, d0
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	f7f3 feff 	bl	80005e8 <__aeabi_dmul>
 800c7ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c7ee:	f7f3 fd45 	bl	800027c <__adddf3>
 800c7f2:	4682      	mov	sl, r0
 800c7f4:	468b      	mov	fp, r1
 800c7f6:	e770      	b.n	800c6da <_strtod_l+0xa62>
 800c7f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c7fc:	e7e0      	b.n	800c7c0 <_strtod_l+0xb48>
 800c7fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c838 <_strtod_l+0xbc0>)
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	f7f4 f962 	bl	8000acc <__aeabi_dcmplt>
 800c808:	e798      	b.n	800c73c <_strtod_l+0xac4>
 800c80a:	2300      	movs	r3, #0
 800c80c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c80e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	f7ff ba6d 	b.w	800bcf2 <_strtod_l+0x7a>
 800c818:	2a65      	cmp	r2, #101	@ 0x65
 800c81a:	f43f ab66 	beq.w	800beea <_strtod_l+0x272>
 800c81e:	2a45      	cmp	r2, #69	@ 0x45
 800c820:	f43f ab63 	beq.w	800beea <_strtod_l+0x272>
 800c824:	2301      	movs	r3, #1
 800c826:	f7ff bb9e 	b.w	800bf66 <_strtod_l+0x2ee>
 800c82a:	bf00      	nop
 800c82c:	f3af 8000 	nop.w
 800c830:	ffc00000 	.word	0xffc00000
 800c834:	41dfffff 	.word	0x41dfffff
 800c838:	94a03595 	.word	0x94a03595
 800c83c:	3fcfffff 	.word	0x3fcfffff

0800c840 <strtof>:
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800c904 <strtof+0xc4>
 800c848:	4b29      	ldr	r3, [pc, #164]	@ (800c8f0 <strtof+0xb0>)
 800c84a:	460a      	mov	r2, r1
 800c84c:	ed2d 8b02 	vpush	{d8}
 800c850:	4601      	mov	r1, r0
 800c852:	f8d8 0000 	ldr.w	r0, [r8]
 800c856:	f7ff fa0f 	bl	800bc78 <_strtod_l>
 800c85a:	ec55 4b10 	vmov	r4, r5, d0
 800c85e:	4622      	mov	r2, r4
 800c860:	462b      	mov	r3, r5
 800c862:	4620      	mov	r0, r4
 800c864:	4629      	mov	r1, r5
 800c866:	f7f4 f959 	bl	8000b1c <__aeabi_dcmpun>
 800c86a:	b190      	cbz	r0, 800c892 <strtof+0x52>
 800c86c:	2d00      	cmp	r5, #0
 800c86e:	4821      	ldr	r0, [pc, #132]	@ (800c8f4 <strtof+0xb4>)
 800c870:	da09      	bge.n	800c886 <strtof+0x46>
 800c872:	f000 fa89 	bl	800cd88 <nanf>
 800c876:	eeb1 8a40 	vneg.f32	s16, s0
 800c87a:	eeb0 0a48 	vmov.f32	s0, s16
 800c87e:	ecbd 8b02 	vpop	{d8}
 800c882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c886:	ecbd 8b02 	vpop	{d8}
 800c88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c88e:	f000 ba7b 	b.w	800cd88 <nanf>
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	f7f4 f977 	bl	8000b88 <__aeabi_d2f>
 800c89a:	ee08 0a10 	vmov	s16, r0
 800c89e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800c8f8 <strtof+0xb8>
 800c8a2:	eeb0 7ac8 	vabs.f32	s14, s16
 800c8a6:	eeb4 7a67 	vcmp.f32	s14, s15
 800c8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ae:	dd11      	ble.n	800c8d4 <strtof+0x94>
 800c8b0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800c8b4:	4b11      	ldr	r3, [pc, #68]	@ (800c8fc <strtof+0xbc>)
 800c8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	4639      	mov	r1, r7
 800c8be:	f7f4 f92d 	bl	8000b1c <__aeabi_dcmpun>
 800c8c2:	b980      	cbnz	r0, 800c8e6 <strtof+0xa6>
 800c8c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c8fc <strtof+0xbc>)
 800c8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f4 f907 	bl	8000ae0 <__aeabi_dcmple>
 800c8d2:	b940      	cbnz	r0, 800c8e6 <strtof+0xa6>
 800c8d4:	ee18 3a10 	vmov	r3, s16
 800c8d8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c8dc:	d1cd      	bne.n	800c87a <strtof+0x3a>
 800c8de:	4b08      	ldr	r3, [pc, #32]	@ (800c900 <strtof+0xc0>)
 800c8e0:	402b      	ands	r3, r5
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c9      	beq.n	800c87a <strtof+0x3a>
 800c8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ea:	2222      	movs	r2, #34	@ 0x22
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	e7c4      	b.n	800c87a <strtof+0x3a>
 800c8f0:	2000010c 	.word	0x2000010c
 800c8f4:	0800ee66 	.word	0x0800ee66
 800c8f8:	7f7fffff 	.word	0x7f7fffff
 800c8fc:	7fefffff 	.word	0x7fefffff
 800c900:	7ff00000 	.word	0x7ff00000
 800c904:	20000278 	.word	0x20000278

0800c908 <_strtol_l.constprop.0>:
 800c908:	2b24      	cmp	r3, #36	@ 0x24
 800c90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c90e:	4686      	mov	lr, r0
 800c910:	4690      	mov	r8, r2
 800c912:	d801      	bhi.n	800c918 <_strtol_l.constprop.0+0x10>
 800c914:	2b01      	cmp	r3, #1
 800c916:	d106      	bne.n	800c926 <_strtol_l.constprop.0+0x1e>
 800c918:	f000 f9f2 	bl	800cd00 <__errno>
 800c91c:	2316      	movs	r3, #22
 800c91e:	6003      	str	r3, [r0, #0]
 800c920:	2000      	movs	r0, #0
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	4834      	ldr	r0, [pc, #208]	@ (800c9f8 <_strtol_l.constprop.0+0xf0>)
 800c928:	460d      	mov	r5, r1
 800c92a:	462a      	mov	r2, r5
 800c92c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c930:	5d06      	ldrb	r6, [r0, r4]
 800c932:	f016 0608 	ands.w	r6, r6, #8
 800c936:	d1f8      	bne.n	800c92a <_strtol_l.constprop.0+0x22>
 800c938:	2c2d      	cmp	r4, #45	@ 0x2d
 800c93a:	d12d      	bne.n	800c998 <_strtol_l.constprop.0+0x90>
 800c93c:	782c      	ldrb	r4, [r5, #0]
 800c93e:	2601      	movs	r6, #1
 800c940:	1c95      	adds	r5, r2, #2
 800c942:	f033 0210 	bics.w	r2, r3, #16
 800c946:	d109      	bne.n	800c95c <_strtol_l.constprop.0+0x54>
 800c948:	2c30      	cmp	r4, #48	@ 0x30
 800c94a:	d12a      	bne.n	800c9a2 <_strtol_l.constprop.0+0x9a>
 800c94c:	782a      	ldrb	r2, [r5, #0]
 800c94e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c952:	2a58      	cmp	r2, #88	@ 0x58
 800c954:	d125      	bne.n	800c9a2 <_strtol_l.constprop.0+0x9a>
 800c956:	786c      	ldrb	r4, [r5, #1]
 800c958:	2310      	movs	r3, #16
 800c95a:	3502      	adds	r5, #2
 800c95c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c960:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c964:	2200      	movs	r2, #0
 800c966:	fbbc f9f3 	udiv	r9, ip, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c970:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c974:	2f09      	cmp	r7, #9
 800c976:	d81b      	bhi.n	800c9b0 <_strtol_l.constprop.0+0xa8>
 800c978:	463c      	mov	r4, r7
 800c97a:	42a3      	cmp	r3, r4
 800c97c:	dd27      	ble.n	800c9ce <_strtol_l.constprop.0+0xc6>
 800c97e:	1c57      	adds	r7, r2, #1
 800c980:	d007      	beq.n	800c992 <_strtol_l.constprop.0+0x8a>
 800c982:	4581      	cmp	r9, r0
 800c984:	d320      	bcc.n	800c9c8 <_strtol_l.constprop.0+0xc0>
 800c986:	d101      	bne.n	800c98c <_strtol_l.constprop.0+0x84>
 800c988:	45a2      	cmp	sl, r4
 800c98a:	db1d      	blt.n	800c9c8 <_strtol_l.constprop.0+0xc0>
 800c98c:	fb00 4003 	mla	r0, r0, r3, r4
 800c990:	2201      	movs	r2, #1
 800c992:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c996:	e7eb      	b.n	800c970 <_strtol_l.constprop.0+0x68>
 800c998:	2c2b      	cmp	r4, #43	@ 0x2b
 800c99a:	bf04      	itt	eq
 800c99c:	782c      	ldrbeq	r4, [r5, #0]
 800c99e:	1c95      	addeq	r5, r2, #2
 800c9a0:	e7cf      	b.n	800c942 <_strtol_l.constprop.0+0x3a>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1da      	bne.n	800c95c <_strtol_l.constprop.0+0x54>
 800c9a6:	2c30      	cmp	r4, #48	@ 0x30
 800c9a8:	bf0c      	ite	eq
 800c9aa:	2308      	moveq	r3, #8
 800c9ac:	230a      	movne	r3, #10
 800c9ae:	e7d5      	b.n	800c95c <_strtol_l.constprop.0+0x54>
 800c9b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c9b4:	2f19      	cmp	r7, #25
 800c9b6:	d801      	bhi.n	800c9bc <_strtol_l.constprop.0+0xb4>
 800c9b8:	3c37      	subs	r4, #55	@ 0x37
 800c9ba:	e7de      	b.n	800c97a <_strtol_l.constprop.0+0x72>
 800c9bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c9c0:	2f19      	cmp	r7, #25
 800c9c2:	d804      	bhi.n	800c9ce <_strtol_l.constprop.0+0xc6>
 800c9c4:	3c57      	subs	r4, #87	@ 0x57
 800c9c6:	e7d8      	b.n	800c97a <_strtol_l.constprop.0+0x72>
 800c9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9cc:	e7e1      	b.n	800c992 <_strtol_l.constprop.0+0x8a>
 800c9ce:	1c53      	adds	r3, r2, #1
 800c9d0:	d108      	bne.n	800c9e4 <_strtol_l.constprop.0+0xdc>
 800c9d2:	2322      	movs	r3, #34	@ 0x22
 800c9d4:	f8ce 3000 	str.w	r3, [lr]
 800c9d8:	4660      	mov	r0, ip
 800c9da:	f1b8 0f00 	cmp.w	r8, #0
 800c9de:	d0a0      	beq.n	800c922 <_strtol_l.constprop.0+0x1a>
 800c9e0:	1e69      	subs	r1, r5, #1
 800c9e2:	e006      	b.n	800c9f2 <_strtol_l.constprop.0+0xea>
 800c9e4:	b106      	cbz	r6, 800c9e8 <_strtol_l.constprop.0+0xe0>
 800c9e6:	4240      	negs	r0, r0
 800c9e8:	f1b8 0f00 	cmp.w	r8, #0
 800c9ec:	d099      	beq.n	800c922 <_strtol_l.constprop.0+0x1a>
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	d1f6      	bne.n	800c9e0 <_strtol_l.constprop.0+0xd8>
 800c9f2:	f8c8 1000 	str.w	r1, [r8]
 800c9f6:	e794      	b.n	800c922 <_strtol_l.constprop.0+0x1a>
 800c9f8:	0800eb11 	.word	0x0800eb11

0800c9fc <strtol>:
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	460a      	mov	r2, r1
 800ca00:	4601      	mov	r1, r0
 800ca02:	4802      	ldr	r0, [pc, #8]	@ (800ca0c <strtol+0x10>)
 800ca04:	6800      	ldr	r0, [r0, #0]
 800ca06:	f7ff bf7f 	b.w	800c908 <_strtol_l.constprop.0>
 800ca0a:	bf00      	nop
 800ca0c:	20000278 	.word	0x20000278

0800ca10 <std>:
 800ca10:	2300      	movs	r3, #0
 800ca12:	b510      	push	{r4, lr}
 800ca14:	4604      	mov	r4, r0
 800ca16:	e9c0 3300 	strd	r3, r3, [r0]
 800ca1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca1e:	6083      	str	r3, [r0, #8]
 800ca20:	8181      	strh	r1, [r0, #12]
 800ca22:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca24:	81c2      	strh	r2, [r0, #14]
 800ca26:	6183      	str	r3, [r0, #24]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	2208      	movs	r2, #8
 800ca2c:	305c      	adds	r0, #92	@ 0x5c
 800ca2e:	f000 f906 	bl	800cc3e <memset>
 800ca32:	4b0d      	ldr	r3, [pc, #52]	@ (800ca68 <std+0x58>)
 800ca34:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca36:	4b0d      	ldr	r3, [pc, #52]	@ (800ca6c <std+0x5c>)
 800ca38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca70 <std+0x60>)
 800ca3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca74 <std+0x64>)
 800ca40:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca42:	4b0d      	ldr	r3, [pc, #52]	@ (800ca78 <std+0x68>)
 800ca44:	6224      	str	r4, [r4, #32]
 800ca46:	429c      	cmp	r4, r3
 800ca48:	d006      	beq.n	800ca58 <std+0x48>
 800ca4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca4e:	4294      	cmp	r4, r2
 800ca50:	d002      	beq.n	800ca58 <std+0x48>
 800ca52:	33d0      	adds	r3, #208	@ 0xd0
 800ca54:	429c      	cmp	r4, r3
 800ca56:	d105      	bne.n	800ca64 <std+0x54>
 800ca58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca60:	f000 b978 	b.w	800cd54 <__retarget_lock_init_recursive>
 800ca64:	bd10      	pop	{r4, pc}
 800ca66:	bf00      	nop
 800ca68:	0800cbb9 	.word	0x0800cbb9
 800ca6c:	0800cbdb 	.word	0x0800cbdb
 800ca70:	0800cc13 	.word	0x0800cc13
 800ca74:	0800cc37 	.word	0x0800cc37
 800ca78:	20002160 	.word	0x20002160

0800ca7c <stdio_exit_handler>:
 800ca7c:	4a02      	ldr	r2, [pc, #8]	@ (800ca88 <stdio_exit_handler+0xc>)
 800ca7e:	4903      	ldr	r1, [pc, #12]	@ (800ca8c <stdio_exit_handler+0x10>)
 800ca80:	4803      	ldr	r0, [pc, #12]	@ (800ca90 <stdio_exit_handler+0x14>)
 800ca82:	f000 b869 	b.w	800cb58 <_fwalk_sglue>
 800ca86:	bf00      	nop
 800ca88:	20000100 	.word	0x20000100
 800ca8c:	0800e641 	.word	0x0800e641
 800ca90:	2000027c 	.word	0x2000027c

0800ca94 <cleanup_stdio>:
 800ca94:	6841      	ldr	r1, [r0, #4]
 800ca96:	4b0c      	ldr	r3, [pc, #48]	@ (800cac8 <cleanup_stdio+0x34>)
 800ca98:	4299      	cmp	r1, r3
 800ca9a:	b510      	push	{r4, lr}
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	d001      	beq.n	800caa4 <cleanup_stdio+0x10>
 800caa0:	f001 fdce 	bl	800e640 <_fflush_r>
 800caa4:	68a1      	ldr	r1, [r4, #8]
 800caa6:	4b09      	ldr	r3, [pc, #36]	@ (800cacc <cleanup_stdio+0x38>)
 800caa8:	4299      	cmp	r1, r3
 800caaa:	d002      	beq.n	800cab2 <cleanup_stdio+0x1e>
 800caac:	4620      	mov	r0, r4
 800caae:	f001 fdc7 	bl	800e640 <_fflush_r>
 800cab2:	68e1      	ldr	r1, [r4, #12]
 800cab4:	4b06      	ldr	r3, [pc, #24]	@ (800cad0 <cleanup_stdio+0x3c>)
 800cab6:	4299      	cmp	r1, r3
 800cab8:	d004      	beq.n	800cac4 <cleanup_stdio+0x30>
 800caba:	4620      	mov	r0, r4
 800cabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac0:	f001 bdbe 	b.w	800e640 <_fflush_r>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop
 800cac8:	20002160 	.word	0x20002160
 800cacc:	200021c8 	.word	0x200021c8
 800cad0:	20002230 	.word	0x20002230

0800cad4 <global_stdio_init.part.0>:
 800cad4:	b510      	push	{r4, lr}
 800cad6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb04 <global_stdio_init.part.0+0x30>)
 800cad8:	4c0b      	ldr	r4, [pc, #44]	@ (800cb08 <global_stdio_init.part.0+0x34>)
 800cada:	4a0c      	ldr	r2, [pc, #48]	@ (800cb0c <global_stdio_init.part.0+0x38>)
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	4620      	mov	r0, r4
 800cae0:	2200      	movs	r2, #0
 800cae2:	2104      	movs	r1, #4
 800cae4:	f7ff ff94 	bl	800ca10 <std>
 800cae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800caec:	2201      	movs	r2, #1
 800caee:	2109      	movs	r1, #9
 800caf0:	f7ff ff8e 	bl	800ca10 <std>
 800caf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800caf8:	2202      	movs	r2, #2
 800cafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cafe:	2112      	movs	r1, #18
 800cb00:	f7ff bf86 	b.w	800ca10 <std>
 800cb04:	20002298 	.word	0x20002298
 800cb08:	20002160 	.word	0x20002160
 800cb0c:	0800ca7d 	.word	0x0800ca7d

0800cb10 <__sfp_lock_acquire>:
 800cb10:	4801      	ldr	r0, [pc, #4]	@ (800cb18 <__sfp_lock_acquire+0x8>)
 800cb12:	f000 b920 	b.w	800cd56 <__retarget_lock_acquire_recursive>
 800cb16:	bf00      	nop
 800cb18:	200022a1 	.word	0x200022a1

0800cb1c <__sfp_lock_release>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	@ (800cb24 <__sfp_lock_release+0x8>)
 800cb1e:	f000 b91b 	b.w	800cd58 <__retarget_lock_release_recursive>
 800cb22:	bf00      	nop
 800cb24:	200022a1 	.word	0x200022a1

0800cb28 <__sinit>:
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	f7ff fff0 	bl	800cb10 <__sfp_lock_acquire>
 800cb30:	6a23      	ldr	r3, [r4, #32]
 800cb32:	b11b      	cbz	r3, 800cb3c <__sinit+0x14>
 800cb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb38:	f7ff bff0 	b.w	800cb1c <__sfp_lock_release>
 800cb3c:	4b04      	ldr	r3, [pc, #16]	@ (800cb50 <__sinit+0x28>)
 800cb3e:	6223      	str	r3, [r4, #32]
 800cb40:	4b04      	ldr	r3, [pc, #16]	@ (800cb54 <__sinit+0x2c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1f5      	bne.n	800cb34 <__sinit+0xc>
 800cb48:	f7ff ffc4 	bl	800cad4 <global_stdio_init.part.0>
 800cb4c:	e7f2      	b.n	800cb34 <__sinit+0xc>
 800cb4e:	bf00      	nop
 800cb50:	0800ca95 	.word	0x0800ca95
 800cb54:	20002298 	.word	0x20002298

0800cb58 <_fwalk_sglue>:
 800cb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	4688      	mov	r8, r1
 800cb60:	4614      	mov	r4, r2
 800cb62:	2600      	movs	r6, #0
 800cb64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb68:	f1b9 0901 	subs.w	r9, r9, #1
 800cb6c:	d505      	bpl.n	800cb7a <_fwalk_sglue+0x22>
 800cb6e:	6824      	ldr	r4, [r4, #0]
 800cb70:	2c00      	cmp	r4, #0
 800cb72:	d1f7      	bne.n	800cb64 <_fwalk_sglue+0xc>
 800cb74:	4630      	mov	r0, r6
 800cb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb7a:	89ab      	ldrh	r3, [r5, #12]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d907      	bls.n	800cb90 <_fwalk_sglue+0x38>
 800cb80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb84:	3301      	adds	r3, #1
 800cb86:	d003      	beq.n	800cb90 <_fwalk_sglue+0x38>
 800cb88:	4629      	mov	r1, r5
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	47c0      	blx	r8
 800cb8e:	4306      	orrs	r6, r0
 800cb90:	3568      	adds	r5, #104	@ 0x68
 800cb92:	e7e9      	b.n	800cb68 <_fwalk_sglue+0x10>

0800cb94 <iprintf>:
 800cb94:	b40f      	push	{r0, r1, r2, r3}
 800cb96:	b507      	push	{r0, r1, r2, lr}
 800cb98:	4906      	ldr	r1, [pc, #24]	@ (800cbb4 <iprintf+0x20>)
 800cb9a:	ab04      	add	r3, sp, #16
 800cb9c:	6808      	ldr	r0, [r1, #0]
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	6881      	ldr	r1, [r0, #8]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f001 fa21 	bl	800dfec <_vfiprintf_r>
 800cbaa:	b003      	add	sp, #12
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	b004      	add	sp, #16
 800cbb2:	4770      	bx	lr
 800cbb4:	20000278 	.word	0x20000278

0800cbb8 <__sread>:
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	460c      	mov	r4, r1
 800cbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc0:	f000 f87a 	bl	800ccb8 <_read_r>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	bfab      	itete	ge
 800cbc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbca:	89a3      	ldrhlt	r3, [r4, #12]
 800cbcc:	181b      	addge	r3, r3, r0
 800cbce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbd2:	bfac      	ite	ge
 800cbd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbd6:	81a3      	strhlt	r3, [r4, #12]
 800cbd8:	bd10      	pop	{r4, pc}

0800cbda <__swrite>:
 800cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	461f      	mov	r7, r3
 800cbe0:	898b      	ldrh	r3, [r1, #12]
 800cbe2:	05db      	lsls	r3, r3, #23
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	4616      	mov	r6, r2
 800cbea:	d505      	bpl.n	800cbf8 <__swrite+0x1e>
 800cbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f000 f84e 	bl	800cc94 <_lseek_r>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	4632      	mov	r2, r6
 800cc06:	463b      	mov	r3, r7
 800cc08:	4628      	mov	r0, r5
 800cc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0e:	f000 b865 	b.w	800ccdc <_write_r>

0800cc12 <__sseek>:
 800cc12:	b510      	push	{r4, lr}
 800cc14:	460c      	mov	r4, r1
 800cc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1a:	f000 f83b 	bl	800cc94 <_lseek_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	bf15      	itete	ne
 800cc24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc2e:	81a3      	strheq	r3, [r4, #12]
 800cc30:	bf18      	it	ne
 800cc32:	81a3      	strhne	r3, [r4, #12]
 800cc34:	bd10      	pop	{r4, pc}

0800cc36 <__sclose>:
 800cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3a:	f000 b81b 	b.w	800cc74 <_close_r>

0800cc3e <memset>:
 800cc3e:	4402      	add	r2, r0
 800cc40:	4603      	mov	r3, r0
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d100      	bne.n	800cc48 <memset+0xa>
 800cc46:	4770      	bx	lr
 800cc48:	f803 1b01 	strb.w	r1, [r3], #1
 800cc4c:	e7f9      	b.n	800cc42 <memset+0x4>

0800cc4e <strncmp>:
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	b16a      	cbz	r2, 800cc6e <strncmp+0x20>
 800cc52:	3901      	subs	r1, #1
 800cc54:	1884      	adds	r4, r0, r2
 800cc56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d103      	bne.n	800cc6a <strncmp+0x1c>
 800cc62:	42a0      	cmp	r0, r4
 800cc64:	d001      	beq.n	800cc6a <strncmp+0x1c>
 800cc66:	2a00      	cmp	r2, #0
 800cc68:	d1f5      	bne.n	800cc56 <strncmp+0x8>
 800cc6a:	1ad0      	subs	r0, r2, r3
 800cc6c:	bd10      	pop	{r4, pc}
 800cc6e:	4610      	mov	r0, r2
 800cc70:	e7fc      	b.n	800cc6c <strncmp+0x1e>
	...

0800cc74 <_close_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4d06      	ldr	r5, [pc, #24]	@ (800cc90 <_close_r+0x1c>)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	4608      	mov	r0, r1
 800cc7e:	602b      	str	r3, [r5, #0]
 800cc80:	f7f5 f93a 	bl	8001ef8 <_close>
 800cc84:	1c43      	adds	r3, r0, #1
 800cc86:	d102      	bne.n	800cc8e <_close_r+0x1a>
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	b103      	cbz	r3, 800cc8e <_close_r+0x1a>
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	bd38      	pop	{r3, r4, r5, pc}
 800cc90:	2000229c 	.word	0x2000229c

0800cc94 <_lseek_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4d07      	ldr	r5, [pc, #28]	@ (800ccb4 <_lseek_r+0x20>)
 800cc98:	4604      	mov	r4, r0
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	4611      	mov	r1, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	602a      	str	r2, [r5, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	f7f5 f94f 	bl	8001f46 <_lseek>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_lseek_r+0x1e>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_lseek_r+0x1e>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	2000229c 	.word	0x2000229c

0800ccb8 <_read_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	@ (800ccd8 <_read_r+0x20>)
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	4608      	mov	r0, r1
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	602a      	str	r2, [r5, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	f7f5 f8f9 	bl	8001ebe <_read>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d102      	bne.n	800ccd6 <_read_r+0x1e>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	b103      	cbz	r3, 800ccd6 <_read_r+0x1e>
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	2000229c 	.word	0x2000229c

0800ccdc <_write_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d07      	ldr	r5, [pc, #28]	@ (800ccfc <_write_r+0x20>)
 800cce0:	4604      	mov	r4, r0
 800cce2:	4608      	mov	r0, r1
 800cce4:	4611      	mov	r1, r2
 800cce6:	2200      	movs	r2, #0
 800cce8:	602a      	str	r2, [r5, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	f7f4 fcec 	bl	80016c8 <_write>
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	d102      	bne.n	800ccfa <_write_r+0x1e>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	b103      	cbz	r3, 800ccfa <_write_r+0x1e>
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	2000229c 	.word	0x2000229c

0800cd00 <__errno>:
 800cd00:	4b01      	ldr	r3, [pc, #4]	@ (800cd08 <__errno+0x8>)
 800cd02:	6818      	ldr	r0, [r3, #0]
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	20000278 	.word	0x20000278

0800cd0c <__libc_init_array>:
 800cd0c:	b570      	push	{r4, r5, r6, lr}
 800cd0e:	4d0d      	ldr	r5, [pc, #52]	@ (800cd44 <__libc_init_array+0x38>)
 800cd10:	4c0d      	ldr	r4, [pc, #52]	@ (800cd48 <__libc_init_array+0x3c>)
 800cd12:	1b64      	subs	r4, r4, r5
 800cd14:	10a4      	asrs	r4, r4, #2
 800cd16:	2600      	movs	r6, #0
 800cd18:	42a6      	cmp	r6, r4
 800cd1a:	d109      	bne.n	800cd30 <__libc_init_array+0x24>
 800cd1c:	4d0b      	ldr	r5, [pc, #44]	@ (800cd4c <__libc_init_array+0x40>)
 800cd1e:	4c0c      	ldr	r4, [pc, #48]	@ (800cd50 <__libc_init_array+0x44>)
 800cd20:	f001 fe76 	bl	800ea10 <_init>
 800cd24:	1b64      	subs	r4, r4, r5
 800cd26:	10a4      	asrs	r4, r4, #2
 800cd28:	2600      	movs	r6, #0
 800cd2a:	42a6      	cmp	r6, r4
 800cd2c:	d105      	bne.n	800cd3a <__libc_init_array+0x2e>
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}
 800cd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd34:	4798      	blx	r3
 800cd36:	3601      	adds	r6, #1
 800cd38:	e7ee      	b.n	800cd18 <__libc_init_array+0xc>
 800cd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd3e:	4798      	blx	r3
 800cd40:	3601      	adds	r6, #1
 800cd42:	e7f2      	b.n	800cd2a <__libc_init_array+0x1e>
 800cd44:	0800ee70 	.word	0x0800ee70
 800cd48:	0800ee70 	.word	0x0800ee70
 800cd4c:	0800ee70 	.word	0x0800ee70
 800cd50:	0800ee74 	.word	0x0800ee74

0800cd54 <__retarget_lock_init_recursive>:
 800cd54:	4770      	bx	lr

0800cd56 <__retarget_lock_acquire_recursive>:
 800cd56:	4770      	bx	lr

0800cd58 <__retarget_lock_release_recursive>:
 800cd58:	4770      	bx	lr

0800cd5a <memcpy>:
 800cd5a:	440a      	add	r2, r1
 800cd5c:	4291      	cmp	r1, r2
 800cd5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd62:	d100      	bne.n	800cd66 <memcpy+0xc>
 800cd64:	4770      	bx	lr
 800cd66:	b510      	push	{r4, lr}
 800cd68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd70:	4291      	cmp	r1, r2
 800cd72:	d1f9      	bne.n	800cd68 <memcpy+0xe>
 800cd74:	bd10      	pop	{r4, pc}
	...

0800cd78 <nan>:
 800cd78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd80 <nan+0x8>
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	00000000 	.word	0x00000000
 800cd84:	7ff80000 	.word	0x7ff80000

0800cd88 <nanf>:
 800cd88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cd90 <nanf+0x8>
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	7fc00000 	.word	0x7fc00000

0800cd94 <_free_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4605      	mov	r5, r0
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	d041      	beq.n	800ce20 <_free_r+0x8c>
 800cd9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cda0:	1f0c      	subs	r4, r1, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	bfb8      	it	lt
 800cda6:	18e4      	addlt	r4, r4, r3
 800cda8:	f000 fc2c 	bl	800d604 <__malloc_lock>
 800cdac:	4a1d      	ldr	r2, [pc, #116]	@ (800ce24 <_free_r+0x90>)
 800cdae:	6813      	ldr	r3, [r2, #0]
 800cdb0:	b933      	cbnz	r3, 800cdc0 <_free_r+0x2c>
 800cdb2:	6063      	str	r3, [r4, #4]
 800cdb4:	6014      	str	r4, [r2, #0]
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdbc:	f000 bc28 	b.w	800d610 <__malloc_unlock>
 800cdc0:	42a3      	cmp	r3, r4
 800cdc2:	d908      	bls.n	800cdd6 <_free_r+0x42>
 800cdc4:	6820      	ldr	r0, [r4, #0]
 800cdc6:	1821      	adds	r1, r4, r0
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf01      	itttt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	1809      	addeq	r1, r1, r0
 800cdd2:	6021      	streq	r1, [r4, #0]
 800cdd4:	e7ed      	b.n	800cdb2 <_free_r+0x1e>
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	b10b      	cbz	r3, 800cde0 <_free_r+0x4c>
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	d9fa      	bls.n	800cdd6 <_free_r+0x42>
 800cde0:	6811      	ldr	r1, [r2, #0]
 800cde2:	1850      	adds	r0, r2, r1
 800cde4:	42a0      	cmp	r0, r4
 800cde6:	d10b      	bne.n	800ce00 <_free_r+0x6c>
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	4401      	add	r1, r0
 800cdec:	1850      	adds	r0, r2, r1
 800cdee:	4283      	cmp	r3, r0
 800cdf0:	6011      	str	r1, [r2, #0]
 800cdf2:	d1e0      	bne.n	800cdb6 <_free_r+0x22>
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	6053      	str	r3, [r2, #4]
 800cdfa:	4408      	add	r0, r1
 800cdfc:	6010      	str	r0, [r2, #0]
 800cdfe:	e7da      	b.n	800cdb6 <_free_r+0x22>
 800ce00:	d902      	bls.n	800ce08 <_free_r+0x74>
 800ce02:	230c      	movs	r3, #12
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	e7d6      	b.n	800cdb6 <_free_r+0x22>
 800ce08:	6820      	ldr	r0, [r4, #0]
 800ce0a:	1821      	adds	r1, r4, r0
 800ce0c:	428b      	cmp	r3, r1
 800ce0e:	bf04      	itt	eq
 800ce10:	6819      	ldreq	r1, [r3, #0]
 800ce12:	685b      	ldreq	r3, [r3, #4]
 800ce14:	6063      	str	r3, [r4, #4]
 800ce16:	bf04      	itt	eq
 800ce18:	1809      	addeq	r1, r1, r0
 800ce1a:	6021      	streq	r1, [r4, #0]
 800ce1c:	6054      	str	r4, [r2, #4]
 800ce1e:	e7ca      	b.n	800cdb6 <_free_r+0x22>
 800ce20:	bd38      	pop	{r3, r4, r5, pc}
 800ce22:	bf00      	nop
 800ce24:	200022a8 	.word	0x200022a8

0800ce28 <rshift>:
 800ce28:	6903      	ldr	r3, [r0, #16]
 800ce2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce32:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce36:	f100 0414 	add.w	r4, r0, #20
 800ce3a:	dd45      	ble.n	800cec8 <rshift+0xa0>
 800ce3c:	f011 011f 	ands.w	r1, r1, #31
 800ce40:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce44:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce48:	d10c      	bne.n	800ce64 <rshift+0x3c>
 800ce4a:	f100 0710 	add.w	r7, r0, #16
 800ce4e:	4629      	mov	r1, r5
 800ce50:	42b1      	cmp	r1, r6
 800ce52:	d334      	bcc.n	800cebe <rshift+0x96>
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	1eea      	subs	r2, r5, #3
 800ce5a:	4296      	cmp	r6, r2
 800ce5c:	bf38      	it	cc
 800ce5e:	2300      	movcc	r3, #0
 800ce60:	4423      	add	r3, r4
 800ce62:	e015      	b.n	800ce90 <rshift+0x68>
 800ce64:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce68:	f1c1 0820 	rsb	r8, r1, #32
 800ce6c:	40cf      	lsrs	r7, r1
 800ce6e:	f105 0e04 	add.w	lr, r5, #4
 800ce72:	46a1      	mov	r9, r4
 800ce74:	4576      	cmp	r6, lr
 800ce76:	46f4      	mov	ip, lr
 800ce78:	d815      	bhi.n	800cea6 <rshift+0x7e>
 800ce7a:	1a9a      	subs	r2, r3, r2
 800ce7c:	0092      	lsls	r2, r2, #2
 800ce7e:	3a04      	subs	r2, #4
 800ce80:	3501      	adds	r5, #1
 800ce82:	42ae      	cmp	r6, r5
 800ce84:	bf38      	it	cc
 800ce86:	2200      	movcc	r2, #0
 800ce88:	18a3      	adds	r3, r4, r2
 800ce8a:	50a7      	str	r7, [r4, r2]
 800ce8c:	b107      	cbz	r7, 800ce90 <rshift+0x68>
 800ce8e:	3304      	adds	r3, #4
 800ce90:	1b1a      	subs	r2, r3, r4
 800ce92:	42a3      	cmp	r3, r4
 800ce94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce98:	bf08      	it	eq
 800ce9a:	2300      	moveq	r3, #0
 800ce9c:	6102      	str	r2, [r0, #16]
 800ce9e:	bf08      	it	eq
 800cea0:	6143      	streq	r3, [r0, #20]
 800cea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cea6:	f8dc c000 	ldr.w	ip, [ip]
 800ceaa:	fa0c fc08 	lsl.w	ip, ip, r8
 800ceae:	ea4c 0707 	orr.w	r7, ip, r7
 800ceb2:	f849 7b04 	str.w	r7, [r9], #4
 800ceb6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ceba:	40cf      	lsrs	r7, r1
 800cebc:	e7da      	b.n	800ce74 <rshift+0x4c>
 800cebe:	f851 cb04 	ldr.w	ip, [r1], #4
 800cec2:	f847 cf04 	str.w	ip, [r7, #4]!
 800cec6:	e7c3      	b.n	800ce50 <rshift+0x28>
 800cec8:	4623      	mov	r3, r4
 800ceca:	e7e1      	b.n	800ce90 <rshift+0x68>

0800cecc <__hexdig_fun>:
 800cecc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ced0:	2b09      	cmp	r3, #9
 800ced2:	d802      	bhi.n	800ceda <__hexdig_fun+0xe>
 800ced4:	3820      	subs	r0, #32
 800ced6:	b2c0      	uxtb	r0, r0
 800ced8:	4770      	bx	lr
 800ceda:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d801      	bhi.n	800cee6 <__hexdig_fun+0x1a>
 800cee2:	3847      	subs	r0, #71	@ 0x47
 800cee4:	e7f7      	b.n	800ced6 <__hexdig_fun+0xa>
 800cee6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ceea:	2b05      	cmp	r3, #5
 800ceec:	d801      	bhi.n	800cef2 <__hexdig_fun+0x26>
 800ceee:	3827      	subs	r0, #39	@ 0x27
 800cef0:	e7f1      	b.n	800ced6 <__hexdig_fun+0xa>
 800cef2:	2000      	movs	r0, #0
 800cef4:	4770      	bx	lr
	...

0800cef8 <__gethex>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	b085      	sub	sp, #20
 800cefe:	468a      	mov	sl, r1
 800cf00:	9302      	str	r3, [sp, #8]
 800cf02:	680b      	ldr	r3, [r1, #0]
 800cf04:	9001      	str	r0, [sp, #4]
 800cf06:	4690      	mov	r8, r2
 800cf08:	1c9c      	adds	r4, r3, #2
 800cf0a:	46a1      	mov	r9, r4
 800cf0c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf10:	2830      	cmp	r0, #48	@ 0x30
 800cf12:	d0fa      	beq.n	800cf0a <__gethex+0x12>
 800cf14:	eba9 0303 	sub.w	r3, r9, r3
 800cf18:	f1a3 0b02 	sub.w	fp, r3, #2
 800cf1c:	f7ff ffd6 	bl	800cecc <__hexdig_fun>
 800cf20:	4605      	mov	r5, r0
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d168      	bne.n	800cff8 <__gethex+0x100>
 800cf26:	49a0      	ldr	r1, [pc, #640]	@ (800d1a8 <__gethex+0x2b0>)
 800cf28:	2201      	movs	r2, #1
 800cf2a:	4648      	mov	r0, r9
 800cf2c:	f7ff fe8f 	bl	800cc4e <strncmp>
 800cf30:	4607      	mov	r7, r0
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d167      	bne.n	800d006 <__gethex+0x10e>
 800cf36:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf3a:	4626      	mov	r6, r4
 800cf3c:	f7ff ffc6 	bl	800cecc <__hexdig_fun>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d062      	beq.n	800d00a <__gethex+0x112>
 800cf44:	4623      	mov	r3, r4
 800cf46:	7818      	ldrb	r0, [r3, #0]
 800cf48:	2830      	cmp	r0, #48	@ 0x30
 800cf4a:	4699      	mov	r9, r3
 800cf4c:	f103 0301 	add.w	r3, r3, #1
 800cf50:	d0f9      	beq.n	800cf46 <__gethex+0x4e>
 800cf52:	f7ff ffbb 	bl	800cecc <__hexdig_fun>
 800cf56:	fab0 f580 	clz	r5, r0
 800cf5a:	096d      	lsrs	r5, r5, #5
 800cf5c:	f04f 0b01 	mov.w	fp, #1
 800cf60:	464a      	mov	r2, r9
 800cf62:	4616      	mov	r6, r2
 800cf64:	3201      	adds	r2, #1
 800cf66:	7830      	ldrb	r0, [r6, #0]
 800cf68:	f7ff ffb0 	bl	800cecc <__hexdig_fun>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d1f8      	bne.n	800cf62 <__gethex+0x6a>
 800cf70:	498d      	ldr	r1, [pc, #564]	@ (800d1a8 <__gethex+0x2b0>)
 800cf72:	2201      	movs	r2, #1
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7ff fe6a 	bl	800cc4e <strncmp>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d13f      	bne.n	800cffe <__gethex+0x106>
 800cf7e:	b944      	cbnz	r4, 800cf92 <__gethex+0x9a>
 800cf80:	1c74      	adds	r4, r6, #1
 800cf82:	4622      	mov	r2, r4
 800cf84:	4616      	mov	r6, r2
 800cf86:	3201      	adds	r2, #1
 800cf88:	7830      	ldrb	r0, [r6, #0]
 800cf8a:	f7ff ff9f 	bl	800cecc <__hexdig_fun>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d1f8      	bne.n	800cf84 <__gethex+0x8c>
 800cf92:	1ba4      	subs	r4, r4, r6
 800cf94:	00a7      	lsls	r7, r4, #2
 800cf96:	7833      	ldrb	r3, [r6, #0]
 800cf98:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf9c:	2b50      	cmp	r3, #80	@ 0x50
 800cf9e:	d13e      	bne.n	800d01e <__gethex+0x126>
 800cfa0:	7873      	ldrb	r3, [r6, #1]
 800cfa2:	2b2b      	cmp	r3, #43	@ 0x2b
 800cfa4:	d033      	beq.n	800d00e <__gethex+0x116>
 800cfa6:	2b2d      	cmp	r3, #45	@ 0x2d
 800cfa8:	d034      	beq.n	800d014 <__gethex+0x11c>
 800cfaa:	1c71      	adds	r1, r6, #1
 800cfac:	2400      	movs	r4, #0
 800cfae:	7808      	ldrb	r0, [r1, #0]
 800cfb0:	f7ff ff8c 	bl	800cecc <__hexdig_fun>
 800cfb4:	1e43      	subs	r3, r0, #1
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b18      	cmp	r3, #24
 800cfba:	d830      	bhi.n	800d01e <__gethex+0x126>
 800cfbc:	f1a0 0210 	sub.w	r2, r0, #16
 800cfc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfc4:	f7ff ff82 	bl	800cecc <__hexdig_fun>
 800cfc8:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfcc:	fa5f fc8c 	uxtb.w	ip, ip
 800cfd0:	f1bc 0f18 	cmp.w	ip, #24
 800cfd4:	f04f 030a 	mov.w	r3, #10
 800cfd8:	d91e      	bls.n	800d018 <__gethex+0x120>
 800cfda:	b104      	cbz	r4, 800cfde <__gethex+0xe6>
 800cfdc:	4252      	negs	r2, r2
 800cfde:	4417      	add	r7, r2
 800cfe0:	f8ca 1000 	str.w	r1, [sl]
 800cfe4:	b1ed      	cbz	r5, 800d022 <__gethex+0x12a>
 800cfe6:	f1bb 0f00 	cmp.w	fp, #0
 800cfea:	bf0c      	ite	eq
 800cfec:	2506      	moveq	r5, #6
 800cfee:	2500      	movne	r5, #0
 800cff0:	4628      	mov	r0, r5
 800cff2:	b005      	add	sp, #20
 800cff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff8:	2500      	movs	r5, #0
 800cffa:	462c      	mov	r4, r5
 800cffc:	e7b0      	b.n	800cf60 <__gethex+0x68>
 800cffe:	2c00      	cmp	r4, #0
 800d000:	d1c7      	bne.n	800cf92 <__gethex+0x9a>
 800d002:	4627      	mov	r7, r4
 800d004:	e7c7      	b.n	800cf96 <__gethex+0x9e>
 800d006:	464e      	mov	r6, r9
 800d008:	462f      	mov	r7, r5
 800d00a:	2501      	movs	r5, #1
 800d00c:	e7c3      	b.n	800cf96 <__gethex+0x9e>
 800d00e:	2400      	movs	r4, #0
 800d010:	1cb1      	adds	r1, r6, #2
 800d012:	e7cc      	b.n	800cfae <__gethex+0xb6>
 800d014:	2401      	movs	r4, #1
 800d016:	e7fb      	b.n	800d010 <__gethex+0x118>
 800d018:	fb03 0002 	mla	r0, r3, r2, r0
 800d01c:	e7ce      	b.n	800cfbc <__gethex+0xc4>
 800d01e:	4631      	mov	r1, r6
 800d020:	e7de      	b.n	800cfe0 <__gethex+0xe8>
 800d022:	eba6 0309 	sub.w	r3, r6, r9
 800d026:	3b01      	subs	r3, #1
 800d028:	4629      	mov	r1, r5
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	dc0a      	bgt.n	800d044 <__gethex+0x14c>
 800d02e:	9801      	ldr	r0, [sp, #4]
 800d030:	f000 faf4 	bl	800d61c <_Balloc>
 800d034:	4604      	mov	r4, r0
 800d036:	b940      	cbnz	r0, 800d04a <__gethex+0x152>
 800d038:	4b5c      	ldr	r3, [pc, #368]	@ (800d1ac <__gethex+0x2b4>)
 800d03a:	4602      	mov	r2, r0
 800d03c:	21e4      	movs	r1, #228	@ 0xe4
 800d03e:	485c      	ldr	r0, [pc, #368]	@ (800d1b0 <__gethex+0x2b8>)
 800d040:	f001 fbca 	bl	800e7d8 <__assert_func>
 800d044:	3101      	adds	r1, #1
 800d046:	105b      	asrs	r3, r3, #1
 800d048:	e7ef      	b.n	800d02a <__gethex+0x132>
 800d04a:	f100 0a14 	add.w	sl, r0, #20
 800d04e:	2300      	movs	r3, #0
 800d050:	4655      	mov	r5, sl
 800d052:	469b      	mov	fp, r3
 800d054:	45b1      	cmp	r9, r6
 800d056:	d337      	bcc.n	800d0c8 <__gethex+0x1d0>
 800d058:	f845 bb04 	str.w	fp, [r5], #4
 800d05c:	eba5 050a 	sub.w	r5, r5, sl
 800d060:	10ad      	asrs	r5, r5, #2
 800d062:	6125      	str	r5, [r4, #16]
 800d064:	4658      	mov	r0, fp
 800d066:	f000 fbcb 	bl	800d800 <__hi0bits>
 800d06a:	016d      	lsls	r5, r5, #5
 800d06c:	f8d8 6000 	ldr.w	r6, [r8]
 800d070:	1a2d      	subs	r5, r5, r0
 800d072:	42b5      	cmp	r5, r6
 800d074:	dd54      	ble.n	800d120 <__gethex+0x228>
 800d076:	1bad      	subs	r5, r5, r6
 800d078:	4629      	mov	r1, r5
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 ff5f 	bl	800df3e <__any_on>
 800d080:	4681      	mov	r9, r0
 800d082:	b178      	cbz	r0, 800d0a4 <__gethex+0x1ac>
 800d084:	1e6b      	subs	r3, r5, #1
 800d086:	1159      	asrs	r1, r3, #5
 800d088:	f003 021f 	and.w	r2, r3, #31
 800d08c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d090:	f04f 0901 	mov.w	r9, #1
 800d094:	fa09 f202 	lsl.w	r2, r9, r2
 800d098:	420a      	tst	r2, r1
 800d09a:	d003      	beq.n	800d0a4 <__gethex+0x1ac>
 800d09c:	454b      	cmp	r3, r9
 800d09e:	dc36      	bgt.n	800d10e <__gethex+0x216>
 800d0a0:	f04f 0902 	mov.w	r9, #2
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff febe 	bl	800ce28 <rshift>
 800d0ac:	442f      	add	r7, r5
 800d0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0b2:	42bb      	cmp	r3, r7
 800d0b4:	da42      	bge.n	800d13c <__gethex+0x244>
 800d0b6:	9801      	ldr	r0, [sp, #4]
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f000 faef 	bl	800d69c <_Bfree>
 800d0be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	6013      	str	r3, [r2, #0]
 800d0c4:	25a3      	movs	r5, #163	@ 0xa3
 800d0c6:	e793      	b.n	800cff0 <__gethex+0xf8>
 800d0c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0ce:	d012      	beq.n	800d0f6 <__gethex+0x1fe>
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d104      	bne.n	800d0de <__gethex+0x1e6>
 800d0d4:	f845 bb04 	str.w	fp, [r5], #4
 800d0d8:	f04f 0b00 	mov.w	fp, #0
 800d0dc:	465b      	mov	r3, fp
 800d0de:	7830      	ldrb	r0, [r6, #0]
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	f7ff fef3 	bl	800cecc <__hexdig_fun>
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	f000 000f 	and.w	r0, r0, #15
 800d0ec:	4098      	lsls	r0, r3
 800d0ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	e7ae      	b.n	800d054 <__gethex+0x15c>
 800d0f6:	45b1      	cmp	r9, r6
 800d0f8:	d8ea      	bhi.n	800d0d0 <__gethex+0x1d8>
 800d0fa:	492b      	ldr	r1, [pc, #172]	@ (800d1a8 <__gethex+0x2b0>)
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	2201      	movs	r2, #1
 800d100:	4630      	mov	r0, r6
 800d102:	f7ff fda4 	bl	800cc4e <strncmp>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	2800      	cmp	r0, #0
 800d10a:	d1e1      	bne.n	800d0d0 <__gethex+0x1d8>
 800d10c:	e7a2      	b.n	800d054 <__gethex+0x15c>
 800d10e:	1ea9      	subs	r1, r5, #2
 800d110:	4620      	mov	r0, r4
 800d112:	f000 ff14 	bl	800df3e <__any_on>
 800d116:	2800      	cmp	r0, #0
 800d118:	d0c2      	beq.n	800d0a0 <__gethex+0x1a8>
 800d11a:	f04f 0903 	mov.w	r9, #3
 800d11e:	e7c1      	b.n	800d0a4 <__gethex+0x1ac>
 800d120:	da09      	bge.n	800d136 <__gethex+0x23e>
 800d122:	1b75      	subs	r5, r6, r5
 800d124:	4621      	mov	r1, r4
 800d126:	9801      	ldr	r0, [sp, #4]
 800d128:	462a      	mov	r2, r5
 800d12a:	f000 fccf 	bl	800dacc <__lshift>
 800d12e:	1b7f      	subs	r7, r7, r5
 800d130:	4604      	mov	r4, r0
 800d132:	f100 0a14 	add.w	sl, r0, #20
 800d136:	f04f 0900 	mov.w	r9, #0
 800d13a:	e7b8      	b.n	800d0ae <__gethex+0x1b6>
 800d13c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d140:	42bd      	cmp	r5, r7
 800d142:	dd6f      	ble.n	800d224 <__gethex+0x32c>
 800d144:	1bed      	subs	r5, r5, r7
 800d146:	42ae      	cmp	r6, r5
 800d148:	dc34      	bgt.n	800d1b4 <__gethex+0x2bc>
 800d14a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d022      	beq.n	800d198 <__gethex+0x2a0>
 800d152:	2b03      	cmp	r3, #3
 800d154:	d024      	beq.n	800d1a0 <__gethex+0x2a8>
 800d156:	2b01      	cmp	r3, #1
 800d158:	d115      	bne.n	800d186 <__gethex+0x28e>
 800d15a:	42ae      	cmp	r6, r5
 800d15c:	d113      	bne.n	800d186 <__gethex+0x28e>
 800d15e:	2e01      	cmp	r6, #1
 800d160:	d10b      	bne.n	800d17a <__gethex+0x282>
 800d162:	9a02      	ldr	r2, [sp, #8]
 800d164:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	2301      	movs	r3, #1
 800d16c:	6123      	str	r3, [r4, #16]
 800d16e:	f8ca 3000 	str.w	r3, [sl]
 800d172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d174:	2562      	movs	r5, #98	@ 0x62
 800d176:	601c      	str	r4, [r3, #0]
 800d178:	e73a      	b.n	800cff0 <__gethex+0xf8>
 800d17a:	1e71      	subs	r1, r6, #1
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fede 	bl	800df3e <__any_on>
 800d182:	2800      	cmp	r0, #0
 800d184:	d1ed      	bne.n	800d162 <__gethex+0x26a>
 800d186:	9801      	ldr	r0, [sp, #4]
 800d188:	4621      	mov	r1, r4
 800d18a:	f000 fa87 	bl	800d69c <_Bfree>
 800d18e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d190:	2300      	movs	r3, #0
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	2550      	movs	r5, #80	@ 0x50
 800d196:	e72b      	b.n	800cff0 <__gethex+0xf8>
 800d198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f3      	bne.n	800d186 <__gethex+0x28e>
 800d19e:	e7e0      	b.n	800d162 <__gethex+0x26a>
 800d1a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1dd      	bne.n	800d162 <__gethex+0x26a>
 800d1a6:	e7ee      	b.n	800d186 <__gethex+0x28e>
 800d1a8:	0800eab0 	.word	0x0800eab0
 800d1ac:	0800ec19 	.word	0x0800ec19
 800d1b0:	0800ec2a 	.word	0x0800ec2a
 800d1b4:	1e6f      	subs	r7, r5, #1
 800d1b6:	f1b9 0f00 	cmp.w	r9, #0
 800d1ba:	d130      	bne.n	800d21e <__gethex+0x326>
 800d1bc:	b127      	cbz	r7, 800d1c8 <__gethex+0x2d0>
 800d1be:	4639      	mov	r1, r7
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 febc 	bl	800df3e <__any_on>
 800d1c6:	4681      	mov	r9, r0
 800d1c8:	117a      	asrs	r2, r7, #5
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1d0:	f007 071f 	and.w	r7, r7, #31
 800d1d4:	40bb      	lsls	r3, r7
 800d1d6:	4213      	tst	r3, r2
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4620      	mov	r0, r4
 800d1dc:	bf18      	it	ne
 800d1de:	f049 0902 	orrne.w	r9, r9, #2
 800d1e2:	f7ff fe21 	bl	800ce28 <rshift>
 800d1e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d1ea:	1b76      	subs	r6, r6, r5
 800d1ec:	2502      	movs	r5, #2
 800d1ee:	f1b9 0f00 	cmp.w	r9, #0
 800d1f2:	d047      	beq.n	800d284 <__gethex+0x38c>
 800d1f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d015      	beq.n	800d228 <__gethex+0x330>
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d017      	beq.n	800d230 <__gethex+0x338>
 800d200:	2b01      	cmp	r3, #1
 800d202:	d109      	bne.n	800d218 <__gethex+0x320>
 800d204:	f019 0f02 	tst.w	r9, #2
 800d208:	d006      	beq.n	800d218 <__gethex+0x320>
 800d20a:	f8da 3000 	ldr.w	r3, [sl]
 800d20e:	ea49 0903 	orr.w	r9, r9, r3
 800d212:	f019 0f01 	tst.w	r9, #1
 800d216:	d10e      	bne.n	800d236 <__gethex+0x33e>
 800d218:	f045 0510 	orr.w	r5, r5, #16
 800d21c:	e032      	b.n	800d284 <__gethex+0x38c>
 800d21e:	f04f 0901 	mov.w	r9, #1
 800d222:	e7d1      	b.n	800d1c8 <__gethex+0x2d0>
 800d224:	2501      	movs	r5, #1
 800d226:	e7e2      	b.n	800d1ee <__gethex+0x2f6>
 800d228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d22a:	f1c3 0301 	rsb	r3, r3, #1
 800d22e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d0f0      	beq.n	800d218 <__gethex+0x320>
 800d236:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d23a:	f104 0314 	add.w	r3, r4, #20
 800d23e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d242:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d246:	f04f 0c00 	mov.w	ip, #0
 800d24a:	4618      	mov	r0, r3
 800d24c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d250:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d254:	d01b      	beq.n	800d28e <__gethex+0x396>
 800d256:	3201      	adds	r2, #1
 800d258:	6002      	str	r2, [r0, #0]
 800d25a:	2d02      	cmp	r5, #2
 800d25c:	f104 0314 	add.w	r3, r4, #20
 800d260:	d13c      	bne.n	800d2dc <__gethex+0x3e4>
 800d262:	f8d8 2000 	ldr.w	r2, [r8]
 800d266:	3a01      	subs	r2, #1
 800d268:	42b2      	cmp	r2, r6
 800d26a:	d109      	bne.n	800d280 <__gethex+0x388>
 800d26c:	1171      	asrs	r1, r6, #5
 800d26e:	2201      	movs	r2, #1
 800d270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d274:	f006 061f 	and.w	r6, r6, #31
 800d278:	fa02 f606 	lsl.w	r6, r2, r6
 800d27c:	421e      	tst	r6, r3
 800d27e:	d13a      	bne.n	800d2f6 <__gethex+0x3fe>
 800d280:	f045 0520 	orr.w	r5, r5, #32
 800d284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d286:	601c      	str	r4, [r3, #0]
 800d288:	9b02      	ldr	r3, [sp, #8]
 800d28a:	601f      	str	r7, [r3, #0]
 800d28c:	e6b0      	b.n	800cff0 <__gethex+0xf8>
 800d28e:	4299      	cmp	r1, r3
 800d290:	f843 cc04 	str.w	ip, [r3, #-4]
 800d294:	d8d9      	bhi.n	800d24a <__gethex+0x352>
 800d296:	68a3      	ldr	r3, [r4, #8]
 800d298:	459b      	cmp	fp, r3
 800d29a:	db17      	blt.n	800d2cc <__gethex+0x3d4>
 800d29c:	6861      	ldr	r1, [r4, #4]
 800d29e:	9801      	ldr	r0, [sp, #4]
 800d2a0:	3101      	adds	r1, #1
 800d2a2:	f000 f9bb 	bl	800d61c <_Balloc>
 800d2a6:	4681      	mov	r9, r0
 800d2a8:	b918      	cbnz	r0, 800d2b2 <__gethex+0x3ba>
 800d2aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d314 <__gethex+0x41c>)
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	2184      	movs	r1, #132	@ 0x84
 800d2b0:	e6c5      	b.n	800d03e <__gethex+0x146>
 800d2b2:	6922      	ldr	r2, [r4, #16]
 800d2b4:	3202      	adds	r2, #2
 800d2b6:	f104 010c 	add.w	r1, r4, #12
 800d2ba:	0092      	lsls	r2, r2, #2
 800d2bc:	300c      	adds	r0, #12
 800d2be:	f7ff fd4c 	bl	800cd5a <memcpy>
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	9801      	ldr	r0, [sp, #4]
 800d2c6:	f000 f9e9 	bl	800d69c <_Bfree>
 800d2ca:	464c      	mov	r4, r9
 800d2cc:	6923      	ldr	r3, [r4, #16]
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2d4:	6122      	str	r2, [r4, #16]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	615a      	str	r2, [r3, #20]
 800d2da:	e7be      	b.n	800d25a <__gethex+0x362>
 800d2dc:	6922      	ldr	r2, [r4, #16]
 800d2de:	455a      	cmp	r2, fp
 800d2e0:	dd0b      	ble.n	800d2fa <__gethex+0x402>
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f7ff fd9f 	bl	800ce28 <rshift>
 800d2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2ee:	3701      	adds	r7, #1
 800d2f0:	42bb      	cmp	r3, r7
 800d2f2:	f6ff aee0 	blt.w	800d0b6 <__gethex+0x1be>
 800d2f6:	2501      	movs	r5, #1
 800d2f8:	e7c2      	b.n	800d280 <__gethex+0x388>
 800d2fa:	f016 061f 	ands.w	r6, r6, #31
 800d2fe:	d0fa      	beq.n	800d2f6 <__gethex+0x3fe>
 800d300:	4453      	add	r3, sl
 800d302:	f1c6 0620 	rsb	r6, r6, #32
 800d306:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d30a:	f000 fa79 	bl	800d800 <__hi0bits>
 800d30e:	42b0      	cmp	r0, r6
 800d310:	dbe7      	blt.n	800d2e2 <__gethex+0x3ea>
 800d312:	e7f0      	b.n	800d2f6 <__gethex+0x3fe>
 800d314:	0800ec19 	.word	0x0800ec19

0800d318 <L_shift>:
 800d318:	f1c2 0208 	rsb	r2, r2, #8
 800d31c:	0092      	lsls	r2, r2, #2
 800d31e:	b570      	push	{r4, r5, r6, lr}
 800d320:	f1c2 0620 	rsb	r6, r2, #32
 800d324:	6843      	ldr	r3, [r0, #4]
 800d326:	6804      	ldr	r4, [r0, #0]
 800d328:	fa03 f506 	lsl.w	r5, r3, r6
 800d32c:	432c      	orrs	r4, r5
 800d32e:	40d3      	lsrs	r3, r2
 800d330:	6004      	str	r4, [r0, #0]
 800d332:	f840 3f04 	str.w	r3, [r0, #4]!
 800d336:	4288      	cmp	r0, r1
 800d338:	d3f4      	bcc.n	800d324 <L_shift+0xc>
 800d33a:	bd70      	pop	{r4, r5, r6, pc}

0800d33c <__match>:
 800d33c:	b530      	push	{r4, r5, lr}
 800d33e:	6803      	ldr	r3, [r0, #0]
 800d340:	3301      	adds	r3, #1
 800d342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d346:	b914      	cbnz	r4, 800d34e <__match+0x12>
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	2001      	movs	r0, #1
 800d34c:	bd30      	pop	{r4, r5, pc}
 800d34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d352:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d356:	2d19      	cmp	r5, #25
 800d358:	bf98      	it	ls
 800d35a:	3220      	addls	r2, #32
 800d35c:	42a2      	cmp	r2, r4
 800d35e:	d0f0      	beq.n	800d342 <__match+0x6>
 800d360:	2000      	movs	r0, #0
 800d362:	e7f3      	b.n	800d34c <__match+0x10>

0800d364 <__hexnan>:
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	680b      	ldr	r3, [r1, #0]
 800d36a:	6801      	ldr	r1, [r0, #0]
 800d36c:	115e      	asrs	r6, r3, #5
 800d36e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d372:	f013 031f 	ands.w	r3, r3, #31
 800d376:	b087      	sub	sp, #28
 800d378:	bf18      	it	ne
 800d37a:	3604      	addne	r6, #4
 800d37c:	2500      	movs	r5, #0
 800d37e:	1f37      	subs	r7, r6, #4
 800d380:	4682      	mov	sl, r0
 800d382:	4690      	mov	r8, r2
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	f846 5c04 	str.w	r5, [r6, #-4]
 800d38a:	46b9      	mov	r9, r7
 800d38c:	463c      	mov	r4, r7
 800d38e:	9502      	str	r5, [sp, #8]
 800d390:	46ab      	mov	fp, r5
 800d392:	784a      	ldrb	r2, [r1, #1]
 800d394:	1c4b      	adds	r3, r1, #1
 800d396:	9303      	str	r3, [sp, #12]
 800d398:	b342      	cbz	r2, 800d3ec <__hexnan+0x88>
 800d39a:	4610      	mov	r0, r2
 800d39c:	9105      	str	r1, [sp, #20]
 800d39e:	9204      	str	r2, [sp, #16]
 800d3a0:	f7ff fd94 	bl	800cecc <__hexdig_fun>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d151      	bne.n	800d44c <__hexnan+0xe8>
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	9905      	ldr	r1, [sp, #20]
 800d3ac:	2a20      	cmp	r2, #32
 800d3ae:	d818      	bhi.n	800d3e2 <__hexnan+0x7e>
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	459b      	cmp	fp, r3
 800d3b4:	dd13      	ble.n	800d3de <__hexnan+0x7a>
 800d3b6:	454c      	cmp	r4, r9
 800d3b8:	d206      	bcs.n	800d3c8 <__hexnan+0x64>
 800d3ba:	2d07      	cmp	r5, #7
 800d3bc:	dc04      	bgt.n	800d3c8 <__hexnan+0x64>
 800d3be:	462a      	mov	r2, r5
 800d3c0:	4649      	mov	r1, r9
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7ff ffa8 	bl	800d318 <L_shift>
 800d3c8:	4544      	cmp	r4, r8
 800d3ca:	d952      	bls.n	800d472 <__hexnan+0x10e>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f1a4 0904 	sub.w	r9, r4, #4
 800d3d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3d6:	f8cd b008 	str.w	fp, [sp, #8]
 800d3da:	464c      	mov	r4, r9
 800d3dc:	461d      	mov	r5, r3
 800d3de:	9903      	ldr	r1, [sp, #12]
 800d3e0:	e7d7      	b.n	800d392 <__hexnan+0x2e>
 800d3e2:	2a29      	cmp	r2, #41	@ 0x29
 800d3e4:	d157      	bne.n	800d496 <__hexnan+0x132>
 800d3e6:	3102      	adds	r1, #2
 800d3e8:	f8ca 1000 	str.w	r1, [sl]
 800d3ec:	f1bb 0f00 	cmp.w	fp, #0
 800d3f0:	d051      	beq.n	800d496 <__hexnan+0x132>
 800d3f2:	454c      	cmp	r4, r9
 800d3f4:	d206      	bcs.n	800d404 <__hexnan+0xa0>
 800d3f6:	2d07      	cmp	r5, #7
 800d3f8:	dc04      	bgt.n	800d404 <__hexnan+0xa0>
 800d3fa:	462a      	mov	r2, r5
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	4620      	mov	r0, r4
 800d400:	f7ff ff8a 	bl	800d318 <L_shift>
 800d404:	4544      	cmp	r4, r8
 800d406:	d936      	bls.n	800d476 <__hexnan+0x112>
 800d408:	f1a8 0204 	sub.w	r2, r8, #4
 800d40c:	4623      	mov	r3, r4
 800d40e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d412:	f842 1f04 	str.w	r1, [r2, #4]!
 800d416:	429f      	cmp	r7, r3
 800d418:	d2f9      	bcs.n	800d40e <__hexnan+0xaa>
 800d41a:	1b3b      	subs	r3, r7, r4
 800d41c:	f023 0303 	bic.w	r3, r3, #3
 800d420:	3304      	adds	r3, #4
 800d422:	3401      	adds	r4, #1
 800d424:	3e03      	subs	r6, #3
 800d426:	42b4      	cmp	r4, r6
 800d428:	bf88      	it	hi
 800d42a:	2304      	movhi	r3, #4
 800d42c:	4443      	add	r3, r8
 800d42e:	2200      	movs	r2, #0
 800d430:	f843 2b04 	str.w	r2, [r3], #4
 800d434:	429f      	cmp	r7, r3
 800d436:	d2fb      	bcs.n	800d430 <__hexnan+0xcc>
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	b91b      	cbnz	r3, 800d444 <__hexnan+0xe0>
 800d43c:	4547      	cmp	r7, r8
 800d43e:	d128      	bne.n	800d492 <__hexnan+0x12e>
 800d440:	2301      	movs	r3, #1
 800d442:	603b      	str	r3, [r7, #0]
 800d444:	2005      	movs	r0, #5
 800d446:	b007      	add	sp, #28
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	3501      	adds	r5, #1
 800d44e:	2d08      	cmp	r5, #8
 800d450:	f10b 0b01 	add.w	fp, fp, #1
 800d454:	dd06      	ble.n	800d464 <__hexnan+0x100>
 800d456:	4544      	cmp	r4, r8
 800d458:	d9c1      	bls.n	800d3de <__hexnan+0x7a>
 800d45a:	2300      	movs	r3, #0
 800d45c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d460:	2501      	movs	r5, #1
 800d462:	3c04      	subs	r4, #4
 800d464:	6822      	ldr	r2, [r4, #0]
 800d466:	f000 000f 	and.w	r0, r0, #15
 800d46a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d46e:	6020      	str	r0, [r4, #0]
 800d470:	e7b5      	b.n	800d3de <__hexnan+0x7a>
 800d472:	2508      	movs	r5, #8
 800d474:	e7b3      	b.n	800d3de <__hexnan+0x7a>
 800d476:	9b01      	ldr	r3, [sp, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d0dd      	beq.n	800d438 <__hexnan+0xd4>
 800d47c:	f1c3 0320 	rsb	r3, r3, #32
 800d480:	f04f 32ff 	mov.w	r2, #4294967295
 800d484:	40da      	lsrs	r2, r3
 800d486:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d48a:	4013      	ands	r3, r2
 800d48c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d490:	e7d2      	b.n	800d438 <__hexnan+0xd4>
 800d492:	3f04      	subs	r7, #4
 800d494:	e7d0      	b.n	800d438 <__hexnan+0xd4>
 800d496:	2004      	movs	r0, #4
 800d498:	e7d5      	b.n	800d446 <__hexnan+0xe2>
	...

0800d49c <sbrk_aligned>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	4e0f      	ldr	r6, [pc, #60]	@ (800d4dc <sbrk_aligned+0x40>)
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	6831      	ldr	r1, [r6, #0]
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	b911      	cbnz	r1, 800d4ae <sbrk_aligned+0x12>
 800d4a8:	f001 f986 	bl	800e7b8 <_sbrk_r>
 800d4ac:	6030      	str	r0, [r6, #0]
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f001 f981 	bl	800e7b8 <_sbrk_r>
 800d4b6:	1c43      	adds	r3, r0, #1
 800d4b8:	d103      	bne.n	800d4c2 <sbrk_aligned+0x26>
 800d4ba:	f04f 34ff 	mov.w	r4, #4294967295
 800d4be:	4620      	mov	r0, r4
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	1cc4      	adds	r4, r0, #3
 800d4c4:	f024 0403 	bic.w	r4, r4, #3
 800d4c8:	42a0      	cmp	r0, r4
 800d4ca:	d0f8      	beq.n	800d4be <sbrk_aligned+0x22>
 800d4cc:	1a21      	subs	r1, r4, r0
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f001 f972 	bl	800e7b8 <_sbrk_r>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d1f2      	bne.n	800d4be <sbrk_aligned+0x22>
 800d4d8:	e7ef      	b.n	800d4ba <sbrk_aligned+0x1e>
 800d4da:	bf00      	nop
 800d4dc:	200022a4 	.word	0x200022a4

0800d4e0 <_malloc_r>:
 800d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	1ccd      	adds	r5, r1, #3
 800d4e6:	f025 0503 	bic.w	r5, r5, #3
 800d4ea:	3508      	adds	r5, #8
 800d4ec:	2d0c      	cmp	r5, #12
 800d4ee:	bf38      	it	cc
 800d4f0:	250c      	movcc	r5, #12
 800d4f2:	2d00      	cmp	r5, #0
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	db01      	blt.n	800d4fc <_malloc_r+0x1c>
 800d4f8:	42a9      	cmp	r1, r5
 800d4fa:	d904      	bls.n	800d506 <_malloc_r+0x26>
 800d4fc:	230c      	movs	r3, #12
 800d4fe:	6033      	str	r3, [r6, #0]
 800d500:	2000      	movs	r0, #0
 800d502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5dc <_malloc_r+0xfc>
 800d50a:	f000 f87b 	bl	800d604 <__malloc_lock>
 800d50e:	f8d8 3000 	ldr.w	r3, [r8]
 800d512:	461c      	mov	r4, r3
 800d514:	bb44      	cbnz	r4, 800d568 <_malloc_r+0x88>
 800d516:	4629      	mov	r1, r5
 800d518:	4630      	mov	r0, r6
 800d51a:	f7ff ffbf 	bl	800d49c <sbrk_aligned>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	4604      	mov	r4, r0
 800d522:	d158      	bne.n	800d5d6 <_malloc_r+0xf6>
 800d524:	f8d8 4000 	ldr.w	r4, [r8]
 800d528:	4627      	mov	r7, r4
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	d143      	bne.n	800d5b6 <_malloc_r+0xd6>
 800d52e:	2c00      	cmp	r4, #0
 800d530:	d04b      	beq.n	800d5ca <_malloc_r+0xea>
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	4639      	mov	r1, r7
 800d536:	4630      	mov	r0, r6
 800d538:	eb04 0903 	add.w	r9, r4, r3
 800d53c:	f001 f93c 	bl	800e7b8 <_sbrk_r>
 800d540:	4581      	cmp	r9, r0
 800d542:	d142      	bne.n	800d5ca <_malloc_r+0xea>
 800d544:	6821      	ldr	r1, [r4, #0]
 800d546:	1a6d      	subs	r5, r5, r1
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ffa6 	bl	800d49c <sbrk_aligned>
 800d550:	3001      	adds	r0, #1
 800d552:	d03a      	beq.n	800d5ca <_malloc_r+0xea>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	442b      	add	r3, r5
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	f8d8 3000 	ldr.w	r3, [r8]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	bb62      	cbnz	r2, 800d5bc <_malloc_r+0xdc>
 800d562:	f8c8 7000 	str.w	r7, [r8]
 800d566:	e00f      	b.n	800d588 <_malloc_r+0xa8>
 800d568:	6822      	ldr	r2, [r4, #0]
 800d56a:	1b52      	subs	r2, r2, r5
 800d56c:	d420      	bmi.n	800d5b0 <_malloc_r+0xd0>
 800d56e:	2a0b      	cmp	r2, #11
 800d570:	d917      	bls.n	800d5a2 <_malloc_r+0xc2>
 800d572:	1961      	adds	r1, r4, r5
 800d574:	42a3      	cmp	r3, r4
 800d576:	6025      	str	r5, [r4, #0]
 800d578:	bf18      	it	ne
 800d57a:	6059      	strne	r1, [r3, #4]
 800d57c:	6863      	ldr	r3, [r4, #4]
 800d57e:	bf08      	it	eq
 800d580:	f8c8 1000 	streq.w	r1, [r8]
 800d584:	5162      	str	r2, [r4, r5]
 800d586:	604b      	str	r3, [r1, #4]
 800d588:	4630      	mov	r0, r6
 800d58a:	f000 f841 	bl	800d610 <__malloc_unlock>
 800d58e:	f104 000b 	add.w	r0, r4, #11
 800d592:	1d23      	adds	r3, r4, #4
 800d594:	f020 0007 	bic.w	r0, r0, #7
 800d598:	1ac2      	subs	r2, r0, r3
 800d59a:	bf1c      	itt	ne
 800d59c:	1a1b      	subne	r3, r3, r0
 800d59e:	50a3      	strne	r3, [r4, r2]
 800d5a0:	e7af      	b.n	800d502 <_malloc_r+0x22>
 800d5a2:	6862      	ldr	r2, [r4, #4]
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	bf0c      	ite	eq
 800d5a8:	f8c8 2000 	streq.w	r2, [r8]
 800d5ac:	605a      	strne	r2, [r3, #4]
 800d5ae:	e7eb      	b.n	800d588 <_malloc_r+0xa8>
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	6864      	ldr	r4, [r4, #4]
 800d5b4:	e7ae      	b.n	800d514 <_malloc_r+0x34>
 800d5b6:	463c      	mov	r4, r7
 800d5b8:	687f      	ldr	r7, [r7, #4]
 800d5ba:	e7b6      	b.n	800d52a <_malloc_r+0x4a>
 800d5bc:	461a      	mov	r2, r3
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	d1fb      	bne.n	800d5bc <_malloc_r+0xdc>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	6053      	str	r3, [r2, #4]
 800d5c8:	e7de      	b.n	800d588 <_malloc_r+0xa8>
 800d5ca:	230c      	movs	r3, #12
 800d5cc:	6033      	str	r3, [r6, #0]
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f000 f81e 	bl	800d610 <__malloc_unlock>
 800d5d4:	e794      	b.n	800d500 <_malloc_r+0x20>
 800d5d6:	6005      	str	r5, [r0, #0]
 800d5d8:	e7d6      	b.n	800d588 <_malloc_r+0xa8>
 800d5da:	bf00      	nop
 800d5dc:	200022a8 	.word	0x200022a8

0800d5e0 <__ascii_mbtowc>:
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	b901      	cbnz	r1, 800d5e6 <__ascii_mbtowc+0x6>
 800d5e4:	a901      	add	r1, sp, #4
 800d5e6:	b142      	cbz	r2, 800d5fa <__ascii_mbtowc+0x1a>
 800d5e8:	b14b      	cbz	r3, 800d5fe <__ascii_mbtowc+0x1e>
 800d5ea:	7813      	ldrb	r3, [r2, #0]
 800d5ec:	600b      	str	r3, [r1, #0]
 800d5ee:	7812      	ldrb	r2, [r2, #0]
 800d5f0:	1e10      	subs	r0, r2, #0
 800d5f2:	bf18      	it	ne
 800d5f4:	2001      	movne	r0, #1
 800d5f6:	b002      	add	sp, #8
 800d5f8:	4770      	bx	lr
 800d5fa:	4610      	mov	r0, r2
 800d5fc:	e7fb      	b.n	800d5f6 <__ascii_mbtowc+0x16>
 800d5fe:	f06f 0001 	mvn.w	r0, #1
 800d602:	e7f8      	b.n	800d5f6 <__ascii_mbtowc+0x16>

0800d604 <__malloc_lock>:
 800d604:	4801      	ldr	r0, [pc, #4]	@ (800d60c <__malloc_lock+0x8>)
 800d606:	f7ff bba6 	b.w	800cd56 <__retarget_lock_acquire_recursive>
 800d60a:	bf00      	nop
 800d60c:	200022a0 	.word	0x200022a0

0800d610 <__malloc_unlock>:
 800d610:	4801      	ldr	r0, [pc, #4]	@ (800d618 <__malloc_unlock+0x8>)
 800d612:	f7ff bba1 	b.w	800cd58 <__retarget_lock_release_recursive>
 800d616:	bf00      	nop
 800d618:	200022a0 	.word	0x200022a0

0800d61c <_Balloc>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	69c6      	ldr	r6, [r0, #28]
 800d620:	4604      	mov	r4, r0
 800d622:	460d      	mov	r5, r1
 800d624:	b976      	cbnz	r6, 800d644 <_Balloc+0x28>
 800d626:	2010      	movs	r0, #16
 800d628:	f001 f908 	bl	800e83c <malloc>
 800d62c:	4602      	mov	r2, r0
 800d62e:	61e0      	str	r0, [r4, #28]
 800d630:	b920      	cbnz	r0, 800d63c <_Balloc+0x20>
 800d632:	4b18      	ldr	r3, [pc, #96]	@ (800d694 <_Balloc+0x78>)
 800d634:	4818      	ldr	r0, [pc, #96]	@ (800d698 <_Balloc+0x7c>)
 800d636:	216b      	movs	r1, #107	@ 0x6b
 800d638:	f001 f8ce 	bl	800e7d8 <__assert_func>
 800d63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d640:	6006      	str	r6, [r0, #0]
 800d642:	60c6      	str	r6, [r0, #12]
 800d644:	69e6      	ldr	r6, [r4, #28]
 800d646:	68f3      	ldr	r3, [r6, #12]
 800d648:	b183      	cbz	r3, 800d66c <_Balloc+0x50>
 800d64a:	69e3      	ldr	r3, [r4, #28]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d652:	b9b8      	cbnz	r0, 800d684 <_Balloc+0x68>
 800d654:	2101      	movs	r1, #1
 800d656:	fa01 f605 	lsl.w	r6, r1, r5
 800d65a:	1d72      	adds	r2, r6, #5
 800d65c:	0092      	lsls	r2, r2, #2
 800d65e:	4620      	mov	r0, r4
 800d660:	f001 f8d8 	bl	800e814 <_calloc_r>
 800d664:	b160      	cbz	r0, 800d680 <_Balloc+0x64>
 800d666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d66a:	e00e      	b.n	800d68a <_Balloc+0x6e>
 800d66c:	2221      	movs	r2, #33	@ 0x21
 800d66e:	2104      	movs	r1, #4
 800d670:	4620      	mov	r0, r4
 800d672:	f001 f8cf 	bl	800e814 <_calloc_r>
 800d676:	69e3      	ldr	r3, [r4, #28]
 800d678:	60f0      	str	r0, [r6, #12]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e4      	bne.n	800d64a <_Balloc+0x2e>
 800d680:	2000      	movs	r0, #0
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	6802      	ldr	r2, [r0, #0]
 800d686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d68a:	2300      	movs	r3, #0
 800d68c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d690:	e7f7      	b.n	800d682 <_Balloc+0x66>
 800d692:	bf00      	nop
 800d694:	0800ec8a 	.word	0x0800ec8a
 800d698:	0800eca1 	.word	0x0800eca1

0800d69c <_Bfree>:
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	69c6      	ldr	r6, [r0, #28]
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	b976      	cbnz	r6, 800d6c4 <_Bfree+0x28>
 800d6a6:	2010      	movs	r0, #16
 800d6a8:	f001 f8c8 	bl	800e83c <malloc>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	61e8      	str	r0, [r5, #28]
 800d6b0:	b920      	cbnz	r0, 800d6bc <_Bfree+0x20>
 800d6b2:	4b09      	ldr	r3, [pc, #36]	@ (800d6d8 <_Bfree+0x3c>)
 800d6b4:	4809      	ldr	r0, [pc, #36]	@ (800d6dc <_Bfree+0x40>)
 800d6b6:	218f      	movs	r1, #143	@ 0x8f
 800d6b8:	f001 f88e 	bl	800e7d8 <__assert_func>
 800d6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6c0:	6006      	str	r6, [r0, #0]
 800d6c2:	60c6      	str	r6, [r0, #12]
 800d6c4:	b13c      	cbz	r4, 800d6d6 <_Bfree+0x3a>
 800d6c6:	69eb      	ldr	r3, [r5, #28]
 800d6c8:	6862      	ldr	r2, [r4, #4]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6d0:	6021      	str	r1, [r4, #0]
 800d6d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6d6:	bd70      	pop	{r4, r5, r6, pc}
 800d6d8:	0800ec8a 	.word	0x0800ec8a
 800d6dc:	0800eca1 	.word	0x0800eca1

0800d6e0 <__multadd>:
 800d6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e4:	690d      	ldr	r5, [r1, #16]
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	460c      	mov	r4, r1
 800d6ea:	461e      	mov	r6, r3
 800d6ec:	f101 0c14 	add.w	ip, r1, #20
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d6f6:	b299      	uxth	r1, r3
 800d6f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d6fc:	0c1e      	lsrs	r6, r3, #16
 800d6fe:	0c0b      	lsrs	r3, r1, #16
 800d700:	fb02 3306 	mla	r3, r2, r6, r3
 800d704:	b289      	uxth	r1, r1
 800d706:	3001      	adds	r0, #1
 800d708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d70c:	4285      	cmp	r5, r0
 800d70e:	f84c 1b04 	str.w	r1, [ip], #4
 800d712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d716:	dcec      	bgt.n	800d6f2 <__multadd+0x12>
 800d718:	b30e      	cbz	r6, 800d75e <__multadd+0x7e>
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	42ab      	cmp	r3, r5
 800d71e:	dc19      	bgt.n	800d754 <__multadd+0x74>
 800d720:	6861      	ldr	r1, [r4, #4]
 800d722:	4638      	mov	r0, r7
 800d724:	3101      	adds	r1, #1
 800d726:	f7ff ff79 	bl	800d61c <_Balloc>
 800d72a:	4680      	mov	r8, r0
 800d72c:	b928      	cbnz	r0, 800d73a <__multadd+0x5a>
 800d72e:	4602      	mov	r2, r0
 800d730:	4b0c      	ldr	r3, [pc, #48]	@ (800d764 <__multadd+0x84>)
 800d732:	480d      	ldr	r0, [pc, #52]	@ (800d768 <__multadd+0x88>)
 800d734:	21ba      	movs	r1, #186	@ 0xba
 800d736:	f001 f84f 	bl	800e7d8 <__assert_func>
 800d73a:	6922      	ldr	r2, [r4, #16]
 800d73c:	3202      	adds	r2, #2
 800d73e:	f104 010c 	add.w	r1, r4, #12
 800d742:	0092      	lsls	r2, r2, #2
 800d744:	300c      	adds	r0, #12
 800d746:	f7ff fb08 	bl	800cd5a <memcpy>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4638      	mov	r0, r7
 800d74e:	f7ff ffa5 	bl	800d69c <_Bfree>
 800d752:	4644      	mov	r4, r8
 800d754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d758:	3501      	adds	r5, #1
 800d75a:	615e      	str	r6, [r3, #20]
 800d75c:	6125      	str	r5, [r4, #16]
 800d75e:	4620      	mov	r0, r4
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d764:	0800ec19 	.word	0x0800ec19
 800d768:	0800eca1 	.word	0x0800eca1

0800d76c <__s2b>:
 800d76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d770:	460c      	mov	r4, r1
 800d772:	4615      	mov	r5, r2
 800d774:	461f      	mov	r7, r3
 800d776:	2209      	movs	r2, #9
 800d778:	3308      	adds	r3, #8
 800d77a:	4606      	mov	r6, r0
 800d77c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d780:	2100      	movs	r1, #0
 800d782:	2201      	movs	r2, #1
 800d784:	429a      	cmp	r2, r3
 800d786:	db09      	blt.n	800d79c <__s2b+0x30>
 800d788:	4630      	mov	r0, r6
 800d78a:	f7ff ff47 	bl	800d61c <_Balloc>
 800d78e:	b940      	cbnz	r0, 800d7a2 <__s2b+0x36>
 800d790:	4602      	mov	r2, r0
 800d792:	4b19      	ldr	r3, [pc, #100]	@ (800d7f8 <__s2b+0x8c>)
 800d794:	4819      	ldr	r0, [pc, #100]	@ (800d7fc <__s2b+0x90>)
 800d796:	21d3      	movs	r1, #211	@ 0xd3
 800d798:	f001 f81e 	bl	800e7d8 <__assert_func>
 800d79c:	0052      	lsls	r2, r2, #1
 800d79e:	3101      	adds	r1, #1
 800d7a0:	e7f0      	b.n	800d784 <__s2b+0x18>
 800d7a2:	9b08      	ldr	r3, [sp, #32]
 800d7a4:	6143      	str	r3, [r0, #20]
 800d7a6:	2d09      	cmp	r5, #9
 800d7a8:	f04f 0301 	mov.w	r3, #1
 800d7ac:	6103      	str	r3, [r0, #16]
 800d7ae:	dd16      	ble.n	800d7de <__s2b+0x72>
 800d7b0:	f104 0909 	add.w	r9, r4, #9
 800d7b4:	46c8      	mov	r8, r9
 800d7b6:	442c      	add	r4, r5
 800d7b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d7bc:	4601      	mov	r1, r0
 800d7be:	3b30      	subs	r3, #48	@ 0x30
 800d7c0:	220a      	movs	r2, #10
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f7ff ff8c 	bl	800d6e0 <__multadd>
 800d7c8:	45a0      	cmp	r8, r4
 800d7ca:	d1f5      	bne.n	800d7b8 <__s2b+0x4c>
 800d7cc:	f1a5 0408 	sub.w	r4, r5, #8
 800d7d0:	444c      	add	r4, r9
 800d7d2:	1b2d      	subs	r5, r5, r4
 800d7d4:	1963      	adds	r3, r4, r5
 800d7d6:	42bb      	cmp	r3, r7
 800d7d8:	db04      	blt.n	800d7e4 <__s2b+0x78>
 800d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7de:	340a      	adds	r4, #10
 800d7e0:	2509      	movs	r5, #9
 800d7e2:	e7f6      	b.n	800d7d2 <__s2b+0x66>
 800d7e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	3b30      	subs	r3, #48	@ 0x30
 800d7ec:	220a      	movs	r2, #10
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7ff ff76 	bl	800d6e0 <__multadd>
 800d7f4:	e7ee      	b.n	800d7d4 <__s2b+0x68>
 800d7f6:	bf00      	nop
 800d7f8:	0800ec19 	.word	0x0800ec19
 800d7fc:	0800eca1 	.word	0x0800eca1

0800d800 <__hi0bits>:
 800d800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d804:	4603      	mov	r3, r0
 800d806:	bf36      	itet	cc
 800d808:	0403      	lslcc	r3, r0, #16
 800d80a:	2000      	movcs	r0, #0
 800d80c:	2010      	movcc	r0, #16
 800d80e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d812:	bf3c      	itt	cc
 800d814:	021b      	lslcc	r3, r3, #8
 800d816:	3008      	addcc	r0, #8
 800d818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d81c:	bf3c      	itt	cc
 800d81e:	011b      	lslcc	r3, r3, #4
 800d820:	3004      	addcc	r0, #4
 800d822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d826:	bf3c      	itt	cc
 800d828:	009b      	lslcc	r3, r3, #2
 800d82a:	3002      	addcc	r0, #2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	db05      	blt.n	800d83c <__hi0bits+0x3c>
 800d830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d834:	f100 0001 	add.w	r0, r0, #1
 800d838:	bf08      	it	eq
 800d83a:	2020      	moveq	r0, #32
 800d83c:	4770      	bx	lr

0800d83e <__lo0bits>:
 800d83e:	6803      	ldr	r3, [r0, #0]
 800d840:	4602      	mov	r2, r0
 800d842:	f013 0007 	ands.w	r0, r3, #7
 800d846:	d00b      	beq.n	800d860 <__lo0bits+0x22>
 800d848:	07d9      	lsls	r1, r3, #31
 800d84a:	d421      	bmi.n	800d890 <__lo0bits+0x52>
 800d84c:	0798      	lsls	r0, r3, #30
 800d84e:	bf49      	itett	mi
 800d850:	085b      	lsrmi	r3, r3, #1
 800d852:	089b      	lsrpl	r3, r3, #2
 800d854:	2001      	movmi	r0, #1
 800d856:	6013      	strmi	r3, [r2, #0]
 800d858:	bf5c      	itt	pl
 800d85a:	6013      	strpl	r3, [r2, #0]
 800d85c:	2002      	movpl	r0, #2
 800d85e:	4770      	bx	lr
 800d860:	b299      	uxth	r1, r3
 800d862:	b909      	cbnz	r1, 800d868 <__lo0bits+0x2a>
 800d864:	0c1b      	lsrs	r3, r3, #16
 800d866:	2010      	movs	r0, #16
 800d868:	b2d9      	uxtb	r1, r3
 800d86a:	b909      	cbnz	r1, 800d870 <__lo0bits+0x32>
 800d86c:	3008      	adds	r0, #8
 800d86e:	0a1b      	lsrs	r3, r3, #8
 800d870:	0719      	lsls	r1, r3, #28
 800d872:	bf04      	itt	eq
 800d874:	091b      	lsreq	r3, r3, #4
 800d876:	3004      	addeq	r0, #4
 800d878:	0799      	lsls	r1, r3, #30
 800d87a:	bf04      	itt	eq
 800d87c:	089b      	lsreq	r3, r3, #2
 800d87e:	3002      	addeq	r0, #2
 800d880:	07d9      	lsls	r1, r3, #31
 800d882:	d403      	bmi.n	800d88c <__lo0bits+0x4e>
 800d884:	085b      	lsrs	r3, r3, #1
 800d886:	f100 0001 	add.w	r0, r0, #1
 800d88a:	d003      	beq.n	800d894 <__lo0bits+0x56>
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	4770      	bx	lr
 800d890:	2000      	movs	r0, #0
 800d892:	4770      	bx	lr
 800d894:	2020      	movs	r0, #32
 800d896:	4770      	bx	lr

0800d898 <__i2b>:
 800d898:	b510      	push	{r4, lr}
 800d89a:	460c      	mov	r4, r1
 800d89c:	2101      	movs	r1, #1
 800d89e:	f7ff febd 	bl	800d61c <_Balloc>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	b928      	cbnz	r0, 800d8b2 <__i2b+0x1a>
 800d8a6:	4b05      	ldr	r3, [pc, #20]	@ (800d8bc <__i2b+0x24>)
 800d8a8:	4805      	ldr	r0, [pc, #20]	@ (800d8c0 <__i2b+0x28>)
 800d8aa:	f240 1145 	movw	r1, #325	@ 0x145
 800d8ae:	f000 ff93 	bl	800e7d8 <__assert_func>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	6144      	str	r4, [r0, #20]
 800d8b6:	6103      	str	r3, [r0, #16]
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800ec19 	.word	0x0800ec19
 800d8c0:	0800eca1 	.word	0x0800eca1

0800d8c4 <__multiply>:
 800d8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c8:	4614      	mov	r4, r2
 800d8ca:	690a      	ldr	r2, [r1, #16]
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	bfa8      	it	ge
 800d8d2:	4623      	movge	r3, r4
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	bfa4      	itt	ge
 800d8d8:	460c      	movge	r4, r1
 800d8da:	461f      	movge	r7, r3
 800d8dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d8e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	6861      	ldr	r1, [r4, #4]
 800d8e8:	eb0a 0609 	add.w	r6, sl, r9
 800d8ec:	42b3      	cmp	r3, r6
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	bfb8      	it	lt
 800d8f2:	3101      	addlt	r1, #1
 800d8f4:	f7ff fe92 	bl	800d61c <_Balloc>
 800d8f8:	b930      	cbnz	r0, 800d908 <__multiply+0x44>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	4b44      	ldr	r3, [pc, #272]	@ (800da10 <__multiply+0x14c>)
 800d8fe:	4845      	ldr	r0, [pc, #276]	@ (800da14 <__multiply+0x150>)
 800d900:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d904:	f000 ff68 	bl	800e7d8 <__assert_func>
 800d908:	f100 0514 	add.w	r5, r0, #20
 800d90c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d910:	462b      	mov	r3, r5
 800d912:	2200      	movs	r2, #0
 800d914:	4543      	cmp	r3, r8
 800d916:	d321      	bcc.n	800d95c <__multiply+0x98>
 800d918:	f107 0114 	add.w	r1, r7, #20
 800d91c:	f104 0214 	add.w	r2, r4, #20
 800d920:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d924:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d928:	9302      	str	r3, [sp, #8]
 800d92a:	1b13      	subs	r3, r2, r4
 800d92c:	3b15      	subs	r3, #21
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	3304      	adds	r3, #4
 800d934:	f104 0715 	add.w	r7, r4, #21
 800d938:	42ba      	cmp	r2, r7
 800d93a:	bf38      	it	cc
 800d93c:	2304      	movcc	r3, #4
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	9b02      	ldr	r3, [sp, #8]
 800d942:	9103      	str	r1, [sp, #12]
 800d944:	428b      	cmp	r3, r1
 800d946:	d80c      	bhi.n	800d962 <__multiply+0x9e>
 800d948:	2e00      	cmp	r6, #0
 800d94a:	dd03      	ble.n	800d954 <__multiply+0x90>
 800d94c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d950:	2b00      	cmp	r3, #0
 800d952:	d05b      	beq.n	800da0c <__multiply+0x148>
 800d954:	6106      	str	r6, [r0, #16]
 800d956:	b005      	add	sp, #20
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	f843 2b04 	str.w	r2, [r3], #4
 800d960:	e7d8      	b.n	800d914 <__multiply+0x50>
 800d962:	f8b1 a000 	ldrh.w	sl, [r1]
 800d966:	f1ba 0f00 	cmp.w	sl, #0
 800d96a:	d024      	beq.n	800d9b6 <__multiply+0xf2>
 800d96c:	f104 0e14 	add.w	lr, r4, #20
 800d970:	46a9      	mov	r9, r5
 800d972:	f04f 0c00 	mov.w	ip, #0
 800d976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d97a:	f8d9 3000 	ldr.w	r3, [r9]
 800d97e:	fa1f fb87 	uxth.w	fp, r7
 800d982:	b29b      	uxth	r3, r3
 800d984:	fb0a 330b 	mla	r3, sl, fp, r3
 800d988:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d98c:	f8d9 7000 	ldr.w	r7, [r9]
 800d990:	4463      	add	r3, ip
 800d992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d996:	fb0a c70b 	mla	r7, sl, fp, ip
 800d99a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9a4:	4572      	cmp	r2, lr
 800d9a6:	f849 3b04 	str.w	r3, [r9], #4
 800d9aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9ae:	d8e2      	bhi.n	800d976 <__multiply+0xb2>
 800d9b0:	9b01      	ldr	r3, [sp, #4]
 800d9b2:	f845 c003 	str.w	ip, [r5, r3]
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9bc:	3104      	adds	r1, #4
 800d9be:	f1b9 0f00 	cmp.w	r9, #0
 800d9c2:	d021      	beq.n	800da08 <__multiply+0x144>
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	f104 0c14 	add.w	ip, r4, #20
 800d9ca:	46ae      	mov	lr, r5
 800d9cc:	f04f 0a00 	mov.w	sl, #0
 800d9d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d9d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d9d8:	fb09 770b 	mla	r7, r9, fp, r7
 800d9dc:	4457      	add	r7, sl
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9e4:	f84e 3b04 	str.w	r3, [lr], #4
 800d9e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9f0:	f8be 3000 	ldrh.w	r3, [lr]
 800d9f4:	fb09 330a 	mla	r3, r9, sl, r3
 800d9f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d9fc:	4562      	cmp	r2, ip
 800d9fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da02:	d8e5      	bhi.n	800d9d0 <__multiply+0x10c>
 800da04:	9f01      	ldr	r7, [sp, #4]
 800da06:	51eb      	str	r3, [r5, r7]
 800da08:	3504      	adds	r5, #4
 800da0a:	e799      	b.n	800d940 <__multiply+0x7c>
 800da0c:	3e01      	subs	r6, #1
 800da0e:	e79b      	b.n	800d948 <__multiply+0x84>
 800da10:	0800ec19 	.word	0x0800ec19
 800da14:	0800eca1 	.word	0x0800eca1

0800da18 <__pow5mult>:
 800da18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da1c:	4615      	mov	r5, r2
 800da1e:	f012 0203 	ands.w	r2, r2, #3
 800da22:	4607      	mov	r7, r0
 800da24:	460e      	mov	r6, r1
 800da26:	d007      	beq.n	800da38 <__pow5mult+0x20>
 800da28:	4c25      	ldr	r4, [pc, #148]	@ (800dac0 <__pow5mult+0xa8>)
 800da2a:	3a01      	subs	r2, #1
 800da2c:	2300      	movs	r3, #0
 800da2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da32:	f7ff fe55 	bl	800d6e0 <__multadd>
 800da36:	4606      	mov	r6, r0
 800da38:	10ad      	asrs	r5, r5, #2
 800da3a:	d03d      	beq.n	800dab8 <__pow5mult+0xa0>
 800da3c:	69fc      	ldr	r4, [r7, #28]
 800da3e:	b97c      	cbnz	r4, 800da60 <__pow5mult+0x48>
 800da40:	2010      	movs	r0, #16
 800da42:	f000 fefb 	bl	800e83c <malloc>
 800da46:	4602      	mov	r2, r0
 800da48:	61f8      	str	r0, [r7, #28]
 800da4a:	b928      	cbnz	r0, 800da58 <__pow5mult+0x40>
 800da4c:	4b1d      	ldr	r3, [pc, #116]	@ (800dac4 <__pow5mult+0xac>)
 800da4e:	481e      	ldr	r0, [pc, #120]	@ (800dac8 <__pow5mult+0xb0>)
 800da50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da54:	f000 fec0 	bl	800e7d8 <__assert_func>
 800da58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da5c:	6004      	str	r4, [r0, #0]
 800da5e:	60c4      	str	r4, [r0, #12]
 800da60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da68:	b94c      	cbnz	r4, 800da7e <__pow5mult+0x66>
 800da6a:	f240 2171 	movw	r1, #625	@ 0x271
 800da6e:	4638      	mov	r0, r7
 800da70:	f7ff ff12 	bl	800d898 <__i2b>
 800da74:	2300      	movs	r3, #0
 800da76:	f8c8 0008 	str.w	r0, [r8, #8]
 800da7a:	4604      	mov	r4, r0
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	f04f 0900 	mov.w	r9, #0
 800da82:	07eb      	lsls	r3, r5, #31
 800da84:	d50a      	bpl.n	800da9c <__pow5mult+0x84>
 800da86:	4631      	mov	r1, r6
 800da88:	4622      	mov	r2, r4
 800da8a:	4638      	mov	r0, r7
 800da8c:	f7ff ff1a 	bl	800d8c4 <__multiply>
 800da90:	4631      	mov	r1, r6
 800da92:	4680      	mov	r8, r0
 800da94:	4638      	mov	r0, r7
 800da96:	f7ff fe01 	bl	800d69c <_Bfree>
 800da9a:	4646      	mov	r6, r8
 800da9c:	106d      	asrs	r5, r5, #1
 800da9e:	d00b      	beq.n	800dab8 <__pow5mult+0xa0>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	b938      	cbnz	r0, 800dab4 <__pow5mult+0x9c>
 800daa4:	4622      	mov	r2, r4
 800daa6:	4621      	mov	r1, r4
 800daa8:	4638      	mov	r0, r7
 800daaa:	f7ff ff0b 	bl	800d8c4 <__multiply>
 800daae:	6020      	str	r0, [r4, #0]
 800dab0:	f8c0 9000 	str.w	r9, [r0]
 800dab4:	4604      	mov	r4, r0
 800dab6:	e7e4      	b.n	800da82 <__pow5mult+0x6a>
 800dab8:	4630      	mov	r0, r6
 800daba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dabe:	bf00      	nop
 800dac0:	0800ecfc 	.word	0x0800ecfc
 800dac4:	0800ec8a 	.word	0x0800ec8a
 800dac8:	0800eca1 	.word	0x0800eca1

0800dacc <__lshift>:
 800dacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	460c      	mov	r4, r1
 800dad2:	6849      	ldr	r1, [r1, #4]
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	4607      	mov	r7, r0
 800dade:	4691      	mov	r9, r2
 800dae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dae4:	f108 0601 	add.w	r6, r8, #1
 800dae8:	42b3      	cmp	r3, r6
 800daea:	db0b      	blt.n	800db04 <__lshift+0x38>
 800daec:	4638      	mov	r0, r7
 800daee:	f7ff fd95 	bl	800d61c <_Balloc>
 800daf2:	4605      	mov	r5, r0
 800daf4:	b948      	cbnz	r0, 800db0a <__lshift+0x3e>
 800daf6:	4602      	mov	r2, r0
 800daf8:	4b28      	ldr	r3, [pc, #160]	@ (800db9c <__lshift+0xd0>)
 800dafa:	4829      	ldr	r0, [pc, #164]	@ (800dba0 <__lshift+0xd4>)
 800dafc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db00:	f000 fe6a 	bl	800e7d8 <__assert_func>
 800db04:	3101      	adds	r1, #1
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	e7ee      	b.n	800dae8 <__lshift+0x1c>
 800db0a:	2300      	movs	r3, #0
 800db0c:	f100 0114 	add.w	r1, r0, #20
 800db10:	f100 0210 	add.w	r2, r0, #16
 800db14:	4618      	mov	r0, r3
 800db16:	4553      	cmp	r3, sl
 800db18:	db33      	blt.n	800db82 <__lshift+0xb6>
 800db1a:	6920      	ldr	r0, [r4, #16]
 800db1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db20:	f104 0314 	add.w	r3, r4, #20
 800db24:	f019 091f 	ands.w	r9, r9, #31
 800db28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db30:	d02b      	beq.n	800db8a <__lshift+0xbe>
 800db32:	f1c9 0e20 	rsb	lr, r9, #32
 800db36:	468a      	mov	sl, r1
 800db38:	2200      	movs	r2, #0
 800db3a:	6818      	ldr	r0, [r3, #0]
 800db3c:	fa00 f009 	lsl.w	r0, r0, r9
 800db40:	4310      	orrs	r0, r2
 800db42:	f84a 0b04 	str.w	r0, [sl], #4
 800db46:	f853 2b04 	ldr.w	r2, [r3], #4
 800db4a:	459c      	cmp	ip, r3
 800db4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db50:	d8f3      	bhi.n	800db3a <__lshift+0x6e>
 800db52:	ebac 0304 	sub.w	r3, ip, r4
 800db56:	3b15      	subs	r3, #21
 800db58:	f023 0303 	bic.w	r3, r3, #3
 800db5c:	3304      	adds	r3, #4
 800db5e:	f104 0015 	add.w	r0, r4, #21
 800db62:	4584      	cmp	ip, r0
 800db64:	bf38      	it	cc
 800db66:	2304      	movcc	r3, #4
 800db68:	50ca      	str	r2, [r1, r3]
 800db6a:	b10a      	cbz	r2, 800db70 <__lshift+0xa4>
 800db6c:	f108 0602 	add.w	r6, r8, #2
 800db70:	3e01      	subs	r6, #1
 800db72:	4638      	mov	r0, r7
 800db74:	612e      	str	r6, [r5, #16]
 800db76:	4621      	mov	r1, r4
 800db78:	f7ff fd90 	bl	800d69c <_Bfree>
 800db7c:	4628      	mov	r0, r5
 800db7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db82:	f842 0f04 	str.w	r0, [r2, #4]!
 800db86:	3301      	adds	r3, #1
 800db88:	e7c5      	b.n	800db16 <__lshift+0x4a>
 800db8a:	3904      	subs	r1, #4
 800db8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db90:	f841 2f04 	str.w	r2, [r1, #4]!
 800db94:	459c      	cmp	ip, r3
 800db96:	d8f9      	bhi.n	800db8c <__lshift+0xc0>
 800db98:	e7ea      	b.n	800db70 <__lshift+0xa4>
 800db9a:	bf00      	nop
 800db9c:	0800ec19 	.word	0x0800ec19
 800dba0:	0800eca1 	.word	0x0800eca1

0800dba4 <__mcmp>:
 800dba4:	690a      	ldr	r2, [r1, #16]
 800dba6:	4603      	mov	r3, r0
 800dba8:	6900      	ldr	r0, [r0, #16]
 800dbaa:	1a80      	subs	r0, r0, r2
 800dbac:	b530      	push	{r4, r5, lr}
 800dbae:	d10e      	bne.n	800dbce <__mcmp+0x2a>
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	3114      	adds	r1, #20
 800dbb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbc4:	4295      	cmp	r5, r2
 800dbc6:	d003      	beq.n	800dbd0 <__mcmp+0x2c>
 800dbc8:	d205      	bcs.n	800dbd6 <__mcmp+0x32>
 800dbca:	f04f 30ff 	mov.w	r0, #4294967295
 800dbce:	bd30      	pop	{r4, r5, pc}
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	d3f3      	bcc.n	800dbbc <__mcmp+0x18>
 800dbd4:	e7fb      	b.n	800dbce <__mcmp+0x2a>
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	e7f9      	b.n	800dbce <__mcmp+0x2a>
	...

0800dbdc <__mdiff>:
 800dbdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	4689      	mov	r9, r1
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	4648      	mov	r0, r9
 800dbe8:	4614      	mov	r4, r2
 800dbea:	f7ff ffdb 	bl	800dba4 <__mcmp>
 800dbee:	1e05      	subs	r5, r0, #0
 800dbf0:	d112      	bne.n	800dc18 <__mdiff+0x3c>
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f7ff fd11 	bl	800d61c <_Balloc>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	b928      	cbnz	r0, 800dc0a <__mdiff+0x2e>
 800dbfe:	4b3f      	ldr	r3, [pc, #252]	@ (800dcfc <__mdiff+0x120>)
 800dc00:	f240 2137 	movw	r1, #567	@ 0x237
 800dc04:	483e      	ldr	r0, [pc, #248]	@ (800dd00 <__mdiff+0x124>)
 800dc06:	f000 fde7 	bl	800e7d8 <__assert_func>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc10:	4610      	mov	r0, r2
 800dc12:	b003      	add	sp, #12
 800dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc18:	bfbc      	itt	lt
 800dc1a:	464b      	movlt	r3, r9
 800dc1c:	46a1      	movlt	r9, r4
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc24:	bfba      	itte	lt
 800dc26:	461c      	movlt	r4, r3
 800dc28:	2501      	movlt	r5, #1
 800dc2a:	2500      	movge	r5, #0
 800dc2c:	f7ff fcf6 	bl	800d61c <_Balloc>
 800dc30:	4602      	mov	r2, r0
 800dc32:	b918      	cbnz	r0, 800dc3c <__mdiff+0x60>
 800dc34:	4b31      	ldr	r3, [pc, #196]	@ (800dcfc <__mdiff+0x120>)
 800dc36:	f240 2145 	movw	r1, #581	@ 0x245
 800dc3a:	e7e3      	b.n	800dc04 <__mdiff+0x28>
 800dc3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc40:	6926      	ldr	r6, [r4, #16]
 800dc42:	60c5      	str	r5, [r0, #12]
 800dc44:	f109 0310 	add.w	r3, r9, #16
 800dc48:	f109 0514 	add.w	r5, r9, #20
 800dc4c:	f104 0e14 	add.w	lr, r4, #20
 800dc50:	f100 0b14 	add.w	fp, r0, #20
 800dc54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	46d9      	mov	r9, fp
 800dc60:	f04f 0c00 	mov.w	ip, #0
 800dc64:	9b01      	ldr	r3, [sp, #4]
 800dc66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	fa1f f38a 	uxth.w	r3, sl
 800dc74:	4619      	mov	r1, r3
 800dc76:	b283      	uxth	r3, r0
 800dc78:	1acb      	subs	r3, r1, r3
 800dc7a:	0c00      	lsrs	r0, r0, #16
 800dc7c:	4463      	add	r3, ip
 800dc7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc8c:	4576      	cmp	r6, lr
 800dc8e:	f849 3b04 	str.w	r3, [r9], #4
 800dc92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc96:	d8e5      	bhi.n	800dc64 <__mdiff+0x88>
 800dc98:	1b33      	subs	r3, r6, r4
 800dc9a:	3b15      	subs	r3, #21
 800dc9c:	f023 0303 	bic.w	r3, r3, #3
 800dca0:	3415      	adds	r4, #21
 800dca2:	3304      	adds	r3, #4
 800dca4:	42a6      	cmp	r6, r4
 800dca6:	bf38      	it	cc
 800dca8:	2304      	movcc	r3, #4
 800dcaa:	441d      	add	r5, r3
 800dcac:	445b      	add	r3, fp
 800dcae:	461e      	mov	r6, r3
 800dcb0:	462c      	mov	r4, r5
 800dcb2:	4544      	cmp	r4, r8
 800dcb4:	d30e      	bcc.n	800dcd4 <__mdiff+0xf8>
 800dcb6:	f108 0103 	add.w	r1, r8, #3
 800dcba:	1b49      	subs	r1, r1, r5
 800dcbc:	f021 0103 	bic.w	r1, r1, #3
 800dcc0:	3d03      	subs	r5, #3
 800dcc2:	45a8      	cmp	r8, r5
 800dcc4:	bf38      	it	cc
 800dcc6:	2100      	movcc	r1, #0
 800dcc8:	440b      	add	r3, r1
 800dcca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcce:	b191      	cbz	r1, 800dcf6 <__mdiff+0x11a>
 800dcd0:	6117      	str	r7, [r2, #16]
 800dcd2:	e79d      	b.n	800dc10 <__mdiff+0x34>
 800dcd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800dcd8:	46e6      	mov	lr, ip
 800dcda:	0c08      	lsrs	r0, r1, #16
 800dcdc:	fa1c fc81 	uxtah	ip, ip, r1
 800dce0:	4471      	add	r1, lr
 800dce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dce6:	b289      	uxth	r1, r1
 800dce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dcec:	f846 1b04 	str.w	r1, [r6], #4
 800dcf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcf4:	e7dd      	b.n	800dcb2 <__mdiff+0xd6>
 800dcf6:	3f01      	subs	r7, #1
 800dcf8:	e7e7      	b.n	800dcca <__mdiff+0xee>
 800dcfa:	bf00      	nop
 800dcfc:	0800ec19 	.word	0x0800ec19
 800dd00:	0800eca1 	.word	0x0800eca1

0800dd04 <__ulp>:
 800dd04:	b082      	sub	sp, #8
 800dd06:	ed8d 0b00 	vstr	d0, [sp]
 800dd0a:	9a01      	ldr	r2, [sp, #4]
 800dd0c:	4b0f      	ldr	r3, [pc, #60]	@ (800dd4c <__ulp+0x48>)
 800dd0e:	4013      	ands	r3, r2
 800dd10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dc08      	bgt.n	800dd2a <__ulp+0x26>
 800dd18:	425b      	negs	r3, r3
 800dd1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dd1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dd22:	da04      	bge.n	800dd2e <__ulp+0x2a>
 800dd24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dd28:	4113      	asrs	r3, r2
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	e008      	b.n	800dd40 <__ulp+0x3c>
 800dd2e:	f1a2 0314 	sub.w	r3, r2, #20
 800dd32:	2b1e      	cmp	r3, #30
 800dd34:	bfda      	itte	le
 800dd36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dd3a:	40da      	lsrle	r2, r3
 800dd3c:	2201      	movgt	r2, #1
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	ec41 0b10 	vmov	d0, r0, r1
 800dd48:	b002      	add	sp, #8
 800dd4a:	4770      	bx	lr
 800dd4c:	7ff00000 	.word	0x7ff00000

0800dd50 <__b2d>:
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	6906      	ldr	r6, [r0, #16]
 800dd56:	f100 0814 	add.w	r8, r0, #20
 800dd5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dd5e:	1f37      	subs	r7, r6, #4
 800dd60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7ff fd4b 	bl	800d800 <__hi0bits>
 800dd6a:	f1c0 0320 	rsb	r3, r0, #32
 800dd6e:	280a      	cmp	r0, #10
 800dd70:	600b      	str	r3, [r1, #0]
 800dd72:	491b      	ldr	r1, [pc, #108]	@ (800dde0 <__b2d+0x90>)
 800dd74:	dc15      	bgt.n	800dda2 <__b2d+0x52>
 800dd76:	f1c0 0c0b 	rsb	ip, r0, #11
 800dd7a:	fa22 f30c 	lsr.w	r3, r2, ip
 800dd7e:	45b8      	cmp	r8, r7
 800dd80:	ea43 0501 	orr.w	r5, r3, r1
 800dd84:	bf34      	ite	cc
 800dd86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd8a:	2300      	movcs	r3, #0
 800dd8c:	3015      	adds	r0, #21
 800dd8e:	fa02 f000 	lsl.w	r0, r2, r0
 800dd92:	fa23 f30c 	lsr.w	r3, r3, ip
 800dd96:	4303      	orrs	r3, r0
 800dd98:	461c      	mov	r4, r3
 800dd9a:	ec45 4b10 	vmov	d0, r4, r5
 800dd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda2:	45b8      	cmp	r8, r7
 800dda4:	bf3a      	itte	cc
 800dda6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ddaa:	f1a6 0708 	subcc.w	r7, r6, #8
 800ddae:	2300      	movcs	r3, #0
 800ddb0:	380b      	subs	r0, #11
 800ddb2:	d012      	beq.n	800ddda <__b2d+0x8a>
 800ddb4:	f1c0 0120 	rsb	r1, r0, #32
 800ddb8:	fa23 f401 	lsr.w	r4, r3, r1
 800ddbc:	4082      	lsls	r2, r0
 800ddbe:	4322      	orrs	r2, r4
 800ddc0:	4547      	cmp	r7, r8
 800ddc2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ddc6:	bf8c      	ite	hi
 800ddc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ddcc:	2200      	movls	r2, #0
 800ddce:	4083      	lsls	r3, r0
 800ddd0:	40ca      	lsrs	r2, r1
 800ddd2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	e7de      	b.n	800dd98 <__b2d+0x48>
 800ddda:	ea42 0501 	orr.w	r5, r2, r1
 800ddde:	e7db      	b.n	800dd98 <__b2d+0x48>
 800dde0:	3ff00000 	.word	0x3ff00000

0800dde4 <__d2b>:
 800dde4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dde8:	460f      	mov	r7, r1
 800ddea:	2101      	movs	r1, #1
 800ddec:	ec59 8b10 	vmov	r8, r9, d0
 800ddf0:	4616      	mov	r6, r2
 800ddf2:	f7ff fc13 	bl	800d61c <_Balloc>
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	b930      	cbnz	r0, 800de08 <__d2b+0x24>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	4b23      	ldr	r3, [pc, #140]	@ (800de8c <__d2b+0xa8>)
 800ddfe:	4824      	ldr	r0, [pc, #144]	@ (800de90 <__d2b+0xac>)
 800de00:	f240 310f 	movw	r1, #783	@ 0x30f
 800de04:	f000 fce8 	bl	800e7d8 <__assert_func>
 800de08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de10:	b10d      	cbz	r5, 800de16 <__d2b+0x32>
 800de12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de16:	9301      	str	r3, [sp, #4]
 800de18:	f1b8 0300 	subs.w	r3, r8, #0
 800de1c:	d023      	beq.n	800de66 <__d2b+0x82>
 800de1e:	4668      	mov	r0, sp
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	f7ff fd0c 	bl	800d83e <__lo0bits>
 800de26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800de2a:	b1d0      	cbz	r0, 800de62 <__d2b+0x7e>
 800de2c:	f1c0 0320 	rsb	r3, r0, #32
 800de30:	fa02 f303 	lsl.w	r3, r2, r3
 800de34:	430b      	orrs	r3, r1
 800de36:	40c2      	lsrs	r2, r0
 800de38:	6163      	str	r3, [r4, #20]
 800de3a:	9201      	str	r2, [sp, #4]
 800de3c:	9b01      	ldr	r3, [sp, #4]
 800de3e:	61a3      	str	r3, [r4, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	bf0c      	ite	eq
 800de44:	2201      	moveq	r2, #1
 800de46:	2202      	movne	r2, #2
 800de48:	6122      	str	r2, [r4, #16]
 800de4a:	b1a5      	cbz	r5, 800de76 <__d2b+0x92>
 800de4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de50:	4405      	add	r5, r0
 800de52:	603d      	str	r5, [r7, #0]
 800de54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800de58:	6030      	str	r0, [r6, #0]
 800de5a:	4620      	mov	r0, r4
 800de5c:	b003      	add	sp, #12
 800de5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de62:	6161      	str	r1, [r4, #20]
 800de64:	e7ea      	b.n	800de3c <__d2b+0x58>
 800de66:	a801      	add	r0, sp, #4
 800de68:	f7ff fce9 	bl	800d83e <__lo0bits>
 800de6c:	9b01      	ldr	r3, [sp, #4]
 800de6e:	6163      	str	r3, [r4, #20]
 800de70:	3020      	adds	r0, #32
 800de72:	2201      	movs	r2, #1
 800de74:	e7e8      	b.n	800de48 <__d2b+0x64>
 800de76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de7e:	6038      	str	r0, [r7, #0]
 800de80:	6918      	ldr	r0, [r3, #16]
 800de82:	f7ff fcbd 	bl	800d800 <__hi0bits>
 800de86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de8a:	e7e5      	b.n	800de58 <__d2b+0x74>
 800de8c:	0800ec19 	.word	0x0800ec19
 800de90:	0800eca1 	.word	0x0800eca1

0800de94 <__ratio>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	b085      	sub	sp, #20
 800de9a:	e9cd 1000 	strd	r1, r0, [sp]
 800de9e:	a902      	add	r1, sp, #8
 800dea0:	f7ff ff56 	bl	800dd50 <__b2d>
 800dea4:	9800      	ldr	r0, [sp, #0]
 800dea6:	a903      	add	r1, sp, #12
 800dea8:	ec55 4b10 	vmov	r4, r5, d0
 800deac:	f7ff ff50 	bl	800dd50 <__b2d>
 800deb0:	9b01      	ldr	r3, [sp, #4]
 800deb2:	6919      	ldr	r1, [r3, #16]
 800deb4:	9b00      	ldr	r3, [sp, #0]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	1ac9      	subs	r1, r1, r3
 800deba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800debe:	1a9b      	subs	r3, r3, r2
 800dec0:	ec5b ab10 	vmov	sl, fp, d0
 800dec4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dec8:	2b00      	cmp	r3, #0
 800deca:	bfce      	itee	gt
 800decc:	462a      	movgt	r2, r5
 800dece:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ded2:	465a      	movle	r2, fp
 800ded4:	462f      	mov	r7, r5
 800ded6:	46d9      	mov	r9, fp
 800ded8:	bfcc      	ite	gt
 800deda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dede:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dee2:	464b      	mov	r3, r9
 800dee4:	4652      	mov	r2, sl
 800dee6:	4620      	mov	r0, r4
 800dee8:	4639      	mov	r1, r7
 800deea:	f7f2 fca7 	bl	800083c <__aeabi_ddiv>
 800deee:	ec41 0b10 	vmov	d0, r0, r1
 800def2:	b005      	add	sp, #20
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800def8 <__copybits>:
 800def8:	3901      	subs	r1, #1
 800defa:	b570      	push	{r4, r5, r6, lr}
 800defc:	1149      	asrs	r1, r1, #5
 800defe:	6914      	ldr	r4, [r2, #16]
 800df00:	3101      	adds	r1, #1
 800df02:	f102 0314 	add.w	r3, r2, #20
 800df06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df0e:	1f05      	subs	r5, r0, #4
 800df10:	42a3      	cmp	r3, r4
 800df12:	d30c      	bcc.n	800df2e <__copybits+0x36>
 800df14:	1aa3      	subs	r3, r4, r2
 800df16:	3b11      	subs	r3, #17
 800df18:	f023 0303 	bic.w	r3, r3, #3
 800df1c:	3211      	adds	r2, #17
 800df1e:	42a2      	cmp	r2, r4
 800df20:	bf88      	it	hi
 800df22:	2300      	movhi	r3, #0
 800df24:	4418      	add	r0, r3
 800df26:	2300      	movs	r3, #0
 800df28:	4288      	cmp	r0, r1
 800df2a:	d305      	bcc.n	800df38 <__copybits+0x40>
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	f853 6b04 	ldr.w	r6, [r3], #4
 800df32:	f845 6f04 	str.w	r6, [r5, #4]!
 800df36:	e7eb      	b.n	800df10 <__copybits+0x18>
 800df38:	f840 3b04 	str.w	r3, [r0], #4
 800df3c:	e7f4      	b.n	800df28 <__copybits+0x30>

0800df3e <__any_on>:
 800df3e:	f100 0214 	add.w	r2, r0, #20
 800df42:	6900      	ldr	r0, [r0, #16]
 800df44:	114b      	asrs	r3, r1, #5
 800df46:	4298      	cmp	r0, r3
 800df48:	b510      	push	{r4, lr}
 800df4a:	db11      	blt.n	800df70 <__any_on+0x32>
 800df4c:	dd0a      	ble.n	800df64 <__any_on+0x26>
 800df4e:	f011 011f 	ands.w	r1, r1, #31
 800df52:	d007      	beq.n	800df64 <__any_on+0x26>
 800df54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df58:	fa24 f001 	lsr.w	r0, r4, r1
 800df5c:	fa00 f101 	lsl.w	r1, r0, r1
 800df60:	428c      	cmp	r4, r1
 800df62:	d10b      	bne.n	800df7c <__any_on+0x3e>
 800df64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df68:	4293      	cmp	r3, r2
 800df6a:	d803      	bhi.n	800df74 <__any_on+0x36>
 800df6c:	2000      	movs	r0, #0
 800df6e:	bd10      	pop	{r4, pc}
 800df70:	4603      	mov	r3, r0
 800df72:	e7f7      	b.n	800df64 <__any_on+0x26>
 800df74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df78:	2900      	cmp	r1, #0
 800df7a:	d0f5      	beq.n	800df68 <__any_on+0x2a>
 800df7c:	2001      	movs	r0, #1
 800df7e:	e7f6      	b.n	800df6e <__any_on+0x30>

0800df80 <__ascii_wctomb>:
 800df80:	4603      	mov	r3, r0
 800df82:	4608      	mov	r0, r1
 800df84:	b141      	cbz	r1, 800df98 <__ascii_wctomb+0x18>
 800df86:	2aff      	cmp	r2, #255	@ 0xff
 800df88:	d904      	bls.n	800df94 <__ascii_wctomb+0x14>
 800df8a:	228a      	movs	r2, #138	@ 0x8a
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	f04f 30ff 	mov.w	r0, #4294967295
 800df92:	4770      	bx	lr
 800df94:	700a      	strb	r2, [r1, #0]
 800df96:	2001      	movs	r0, #1
 800df98:	4770      	bx	lr

0800df9a <__sfputc_r>:
 800df9a:	6893      	ldr	r3, [r2, #8]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	b410      	push	{r4}
 800dfa2:	6093      	str	r3, [r2, #8]
 800dfa4:	da08      	bge.n	800dfb8 <__sfputc_r+0x1e>
 800dfa6:	6994      	ldr	r4, [r2, #24]
 800dfa8:	42a3      	cmp	r3, r4
 800dfaa:	db01      	blt.n	800dfb0 <__sfputc_r+0x16>
 800dfac:	290a      	cmp	r1, #10
 800dfae:	d103      	bne.n	800dfb8 <__sfputc_r+0x1e>
 800dfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfb4:	f000 bb6c 	b.w	800e690 <__swbuf_r>
 800dfb8:	6813      	ldr	r3, [r2, #0]
 800dfba:	1c58      	adds	r0, r3, #1
 800dfbc:	6010      	str	r0, [r2, #0]
 800dfbe:	7019      	strb	r1, [r3, #0]
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <__sfputs_r>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460f      	mov	r7, r1
 800dfce:	4614      	mov	r4, r2
 800dfd0:	18d5      	adds	r5, r2, r3
 800dfd2:	42ac      	cmp	r4, r5
 800dfd4:	d101      	bne.n	800dfda <__sfputs_r+0x12>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e007      	b.n	800dfea <__sfputs_r+0x22>
 800dfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfde:	463a      	mov	r2, r7
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7ff ffda 	bl	800df9a <__sfputc_r>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d1f3      	bne.n	800dfd2 <__sfputs_r+0xa>
 800dfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfec <_vfiprintf_r>:
 800dfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff0:	460d      	mov	r5, r1
 800dff2:	b09d      	sub	sp, #116	@ 0x74
 800dff4:	4614      	mov	r4, r2
 800dff6:	4698      	mov	r8, r3
 800dff8:	4606      	mov	r6, r0
 800dffa:	b118      	cbz	r0, 800e004 <_vfiprintf_r+0x18>
 800dffc:	6a03      	ldr	r3, [r0, #32]
 800dffe:	b90b      	cbnz	r3, 800e004 <_vfiprintf_r+0x18>
 800e000:	f7fe fd92 	bl	800cb28 <__sinit>
 800e004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e006:	07d9      	lsls	r1, r3, #31
 800e008:	d405      	bmi.n	800e016 <_vfiprintf_r+0x2a>
 800e00a:	89ab      	ldrh	r3, [r5, #12]
 800e00c:	059a      	lsls	r2, r3, #22
 800e00e:	d402      	bmi.n	800e016 <_vfiprintf_r+0x2a>
 800e010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e012:	f7fe fea0 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	071b      	lsls	r3, r3, #28
 800e01a:	d501      	bpl.n	800e020 <_vfiprintf_r+0x34>
 800e01c:	692b      	ldr	r3, [r5, #16]
 800e01e:	b99b      	cbnz	r3, 800e048 <_vfiprintf_r+0x5c>
 800e020:	4629      	mov	r1, r5
 800e022:	4630      	mov	r0, r6
 800e024:	f000 fb72 	bl	800e70c <__swsetup_r>
 800e028:	b170      	cbz	r0, 800e048 <_vfiprintf_r+0x5c>
 800e02a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e02c:	07dc      	lsls	r4, r3, #31
 800e02e:	d504      	bpl.n	800e03a <_vfiprintf_r+0x4e>
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
 800e034:	b01d      	add	sp, #116	@ 0x74
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	89ab      	ldrh	r3, [r5, #12]
 800e03c:	0598      	lsls	r0, r3, #22
 800e03e:	d4f7      	bmi.n	800e030 <_vfiprintf_r+0x44>
 800e040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e042:	f7fe fe89 	bl	800cd58 <__retarget_lock_release_recursive>
 800e046:	e7f3      	b.n	800e030 <_vfiprintf_r+0x44>
 800e048:	2300      	movs	r3, #0
 800e04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04c:	2320      	movs	r3, #32
 800e04e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e052:	f8cd 800c 	str.w	r8, [sp, #12]
 800e056:	2330      	movs	r3, #48	@ 0x30
 800e058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e208 <_vfiprintf_r+0x21c>
 800e05c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e060:	f04f 0901 	mov.w	r9, #1
 800e064:	4623      	mov	r3, r4
 800e066:	469a      	mov	sl, r3
 800e068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e06c:	b10a      	cbz	r2, 800e072 <_vfiprintf_r+0x86>
 800e06e:	2a25      	cmp	r2, #37	@ 0x25
 800e070:	d1f9      	bne.n	800e066 <_vfiprintf_r+0x7a>
 800e072:	ebba 0b04 	subs.w	fp, sl, r4
 800e076:	d00b      	beq.n	800e090 <_vfiprintf_r+0xa4>
 800e078:	465b      	mov	r3, fp
 800e07a:	4622      	mov	r2, r4
 800e07c:	4629      	mov	r1, r5
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff ffa2 	bl	800dfc8 <__sfputs_r>
 800e084:	3001      	adds	r0, #1
 800e086:	f000 80a7 	beq.w	800e1d8 <_vfiprintf_r+0x1ec>
 800e08a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e08c:	445a      	add	r2, fp
 800e08e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e090:	f89a 3000 	ldrb.w	r3, [sl]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 809f 	beq.w	800e1d8 <_vfiprintf_r+0x1ec>
 800e09a:	2300      	movs	r3, #0
 800e09c:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0a4:	f10a 0a01 	add.w	sl, sl, #1
 800e0a8:	9304      	str	r3, [sp, #16]
 800e0aa:	9307      	str	r3, [sp, #28]
 800e0ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0b2:	4654      	mov	r4, sl
 800e0b4:	2205      	movs	r2, #5
 800e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ba:	4853      	ldr	r0, [pc, #332]	@ (800e208 <_vfiprintf_r+0x21c>)
 800e0bc:	f7f2 f888 	bl	80001d0 <memchr>
 800e0c0:	9a04      	ldr	r2, [sp, #16]
 800e0c2:	b9d8      	cbnz	r0, 800e0fc <_vfiprintf_r+0x110>
 800e0c4:	06d1      	lsls	r1, r2, #27
 800e0c6:	bf44      	itt	mi
 800e0c8:	2320      	movmi	r3, #32
 800e0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0ce:	0713      	lsls	r3, r2, #28
 800e0d0:	bf44      	itt	mi
 800e0d2:	232b      	movmi	r3, #43	@ 0x2b
 800e0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0de:	d015      	beq.n	800e10c <_vfiprintf_r+0x120>
 800e0e0:	9a07      	ldr	r2, [sp, #28]
 800e0e2:	4654      	mov	r4, sl
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	f04f 0c0a 	mov.w	ip, #10
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0f0:	3b30      	subs	r3, #48	@ 0x30
 800e0f2:	2b09      	cmp	r3, #9
 800e0f4:	d94b      	bls.n	800e18e <_vfiprintf_r+0x1a2>
 800e0f6:	b1b0      	cbz	r0, 800e126 <_vfiprintf_r+0x13a>
 800e0f8:	9207      	str	r2, [sp, #28]
 800e0fa:	e014      	b.n	800e126 <_vfiprintf_r+0x13a>
 800e0fc:	eba0 0308 	sub.w	r3, r0, r8
 800e100:	fa09 f303 	lsl.w	r3, r9, r3
 800e104:	4313      	orrs	r3, r2
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	46a2      	mov	sl, r4
 800e10a:	e7d2      	b.n	800e0b2 <_vfiprintf_r+0xc6>
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	1d19      	adds	r1, r3, #4
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	9103      	str	r1, [sp, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfbb      	ittet	lt
 800e118:	425b      	neglt	r3, r3
 800e11a:	f042 0202 	orrlt.w	r2, r2, #2
 800e11e:	9307      	strge	r3, [sp, #28]
 800e120:	9307      	strlt	r3, [sp, #28]
 800e122:	bfb8      	it	lt
 800e124:	9204      	strlt	r2, [sp, #16]
 800e126:	7823      	ldrb	r3, [r4, #0]
 800e128:	2b2e      	cmp	r3, #46	@ 0x2e
 800e12a:	d10a      	bne.n	800e142 <_vfiprintf_r+0x156>
 800e12c:	7863      	ldrb	r3, [r4, #1]
 800e12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e130:	d132      	bne.n	800e198 <_vfiprintf_r+0x1ac>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	1d1a      	adds	r2, r3, #4
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	9203      	str	r2, [sp, #12]
 800e13a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e13e:	3402      	adds	r4, #2
 800e140:	9305      	str	r3, [sp, #20]
 800e142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e218 <_vfiprintf_r+0x22c>
 800e146:	7821      	ldrb	r1, [r4, #0]
 800e148:	2203      	movs	r2, #3
 800e14a:	4650      	mov	r0, sl
 800e14c:	f7f2 f840 	bl	80001d0 <memchr>
 800e150:	b138      	cbz	r0, 800e162 <_vfiprintf_r+0x176>
 800e152:	9b04      	ldr	r3, [sp, #16]
 800e154:	eba0 000a 	sub.w	r0, r0, sl
 800e158:	2240      	movs	r2, #64	@ 0x40
 800e15a:	4082      	lsls	r2, r0
 800e15c:	4313      	orrs	r3, r2
 800e15e:	3401      	adds	r4, #1
 800e160:	9304      	str	r3, [sp, #16]
 800e162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e166:	4829      	ldr	r0, [pc, #164]	@ (800e20c <_vfiprintf_r+0x220>)
 800e168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e16c:	2206      	movs	r2, #6
 800e16e:	f7f2 f82f 	bl	80001d0 <memchr>
 800e172:	2800      	cmp	r0, #0
 800e174:	d03f      	beq.n	800e1f6 <_vfiprintf_r+0x20a>
 800e176:	4b26      	ldr	r3, [pc, #152]	@ (800e210 <_vfiprintf_r+0x224>)
 800e178:	bb1b      	cbnz	r3, 800e1c2 <_vfiprintf_r+0x1d6>
 800e17a:	9b03      	ldr	r3, [sp, #12]
 800e17c:	3307      	adds	r3, #7
 800e17e:	f023 0307 	bic.w	r3, r3, #7
 800e182:	3308      	adds	r3, #8
 800e184:	9303      	str	r3, [sp, #12]
 800e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e188:	443b      	add	r3, r7
 800e18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e18c:	e76a      	b.n	800e064 <_vfiprintf_r+0x78>
 800e18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e192:	460c      	mov	r4, r1
 800e194:	2001      	movs	r0, #1
 800e196:	e7a8      	b.n	800e0ea <_vfiprintf_r+0xfe>
 800e198:	2300      	movs	r3, #0
 800e19a:	3401      	adds	r4, #1
 800e19c:	9305      	str	r3, [sp, #20]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	f04f 0c0a 	mov.w	ip, #10
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1aa:	3a30      	subs	r2, #48	@ 0x30
 800e1ac:	2a09      	cmp	r2, #9
 800e1ae:	d903      	bls.n	800e1b8 <_vfiprintf_r+0x1cc>
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d0c6      	beq.n	800e142 <_vfiprintf_r+0x156>
 800e1b4:	9105      	str	r1, [sp, #20]
 800e1b6:	e7c4      	b.n	800e142 <_vfiprintf_r+0x156>
 800e1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1bc:	4604      	mov	r4, r0
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e7f0      	b.n	800e1a4 <_vfiprintf_r+0x1b8>
 800e1c2:	ab03      	add	r3, sp, #12
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	4b12      	ldr	r3, [pc, #72]	@ (800e214 <_vfiprintf_r+0x228>)
 800e1ca:	a904      	add	r1, sp, #16
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f3af 8000 	nop.w
 800e1d2:	4607      	mov	r7, r0
 800e1d4:	1c78      	adds	r0, r7, #1
 800e1d6:	d1d6      	bne.n	800e186 <_vfiprintf_r+0x19a>
 800e1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1da:	07d9      	lsls	r1, r3, #31
 800e1dc:	d405      	bmi.n	800e1ea <_vfiprintf_r+0x1fe>
 800e1de:	89ab      	ldrh	r3, [r5, #12]
 800e1e0:	059a      	lsls	r2, r3, #22
 800e1e2:	d402      	bmi.n	800e1ea <_vfiprintf_r+0x1fe>
 800e1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1e6:	f7fe fdb7 	bl	800cd58 <__retarget_lock_release_recursive>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	065b      	lsls	r3, r3, #25
 800e1ee:	f53f af1f 	bmi.w	800e030 <_vfiprintf_r+0x44>
 800e1f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1f4:	e71e      	b.n	800e034 <_vfiprintf_r+0x48>
 800e1f6:	ab03      	add	r3, sp, #12
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	462a      	mov	r2, r5
 800e1fc:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <_vfiprintf_r+0x228>)
 800e1fe:	a904      	add	r1, sp, #16
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f879 	bl	800e2f8 <_printf_i>
 800e206:	e7e4      	b.n	800e1d2 <_vfiprintf_r+0x1e6>
 800e208:	0800edf8 	.word	0x0800edf8
 800e20c:	0800ee02 	.word	0x0800ee02
 800e210:	00000000 	.word	0x00000000
 800e214:	0800dfc9 	.word	0x0800dfc9
 800e218:	0800edfe 	.word	0x0800edfe

0800e21c <_printf_common>:
 800e21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e220:	4616      	mov	r6, r2
 800e222:	4698      	mov	r8, r3
 800e224:	688a      	ldr	r2, [r1, #8]
 800e226:	690b      	ldr	r3, [r1, #16]
 800e228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e22c:	4293      	cmp	r3, r2
 800e22e:	bfb8      	it	lt
 800e230:	4613      	movlt	r3, r2
 800e232:	6033      	str	r3, [r6, #0]
 800e234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e238:	4607      	mov	r7, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	b10a      	cbz	r2, 800e242 <_printf_common+0x26>
 800e23e:	3301      	adds	r3, #1
 800e240:	6033      	str	r3, [r6, #0]
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	0699      	lsls	r1, r3, #26
 800e246:	bf42      	ittt	mi
 800e248:	6833      	ldrmi	r3, [r6, #0]
 800e24a:	3302      	addmi	r3, #2
 800e24c:	6033      	strmi	r3, [r6, #0]
 800e24e:	6825      	ldr	r5, [r4, #0]
 800e250:	f015 0506 	ands.w	r5, r5, #6
 800e254:	d106      	bne.n	800e264 <_printf_common+0x48>
 800e256:	f104 0a19 	add.w	sl, r4, #25
 800e25a:	68e3      	ldr	r3, [r4, #12]
 800e25c:	6832      	ldr	r2, [r6, #0]
 800e25e:	1a9b      	subs	r3, r3, r2
 800e260:	42ab      	cmp	r3, r5
 800e262:	dc26      	bgt.n	800e2b2 <_printf_common+0x96>
 800e264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e268:	6822      	ldr	r2, [r4, #0]
 800e26a:	3b00      	subs	r3, #0
 800e26c:	bf18      	it	ne
 800e26e:	2301      	movne	r3, #1
 800e270:	0692      	lsls	r2, r2, #26
 800e272:	d42b      	bmi.n	800e2cc <_printf_common+0xb0>
 800e274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e278:	4641      	mov	r1, r8
 800e27a:	4638      	mov	r0, r7
 800e27c:	47c8      	blx	r9
 800e27e:	3001      	adds	r0, #1
 800e280:	d01e      	beq.n	800e2c0 <_printf_common+0xa4>
 800e282:	6823      	ldr	r3, [r4, #0]
 800e284:	6922      	ldr	r2, [r4, #16]
 800e286:	f003 0306 	and.w	r3, r3, #6
 800e28a:	2b04      	cmp	r3, #4
 800e28c:	bf02      	ittt	eq
 800e28e:	68e5      	ldreq	r5, [r4, #12]
 800e290:	6833      	ldreq	r3, [r6, #0]
 800e292:	1aed      	subeq	r5, r5, r3
 800e294:	68a3      	ldr	r3, [r4, #8]
 800e296:	bf0c      	ite	eq
 800e298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e29c:	2500      	movne	r5, #0
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	bfc4      	itt	gt
 800e2a2:	1a9b      	subgt	r3, r3, r2
 800e2a4:	18ed      	addgt	r5, r5, r3
 800e2a6:	2600      	movs	r6, #0
 800e2a8:	341a      	adds	r4, #26
 800e2aa:	42b5      	cmp	r5, r6
 800e2ac:	d11a      	bne.n	800e2e4 <_printf_common+0xc8>
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	e008      	b.n	800e2c4 <_printf_common+0xa8>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	4641      	mov	r1, r8
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	47c8      	blx	r9
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d103      	bne.n	800e2c8 <_printf_common+0xac>
 800e2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	e7c6      	b.n	800e25a <_printf_common+0x3e>
 800e2cc:	18e1      	adds	r1, r4, r3
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	2030      	movs	r0, #48	@ 0x30
 800e2d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2d6:	4422      	add	r2, r4
 800e2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2e0:	3302      	adds	r3, #2
 800e2e2:	e7c7      	b.n	800e274 <_printf_common+0x58>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	4641      	mov	r1, r8
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	47c8      	blx	r9
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	d0e6      	beq.n	800e2c0 <_printf_common+0xa4>
 800e2f2:	3601      	adds	r6, #1
 800e2f4:	e7d9      	b.n	800e2aa <_printf_common+0x8e>
	...

0800e2f8 <_printf_i>:
 800e2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fc:	7e0f      	ldrb	r7, [r1, #24]
 800e2fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e300:	2f78      	cmp	r7, #120	@ 0x78
 800e302:	4691      	mov	r9, r2
 800e304:	4680      	mov	r8, r0
 800e306:	460c      	mov	r4, r1
 800e308:	469a      	mov	sl, r3
 800e30a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e30e:	d807      	bhi.n	800e320 <_printf_i+0x28>
 800e310:	2f62      	cmp	r7, #98	@ 0x62
 800e312:	d80a      	bhi.n	800e32a <_printf_i+0x32>
 800e314:	2f00      	cmp	r7, #0
 800e316:	f000 80d2 	beq.w	800e4be <_printf_i+0x1c6>
 800e31a:	2f58      	cmp	r7, #88	@ 0x58
 800e31c:	f000 80b9 	beq.w	800e492 <_printf_i+0x19a>
 800e320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e328:	e03a      	b.n	800e3a0 <_printf_i+0xa8>
 800e32a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e32e:	2b15      	cmp	r3, #21
 800e330:	d8f6      	bhi.n	800e320 <_printf_i+0x28>
 800e332:	a101      	add	r1, pc, #4	@ (adr r1, 800e338 <_printf_i+0x40>)
 800e334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e338:	0800e391 	.word	0x0800e391
 800e33c:	0800e3a5 	.word	0x0800e3a5
 800e340:	0800e321 	.word	0x0800e321
 800e344:	0800e321 	.word	0x0800e321
 800e348:	0800e321 	.word	0x0800e321
 800e34c:	0800e321 	.word	0x0800e321
 800e350:	0800e3a5 	.word	0x0800e3a5
 800e354:	0800e321 	.word	0x0800e321
 800e358:	0800e321 	.word	0x0800e321
 800e35c:	0800e321 	.word	0x0800e321
 800e360:	0800e321 	.word	0x0800e321
 800e364:	0800e4a5 	.word	0x0800e4a5
 800e368:	0800e3cf 	.word	0x0800e3cf
 800e36c:	0800e45f 	.word	0x0800e45f
 800e370:	0800e321 	.word	0x0800e321
 800e374:	0800e321 	.word	0x0800e321
 800e378:	0800e4c7 	.word	0x0800e4c7
 800e37c:	0800e321 	.word	0x0800e321
 800e380:	0800e3cf 	.word	0x0800e3cf
 800e384:	0800e321 	.word	0x0800e321
 800e388:	0800e321 	.word	0x0800e321
 800e38c:	0800e467 	.word	0x0800e467
 800e390:	6833      	ldr	r3, [r6, #0]
 800e392:	1d1a      	adds	r2, r3, #4
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6032      	str	r2, [r6, #0]
 800e398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e39c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e09d      	b.n	800e4e0 <_printf_i+0x1e8>
 800e3a4:	6833      	ldr	r3, [r6, #0]
 800e3a6:	6820      	ldr	r0, [r4, #0]
 800e3a8:	1d19      	adds	r1, r3, #4
 800e3aa:	6031      	str	r1, [r6, #0]
 800e3ac:	0606      	lsls	r6, r0, #24
 800e3ae:	d501      	bpl.n	800e3b4 <_printf_i+0xbc>
 800e3b0:	681d      	ldr	r5, [r3, #0]
 800e3b2:	e003      	b.n	800e3bc <_printf_i+0xc4>
 800e3b4:	0645      	lsls	r5, r0, #25
 800e3b6:	d5fb      	bpl.n	800e3b0 <_printf_i+0xb8>
 800e3b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	da03      	bge.n	800e3c8 <_printf_i+0xd0>
 800e3c0:	232d      	movs	r3, #45	@ 0x2d
 800e3c2:	426d      	negs	r5, r5
 800e3c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3c8:	4859      	ldr	r0, [pc, #356]	@ (800e530 <_printf_i+0x238>)
 800e3ca:	230a      	movs	r3, #10
 800e3cc:	e011      	b.n	800e3f2 <_printf_i+0xfa>
 800e3ce:	6821      	ldr	r1, [r4, #0]
 800e3d0:	6833      	ldr	r3, [r6, #0]
 800e3d2:	0608      	lsls	r0, r1, #24
 800e3d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3d8:	d402      	bmi.n	800e3e0 <_printf_i+0xe8>
 800e3da:	0649      	lsls	r1, r1, #25
 800e3dc:	bf48      	it	mi
 800e3de:	b2ad      	uxthmi	r5, r5
 800e3e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3e2:	4853      	ldr	r0, [pc, #332]	@ (800e530 <_printf_i+0x238>)
 800e3e4:	6033      	str	r3, [r6, #0]
 800e3e6:	bf14      	ite	ne
 800e3e8:	230a      	movne	r3, #10
 800e3ea:	2308      	moveq	r3, #8
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3f2:	6866      	ldr	r6, [r4, #4]
 800e3f4:	60a6      	str	r6, [r4, #8]
 800e3f6:	2e00      	cmp	r6, #0
 800e3f8:	bfa2      	ittt	ge
 800e3fa:	6821      	ldrge	r1, [r4, #0]
 800e3fc:	f021 0104 	bicge.w	r1, r1, #4
 800e400:	6021      	strge	r1, [r4, #0]
 800e402:	b90d      	cbnz	r5, 800e408 <_printf_i+0x110>
 800e404:	2e00      	cmp	r6, #0
 800e406:	d04b      	beq.n	800e4a0 <_printf_i+0x1a8>
 800e408:	4616      	mov	r6, r2
 800e40a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e40e:	fb03 5711 	mls	r7, r3, r1, r5
 800e412:	5dc7      	ldrb	r7, [r0, r7]
 800e414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e418:	462f      	mov	r7, r5
 800e41a:	42bb      	cmp	r3, r7
 800e41c:	460d      	mov	r5, r1
 800e41e:	d9f4      	bls.n	800e40a <_printf_i+0x112>
 800e420:	2b08      	cmp	r3, #8
 800e422:	d10b      	bne.n	800e43c <_printf_i+0x144>
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	07df      	lsls	r7, r3, #31
 800e428:	d508      	bpl.n	800e43c <_printf_i+0x144>
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	6861      	ldr	r1, [r4, #4]
 800e42e:	4299      	cmp	r1, r3
 800e430:	bfde      	ittt	le
 800e432:	2330      	movle	r3, #48	@ 0x30
 800e434:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e43c:	1b92      	subs	r2, r2, r6
 800e43e:	6122      	str	r2, [r4, #16]
 800e440:	f8cd a000 	str.w	sl, [sp]
 800e444:	464b      	mov	r3, r9
 800e446:	aa03      	add	r2, sp, #12
 800e448:	4621      	mov	r1, r4
 800e44a:	4640      	mov	r0, r8
 800e44c:	f7ff fee6 	bl	800e21c <_printf_common>
 800e450:	3001      	adds	r0, #1
 800e452:	d14a      	bne.n	800e4ea <_printf_i+0x1f2>
 800e454:	f04f 30ff 	mov.w	r0, #4294967295
 800e458:	b004      	add	sp, #16
 800e45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	f043 0320 	orr.w	r3, r3, #32
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	4833      	ldr	r0, [pc, #204]	@ (800e534 <_printf_i+0x23c>)
 800e468:	2778      	movs	r7, #120	@ 0x78
 800e46a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e46e:	6823      	ldr	r3, [r4, #0]
 800e470:	6831      	ldr	r1, [r6, #0]
 800e472:	061f      	lsls	r7, r3, #24
 800e474:	f851 5b04 	ldr.w	r5, [r1], #4
 800e478:	d402      	bmi.n	800e480 <_printf_i+0x188>
 800e47a:	065f      	lsls	r7, r3, #25
 800e47c:	bf48      	it	mi
 800e47e:	b2ad      	uxthmi	r5, r5
 800e480:	6031      	str	r1, [r6, #0]
 800e482:	07d9      	lsls	r1, r3, #31
 800e484:	bf44      	itt	mi
 800e486:	f043 0320 	orrmi.w	r3, r3, #32
 800e48a:	6023      	strmi	r3, [r4, #0]
 800e48c:	b11d      	cbz	r5, 800e496 <_printf_i+0x19e>
 800e48e:	2310      	movs	r3, #16
 800e490:	e7ac      	b.n	800e3ec <_printf_i+0xf4>
 800e492:	4827      	ldr	r0, [pc, #156]	@ (800e530 <_printf_i+0x238>)
 800e494:	e7e9      	b.n	800e46a <_printf_i+0x172>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	f023 0320 	bic.w	r3, r3, #32
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	e7f6      	b.n	800e48e <_printf_i+0x196>
 800e4a0:	4616      	mov	r6, r2
 800e4a2:	e7bd      	b.n	800e420 <_printf_i+0x128>
 800e4a4:	6833      	ldr	r3, [r6, #0]
 800e4a6:	6825      	ldr	r5, [r4, #0]
 800e4a8:	6961      	ldr	r1, [r4, #20]
 800e4aa:	1d18      	adds	r0, r3, #4
 800e4ac:	6030      	str	r0, [r6, #0]
 800e4ae:	062e      	lsls	r6, r5, #24
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	d501      	bpl.n	800e4b8 <_printf_i+0x1c0>
 800e4b4:	6019      	str	r1, [r3, #0]
 800e4b6:	e002      	b.n	800e4be <_printf_i+0x1c6>
 800e4b8:	0668      	lsls	r0, r5, #25
 800e4ba:	d5fb      	bpl.n	800e4b4 <_printf_i+0x1bc>
 800e4bc:	8019      	strh	r1, [r3, #0]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	6123      	str	r3, [r4, #16]
 800e4c2:	4616      	mov	r6, r2
 800e4c4:	e7bc      	b.n	800e440 <_printf_i+0x148>
 800e4c6:	6833      	ldr	r3, [r6, #0]
 800e4c8:	1d1a      	adds	r2, r3, #4
 800e4ca:	6032      	str	r2, [r6, #0]
 800e4cc:	681e      	ldr	r6, [r3, #0]
 800e4ce:	6862      	ldr	r2, [r4, #4]
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7f1 fe7c 	bl	80001d0 <memchr>
 800e4d8:	b108      	cbz	r0, 800e4de <_printf_i+0x1e6>
 800e4da:	1b80      	subs	r0, r0, r6
 800e4dc:	6060      	str	r0, [r4, #4]
 800e4de:	6863      	ldr	r3, [r4, #4]
 800e4e0:	6123      	str	r3, [r4, #16]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4e8:	e7aa      	b.n	800e440 <_printf_i+0x148>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	4640      	mov	r0, r8
 800e4f2:	47d0      	blx	sl
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d0ad      	beq.n	800e454 <_printf_i+0x15c>
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	079b      	lsls	r3, r3, #30
 800e4fc:	d413      	bmi.n	800e526 <_printf_i+0x22e>
 800e4fe:	68e0      	ldr	r0, [r4, #12]
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	4298      	cmp	r0, r3
 800e504:	bfb8      	it	lt
 800e506:	4618      	movlt	r0, r3
 800e508:	e7a6      	b.n	800e458 <_printf_i+0x160>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4632      	mov	r2, r6
 800e50e:	4649      	mov	r1, r9
 800e510:	4640      	mov	r0, r8
 800e512:	47d0      	blx	sl
 800e514:	3001      	adds	r0, #1
 800e516:	d09d      	beq.n	800e454 <_printf_i+0x15c>
 800e518:	3501      	adds	r5, #1
 800e51a:	68e3      	ldr	r3, [r4, #12]
 800e51c:	9903      	ldr	r1, [sp, #12]
 800e51e:	1a5b      	subs	r3, r3, r1
 800e520:	42ab      	cmp	r3, r5
 800e522:	dcf2      	bgt.n	800e50a <_printf_i+0x212>
 800e524:	e7eb      	b.n	800e4fe <_printf_i+0x206>
 800e526:	2500      	movs	r5, #0
 800e528:	f104 0619 	add.w	r6, r4, #25
 800e52c:	e7f5      	b.n	800e51a <_printf_i+0x222>
 800e52e:	bf00      	nop
 800e530:	0800ee09 	.word	0x0800ee09
 800e534:	0800ee1a 	.word	0x0800ee1a

0800e538 <__sflush_r>:
 800e538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e540:	0716      	lsls	r6, r2, #28
 800e542:	4605      	mov	r5, r0
 800e544:	460c      	mov	r4, r1
 800e546:	d454      	bmi.n	800e5f2 <__sflush_r+0xba>
 800e548:	684b      	ldr	r3, [r1, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	dc02      	bgt.n	800e554 <__sflush_r+0x1c>
 800e54e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e550:	2b00      	cmp	r3, #0
 800e552:	dd48      	ble.n	800e5e6 <__sflush_r+0xae>
 800e554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e556:	2e00      	cmp	r6, #0
 800e558:	d045      	beq.n	800e5e6 <__sflush_r+0xae>
 800e55a:	2300      	movs	r3, #0
 800e55c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e560:	682f      	ldr	r7, [r5, #0]
 800e562:	6a21      	ldr	r1, [r4, #32]
 800e564:	602b      	str	r3, [r5, #0]
 800e566:	d030      	beq.n	800e5ca <__sflush_r+0x92>
 800e568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e56a:	89a3      	ldrh	r3, [r4, #12]
 800e56c:	0759      	lsls	r1, r3, #29
 800e56e:	d505      	bpl.n	800e57c <__sflush_r+0x44>
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	1ad2      	subs	r2, r2, r3
 800e574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e576:	b10b      	cbz	r3, 800e57c <__sflush_r+0x44>
 800e578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e57a:	1ad2      	subs	r2, r2, r3
 800e57c:	2300      	movs	r3, #0
 800e57e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e580:	6a21      	ldr	r1, [r4, #32]
 800e582:	4628      	mov	r0, r5
 800e584:	47b0      	blx	r6
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	d106      	bne.n	800e59a <__sflush_r+0x62>
 800e58c:	6829      	ldr	r1, [r5, #0]
 800e58e:	291d      	cmp	r1, #29
 800e590:	d82b      	bhi.n	800e5ea <__sflush_r+0xb2>
 800e592:	4a2a      	ldr	r2, [pc, #168]	@ (800e63c <__sflush_r+0x104>)
 800e594:	410a      	asrs	r2, r1
 800e596:	07d6      	lsls	r6, r2, #31
 800e598:	d427      	bmi.n	800e5ea <__sflush_r+0xb2>
 800e59a:	2200      	movs	r2, #0
 800e59c:	6062      	str	r2, [r4, #4]
 800e59e:	04d9      	lsls	r1, r3, #19
 800e5a0:	6922      	ldr	r2, [r4, #16]
 800e5a2:	6022      	str	r2, [r4, #0]
 800e5a4:	d504      	bpl.n	800e5b0 <__sflush_r+0x78>
 800e5a6:	1c42      	adds	r2, r0, #1
 800e5a8:	d101      	bne.n	800e5ae <__sflush_r+0x76>
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	b903      	cbnz	r3, 800e5b0 <__sflush_r+0x78>
 800e5ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5b2:	602f      	str	r7, [r5, #0]
 800e5b4:	b1b9      	cbz	r1, 800e5e6 <__sflush_r+0xae>
 800e5b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5ba:	4299      	cmp	r1, r3
 800e5bc:	d002      	beq.n	800e5c4 <__sflush_r+0x8c>
 800e5be:	4628      	mov	r0, r5
 800e5c0:	f7fe fbe8 	bl	800cd94 <_free_r>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5c8:	e00d      	b.n	800e5e6 <__sflush_r+0xae>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	47b0      	blx	r6
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	1c50      	adds	r0, r2, #1
 800e5d4:	d1c9      	bne.n	800e56a <__sflush_r+0x32>
 800e5d6:	682b      	ldr	r3, [r5, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d0c6      	beq.n	800e56a <__sflush_r+0x32>
 800e5dc:	2b1d      	cmp	r3, #29
 800e5de:	d001      	beq.n	800e5e4 <__sflush_r+0xac>
 800e5e0:	2b16      	cmp	r3, #22
 800e5e2:	d11e      	bne.n	800e622 <__sflush_r+0xea>
 800e5e4:	602f      	str	r7, [r5, #0]
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	e022      	b.n	800e630 <__sflush_r+0xf8>
 800e5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ee:	b21b      	sxth	r3, r3
 800e5f0:	e01b      	b.n	800e62a <__sflush_r+0xf2>
 800e5f2:	690f      	ldr	r7, [r1, #16]
 800e5f4:	2f00      	cmp	r7, #0
 800e5f6:	d0f6      	beq.n	800e5e6 <__sflush_r+0xae>
 800e5f8:	0793      	lsls	r3, r2, #30
 800e5fa:	680e      	ldr	r6, [r1, #0]
 800e5fc:	bf08      	it	eq
 800e5fe:	694b      	ldreq	r3, [r1, #20]
 800e600:	600f      	str	r7, [r1, #0]
 800e602:	bf18      	it	ne
 800e604:	2300      	movne	r3, #0
 800e606:	eba6 0807 	sub.w	r8, r6, r7
 800e60a:	608b      	str	r3, [r1, #8]
 800e60c:	f1b8 0f00 	cmp.w	r8, #0
 800e610:	dde9      	ble.n	800e5e6 <__sflush_r+0xae>
 800e612:	6a21      	ldr	r1, [r4, #32]
 800e614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e616:	4643      	mov	r3, r8
 800e618:	463a      	mov	r2, r7
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b0      	blx	r6
 800e61e:	2800      	cmp	r0, #0
 800e620:	dc08      	bgt.n	800e634 <__sflush_r+0xfc>
 800e622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e62a:	81a3      	strh	r3, [r4, #12]
 800e62c:	f04f 30ff 	mov.w	r0, #4294967295
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e634:	4407      	add	r7, r0
 800e636:	eba8 0800 	sub.w	r8, r8, r0
 800e63a:	e7e7      	b.n	800e60c <__sflush_r+0xd4>
 800e63c:	dfbffffe 	.word	0xdfbffffe

0800e640 <_fflush_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	690b      	ldr	r3, [r1, #16]
 800e644:	4605      	mov	r5, r0
 800e646:	460c      	mov	r4, r1
 800e648:	b913      	cbnz	r3, 800e650 <_fflush_r+0x10>
 800e64a:	2500      	movs	r5, #0
 800e64c:	4628      	mov	r0, r5
 800e64e:	bd38      	pop	{r3, r4, r5, pc}
 800e650:	b118      	cbz	r0, 800e65a <_fflush_r+0x1a>
 800e652:	6a03      	ldr	r3, [r0, #32]
 800e654:	b90b      	cbnz	r3, 800e65a <_fflush_r+0x1a>
 800e656:	f7fe fa67 	bl	800cb28 <__sinit>
 800e65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d0f3      	beq.n	800e64a <_fflush_r+0xa>
 800e662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e664:	07d0      	lsls	r0, r2, #31
 800e666:	d404      	bmi.n	800e672 <_fflush_r+0x32>
 800e668:	0599      	lsls	r1, r3, #22
 800e66a:	d402      	bmi.n	800e672 <_fflush_r+0x32>
 800e66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e66e:	f7fe fb72 	bl	800cd56 <__retarget_lock_acquire_recursive>
 800e672:	4628      	mov	r0, r5
 800e674:	4621      	mov	r1, r4
 800e676:	f7ff ff5f 	bl	800e538 <__sflush_r>
 800e67a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e67c:	07da      	lsls	r2, r3, #31
 800e67e:	4605      	mov	r5, r0
 800e680:	d4e4      	bmi.n	800e64c <_fflush_r+0xc>
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	059b      	lsls	r3, r3, #22
 800e686:	d4e1      	bmi.n	800e64c <_fflush_r+0xc>
 800e688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e68a:	f7fe fb65 	bl	800cd58 <__retarget_lock_release_recursive>
 800e68e:	e7dd      	b.n	800e64c <_fflush_r+0xc>

0800e690 <__swbuf_r>:
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	460e      	mov	r6, r1
 800e694:	4614      	mov	r4, r2
 800e696:	4605      	mov	r5, r0
 800e698:	b118      	cbz	r0, 800e6a2 <__swbuf_r+0x12>
 800e69a:	6a03      	ldr	r3, [r0, #32]
 800e69c:	b90b      	cbnz	r3, 800e6a2 <__swbuf_r+0x12>
 800e69e:	f7fe fa43 	bl	800cb28 <__sinit>
 800e6a2:	69a3      	ldr	r3, [r4, #24]
 800e6a4:	60a3      	str	r3, [r4, #8]
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	071a      	lsls	r2, r3, #28
 800e6aa:	d501      	bpl.n	800e6b0 <__swbuf_r+0x20>
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	b943      	cbnz	r3, 800e6c2 <__swbuf_r+0x32>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f000 f82a 	bl	800e70c <__swsetup_r>
 800e6b8:	b118      	cbz	r0, 800e6c2 <__swbuf_r+0x32>
 800e6ba:	f04f 37ff 	mov.w	r7, #4294967295
 800e6be:	4638      	mov	r0, r7
 800e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	6922      	ldr	r2, [r4, #16]
 800e6c6:	1a98      	subs	r0, r3, r2
 800e6c8:	6963      	ldr	r3, [r4, #20]
 800e6ca:	b2f6      	uxtb	r6, r6
 800e6cc:	4283      	cmp	r3, r0
 800e6ce:	4637      	mov	r7, r6
 800e6d0:	dc05      	bgt.n	800e6de <__swbuf_r+0x4e>
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	f7ff ffb3 	bl	800e640 <_fflush_r>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d1ed      	bne.n	800e6ba <__swbuf_r+0x2a>
 800e6de:	68a3      	ldr	r3, [r4, #8]
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	60a3      	str	r3, [r4, #8]
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	1c5a      	adds	r2, r3, #1
 800e6e8:	6022      	str	r2, [r4, #0]
 800e6ea:	701e      	strb	r6, [r3, #0]
 800e6ec:	6962      	ldr	r2, [r4, #20]
 800e6ee:	1c43      	adds	r3, r0, #1
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d004      	beq.n	800e6fe <__swbuf_r+0x6e>
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	07db      	lsls	r3, r3, #31
 800e6f8:	d5e1      	bpl.n	800e6be <__swbuf_r+0x2e>
 800e6fa:	2e0a      	cmp	r6, #10
 800e6fc:	d1df      	bne.n	800e6be <__swbuf_r+0x2e>
 800e6fe:	4621      	mov	r1, r4
 800e700:	4628      	mov	r0, r5
 800e702:	f7ff ff9d 	bl	800e640 <_fflush_r>
 800e706:	2800      	cmp	r0, #0
 800e708:	d0d9      	beq.n	800e6be <__swbuf_r+0x2e>
 800e70a:	e7d6      	b.n	800e6ba <__swbuf_r+0x2a>

0800e70c <__swsetup_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4b29      	ldr	r3, [pc, #164]	@ (800e7b4 <__swsetup_r+0xa8>)
 800e710:	4605      	mov	r5, r0
 800e712:	6818      	ldr	r0, [r3, #0]
 800e714:	460c      	mov	r4, r1
 800e716:	b118      	cbz	r0, 800e720 <__swsetup_r+0x14>
 800e718:	6a03      	ldr	r3, [r0, #32]
 800e71a:	b90b      	cbnz	r3, 800e720 <__swsetup_r+0x14>
 800e71c:	f7fe fa04 	bl	800cb28 <__sinit>
 800e720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e724:	0719      	lsls	r1, r3, #28
 800e726:	d422      	bmi.n	800e76e <__swsetup_r+0x62>
 800e728:	06da      	lsls	r2, r3, #27
 800e72a:	d407      	bmi.n	800e73c <__swsetup_r+0x30>
 800e72c:	2209      	movs	r2, #9
 800e72e:	602a      	str	r2, [r5, #0]
 800e730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e734:	81a3      	strh	r3, [r4, #12]
 800e736:	f04f 30ff 	mov.w	r0, #4294967295
 800e73a:	e033      	b.n	800e7a4 <__swsetup_r+0x98>
 800e73c:	0758      	lsls	r0, r3, #29
 800e73e:	d512      	bpl.n	800e766 <__swsetup_r+0x5a>
 800e740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e742:	b141      	cbz	r1, 800e756 <__swsetup_r+0x4a>
 800e744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e748:	4299      	cmp	r1, r3
 800e74a:	d002      	beq.n	800e752 <__swsetup_r+0x46>
 800e74c:	4628      	mov	r0, r5
 800e74e:	f7fe fb21 	bl	800cd94 <_free_r>
 800e752:	2300      	movs	r3, #0
 800e754:	6363      	str	r3, [r4, #52]	@ 0x34
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e75c:	81a3      	strh	r3, [r4, #12]
 800e75e:	2300      	movs	r3, #0
 800e760:	6063      	str	r3, [r4, #4]
 800e762:	6923      	ldr	r3, [r4, #16]
 800e764:	6023      	str	r3, [r4, #0]
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	f043 0308 	orr.w	r3, r3, #8
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	b94b      	cbnz	r3, 800e786 <__swsetup_r+0x7a>
 800e772:	89a3      	ldrh	r3, [r4, #12]
 800e774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e77c:	d003      	beq.n	800e786 <__swsetup_r+0x7a>
 800e77e:	4621      	mov	r1, r4
 800e780:	4628      	mov	r0, r5
 800e782:	f000 f89b 	bl	800e8bc <__smakebuf_r>
 800e786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e78a:	f013 0201 	ands.w	r2, r3, #1
 800e78e:	d00a      	beq.n	800e7a6 <__swsetup_r+0x9a>
 800e790:	2200      	movs	r2, #0
 800e792:	60a2      	str	r2, [r4, #8]
 800e794:	6962      	ldr	r2, [r4, #20]
 800e796:	4252      	negs	r2, r2
 800e798:	61a2      	str	r2, [r4, #24]
 800e79a:	6922      	ldr	r2, [r4, #16]
 800e79c:	b942      	cbnz	r2, 800e7b0 <__swsetup_r+0xa4>
 800e79e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7a2:	d1c5      	bne.n	800e730 <__swsetup_r+0x24>
 800e7a4:	bd38      	pop	{r3, r4, r5, pc}
 800e7a6:	0799      	lsls	r1, r3, #30
 800e7a8:	bf58      	it	pl
 800e7aa:	6962      	ldrpl	r2, [r4, #20]
 800e7ac:	60a2      	str	r2, [r4, #8]
 800e7ae:	e7f4      	b.n	800e79a <__swsetup_r+0x8e>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	e7f7      	b.n	800e7a4 <__swsetup_r+0x98>
 800e7b4:	20000278 	.word	0x20000278

0800e7b8 <_sbrk_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	4d06      	ldr	r5, [pc, #24]	@ (800e7d4 <_sbrk_r+0x1c>)
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	4608      	mov	r0, r1
 800e7c2:	602b      	str	r3, [r5, #0]
 800e7c4:	f7f3 fbcc 	bl	8001f60 <_sbrk>
 800e7c8:	1c43      	adds	r3, r0, #1
 800e7ca:	d102      	bne.n	800e7d2 <_sbrk_r+0x1a>
 800e7cc:	682b      	ldr	r3, [r5, #0]
 800e7ce:	b103      	cbz	r3, 800e7d2 <_sbrk_r+0x1a>
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	bd38      	pop	{r3, r4, r5, pc}
 800e7d4:	2000229c 	.word	0x2000229c

0800e7d8 <__assert_func>:
 800e7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7da:	4614      	mov	r4, r2
 800e7dc:	461a      	mov	r2, r3
 800e7de:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <__assert_func+0x2c>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	68d8      	ldr	r0, [r3, #12]
 800e7e6:	b954      	cbnz	r4, 800e7fe <__assert_func+0x26>
 800e7e8:	4b07      	ldr	r3, [pc, #28]	@ (800e808 <__assert_func+0x30>)
 800e7ea:	461c      	mov	r4, r3
 800e7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7f0:	9100      	str	r1, [sp, #0]
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	4905      	ldr	r1, [pc, #20]	@ (800e80c <__assert_func+0x34>)
 800e7f6:	f000 f829 	bl	800e84c <fiprintf>
 800e7fa:	f000 f8bd 	bl	800e978 <abort>
 800e7fe:	4b04      	ldr	r3, [pc, #16]	@ (800e810 <__assert_func+0x38>)
 800e800:	e7f4      	b.n	800e7ec <__assert_func+0x14>
 800e802:	bf00      	nop
 800e804:	20000278 	.word	0x20000278
 800e808:	0800ee66 	.word	0x0800ee66
 800e80c:	0800ee38 	.word	0x0800ee38
 800e810:	0800ee2b 	.word	0x0800ee2b

0800e814 <_calloc_r>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	fba1 5402 	umull	r5, r4, r1, r2
 800e81a:	b93c      	cbnz	r4, 800e82c <_calloc_r+0x18>
 800e81c:	4629      	mov	r1, r5
 800e81e:	f7fe fe5f 	bl	800d4e0 <_malloc_r>
 800e822:	4606      	mov	r6, r0
 800e824:	b928      	cbnz	r0, 800e832 <_calloc_r+0x1e>
 800e826:	2600      	movs	r6, #0
 800e828:	4630      	mov	r0, r6
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	220c      	movs	r2, #12
 800e82e:	6002      	str	r2, [r0, #0]
 800e830:	e7f9      	b.n	800e826 <_calloc_r+0x12>
 800e832:	462a      	mov	r2, r5
 800e834:	4621      	mov	r1, r4
 800e836:	f7fe fa02 	bl	800cc3e <memset>
 800e83a:	e7f5      	b.n	800e828 <_calloc_r+0x14>

0800e83c <malloc>:
 800e83c:	4b02      	ldr	r3, [pc, #8]	@ (800e848 <malloc+0xc>)
 800e83e:	4601      	mov	r1, r0
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	f7fe be4d 	b.w	800d4e0 <_malloc_r>
 800e846:	bf00      	nop
 800e848:	20000278 	.word	0x20000278

0800e84c <fiprintf>:
 800e84c:	b40e      	push	{r1, r2, r3}
 800e84e:	b503      	push	{r0, r1, lr}
 800e850:	4601      	mov	r1, r0
 800e852:	ab03      	add	r3, sp, #12
 800e854:	4805      	ldr	r0, [pc, #20]	@ (800e86c <fiprintf+0x20>)
 800e856:	f853 2b04 	ldr.w	r2, [r3], #4
 800e85a:	6800      	ldr	r0, [r0, #0]
 800e85c:	9301      	str	r3, [sp, #4]
 800e85e:	f7ff fbc5 	bl	800dfec <_vfiprintf_r>
 800e862:	b002      	add	sp, #8
 800e864:	f85d eb04 	ldr.w	lr, [sp], #4
 800e868:	b003      	add	sp, #12
 800e86a:	4770      	bx	lr
 800e86c:	20000278 	.word	0x20000278

0800e870 <__swhatbuf_r>:
 800e870:	b570      	push	{r4, r5, r6, lr}
 800e872:	460c      	mov	r4, r1
 800e874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e878:	2900      	cmp	r1, #0
 800e87a:	b096      	sub	sp, #88	@ 0x58
 800e87c:	4615      	mov	r5, r2
 800e87e:	461e      	mov	r6, r3
 800e880:	da0d      	bge.n	800e89e <__swhatbuf_r+0x2e>
 800e882:	89a3      	ldrh	r3, [r4, #12]
 800e884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e888:	f04f 0100 	mov.w	r1, #0
 800e88c:	bf14      	ite	ne
 800e88e:	2340      	movne	r3, #64	@ 0x40
 800e890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e894:	2000      	movs	r0, #0
 800e896:	6031      	str	r1, [r6, #0]
 800e898:	602b      	str	r3, [r5, #0]
 800e89a:	b016      	add	sp, #88	@ 0x58
 800e89c:	bd70      	pop	{r4, r5, r6, pc}
 800e89e:	466a      	mov	r2, sp
 800e8a0:	f000 f848 	bl	800e934 <_fstat_r>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	dbec      	blt.n	800e882 <__swhatbuf_r+0x12>
 800e8a8:	9901      	ldr	r1, [sp, #4]
 800e8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8b2:	4259      	negs	r1, r3
 800e8b4:	4159      	adcs	r1, r3
 800e8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8ba:	e7eb      	b.n	800e894 <__swhatbuf_r+0x24>

0800e8bc <__smakebuf_r>:
 800e8bc:	898b      	ldrh	r3, [r1, #12]
 800e8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8c0:	079d      	lsls	r5, r3, #30
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	d507      	bpl.n	800e8d8 <__smakebuf_r+0x1c>
 800e8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8cc:	6023      	str	r3, [r4, #0]
 800e8ce:	6123      	str	r3, [r4, #16]
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	6163      	str	r3, [r4, #20]
 800e8d4:	b003      	add	sp, #12
 800e8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d8:	ab01      	add	r3, sp, #4
 800e8da:	466a      	mov	r2, sp
 800e8dc:	f7ff ffc8 	bl	800e870 <__swhatbuf_r>
 800e8e0:	9f00      	ldr	r7, [sp, #0]
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	f7fe fdfa 	bl	800d4e0 <_malloc_r>
 800e8ec:	b948      	cbnz	r0, 800e902 <__smakebuf_r+0x46>
 800e8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8f2:	059a      	lsls	r2, r3, #22
 800e8f4:	d4ee      	bmi.n	800e8d4 <__smakebuf_r+0x18>
 800e8f6:	f023 0303 	bic.w	r3, r3, #3
 800e8fa:	f043 0302 	orr.w	r3, r3, #2
 800e8fe:	81a3      	strh	r3, [r4, #12]
 800e900:	e7e2      	b.n	800e8c8 <__smakebuf_r+0xc>
 800e902:	89a3      	ldrh	r3, [r4, #12]
 800e904:	6020      	str	r0, [r4, #0]
 800e906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	9b01      	ldr	r3, [sp, #4]
 800e90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e912:	b15b      	cbz	r3, 800e92c <__smakebuf_r+0x70>
 800e914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 f81d 	bl	800e958 <_isatty_r>
 800e91e:	b128      	cbz	r0, 800e92c <__smakebuf_r+0x70>
 800e920:	89a3      	ldrh	r3, [r4, #12]
 800e922:	f023 0303 	bic.w	r3, r3, #3
 800e926:	f043 0301 	orr.w	r3, r3, #1
 800e92a:	81a3      	strh	r3, [r4, #12]
 800e92c:	89a3      	ldrh	r3, [r4, #12]
 800e92e:	431d      	orrs	r5, r3
 800e930:	81a5      	strh	r5, [r4, #12]
 800e932:	e7cf      	b.n	800e8d4 <__smakebuf_r+0x18>

0800e934 <_fstat_r>:
 800e934:	b538      	push	{r3, r4, r5, lr}
 800e936:	4d07      	ldr	r5, [pc, #28]	@ (800e954 <_fstat_r+0x20>)
 800e938:	2300      	movs	r3, #0
 800e93a:	4604      	mov	r4, r0
 800e93c:	4608      	mov	r0, r1
 800e93e:	4611      	mov	r1, r2
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	f7f3 fae5 	bl	8001f10 <_fstat>
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	d102      	bne.n	800e950 <_fstat_r+0x1c>
 800e94a:	682b      	ldr	r3, [r5, #0]
 800e94c:	b103      	cbz	r3, 800e950 <_fstat_r+0x1c>
 800e94e:	6023      	str	r3, [r4, #0]
 800e950:	bd38      	pop	{r3, r4, r5, pc}
 800e952:	bf00      	nop
 800e954:	2000229c 	.word	0x2000229c

0800e958 <_isatty_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4d06      	ldr	r5, [pc, #24]	@ (800e974 <_isatty_r+0x1c>)
 800e95c:	2300      	movs	r3, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	4608      	mov	r0, r1
 800e962:	602b      	str	r3, [r5, #0]
 800e964:	f7f3 fae4 	bl	8001f30 <_isatty>
 800e968:	1c43      	adds	r3, r0, #1
 800e96a:	d102      	bne.n	800e972 <_isatty_r+0x1a>
 800e96c:	682b      	ldr	r3, [r5, #0]
 800e96e:	b103      	cbz	r3, 800e972 <_isatty_r+0x1a>
 800e970:	6023      	str	r3, [r4, #0]
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	2000229c 	.word	0x2000229c

0800e978 <abort>:
 800e978:	b508      	push	{r3, lr}
 800e97a:	2006      	movs	r0, #6
 800e97c:	f000 f82c 	bl	800e9d8 <raise>
 800e980:	2001      	movs	r0, #1
 800e982:	f7f3 fa91 	bl	8001ea8 <_exit>

0800e986 <_raise_r>:
 800e986:	291f      	cmp	r1, #31
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4605      	mov	r5, r0
 800e98c:	460c      	mov	r4, r1
 800e98e:	d904      	bls.n	800e99a <_raise_r+0x14>
 800e990:	2316      	movs	r3, #22
 800e992:	6003      	str	r3, [r0, #0]
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e99c:	b112      	cbz	r2, 800e9a4 <_raise_r+0x1e>
 800e99e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9a2:	b94b      	cbnz	r3, 800e9b8 <_raise_r+0x32>
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	f000 f831 	bl	800ea0c <_getpid_r>
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9b4:	f000 b818 	b.w	800e9e8 <_kill_r>
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d00a      	beq.n	800e9d2 <_raise_r+0x4c>
 800e9bc:	1c59      	adds	r1, r3, #1
 800e9be:	d103      	bne.n	800e9c8 <_raise_r+0x42>
 800e9c0:	2316      	movs	r3, #22
 800e9c2:	6003      	str	r3, [r0, #0]
 800e9c4:	2001      	movs	r0, #1
 800e9c6:	e7e7      	b.n	800e998 <_raise_r+0x12>
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	4798      	blx	r3
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	e7e0      	b.n	800e998 <_raise_r+0x12>
	...

0800e9d8 <raise>:
 800e9d8:	4b02      	ldr	r3, [pc, #8]	@ (800e9e4 <raise+0xc>)
 800e9da:	4601      	mov	r1, r0
 800e9dc:	6818      	ldr	r0, [r3, #0]
 800e9de:	f7ff bfd2 	b.w	800e986 <_raise_r>
 800e9e2:	bf00      	nop
 800e9e4:	20000278 	.word	0x20000278

0800e9e8 <_kill_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d07      	ldr	r5, [pc, #28]	@ (800ea08 <_kill_r+0x20>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	f7f3 fa47 	bl	8001e88 <_kill>
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	d102      	bne.n	800ea04 <_kill_r+0x1c>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b103      	cbz	r3, 800ea04 <_kill_r+0x1c>
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	bf00      	nop
 800ea08:	2000229c 	.word	0x2000229c

0800ea0c <_getpid_r>:
 800ea0c:	f7f3 ba34 	b.w	8001e78 <_getpid>

0800ea10 <_init>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	bf00      	nop
 800ea14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea16:	bc08      	pop	{r3}
 800ea18:	469e      	mov	lr, r3
 800ea1a:	4770      	bx	lr

0800ea1c <_fini>:
 800ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1e:	bf00      	nop
 800ea20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea22:	bc08      	pop	{r3}
 800ea24:	469e      	mov	lr, r3
 800ea26:	4770      	bx	lr
