
Uart_communicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005484  08005484  00006484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055fc  080055fc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005600  08005600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005604  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000320  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e61c  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000249a  00000000  00000000  000156b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00017b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a65  00000000  00000000  000188c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002255d  00000000  00000000  00019325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000111ee  00000000  00000000  0003b882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd571  00000000  00000000  0004ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119fe1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004098  00000000  00000000  0011a024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0011e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800546c 	.word	0x0800546c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800546c 	.word	0x0800546c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <MX_DMA_Init+0x4c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_DMA_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200c      	movs	r0, #12
 8000588:	f000 fe07 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800058c:	200c      	movs	r0, #12
 800058e:	f000 fe20 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f000 fdff 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f000 fe18 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a26      	ldr	r2, [pc, #152]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0xb8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Pin|Orange_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <MX_GPIO_Init+0xbc>)
 800063e:	f001 fb81 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Pin|Orange_Pin|Red_Pin|Blue_Pin;
 8000642:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_GPIO_Init+0xbc>)
 800065c:	f001 f9d6 	bl	8001a0c <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40020c00 	.word	0x40020c00

08000670 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000678:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800067c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d013      	beq.n	80006b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000688:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800068c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000690:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00b      	beq.n	80006b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000698:	e000      	b.n	800069c <ITM_SendChar+0x2c>
    {
      __NOP();
 800069a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800069c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0f9      	beq.n	800069a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	char *pend; char *pend1; char *pend2;
	int16_t rdr      =  strtol((char *)rx_data, &pend, 10);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	220a      	movs	r2, #10
 80006ce:	4619      	mov	r1, r3
 80006d0:	4811      	ldr	r0, [pc, #68]	@ (8000718 <HAL_UART_RxCpltCallback+0x58>)
 80006d2:	f003 fdbb 	bl	800424c <strtol>
 80006d6:	4603      	mov	r3, r0
 80006d8:	83fb      	strh	r3, [r7, #30]
	int16_t ldr      =  strtol(pend , &pend1, 10);
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	f107 0110 	add.w	r1, r7, #16
 80006e0:	220a      	movs	r2, #10
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fdb2 	bl	800424c <strtol>
 80006e8:	4603      	mov	r3, r0
 80006ea:	83bb      	strh	r3, [r7, #28]
	int16_t e123     =  strtol(pend1, &pend2, 10);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	f107 010c 	add.w	r1, r7, #12
 80006f2:	220a      	movs	r2, #10
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fda9 	bl	800424c <strtol>
 80006fa:	4603      	mov	r3, r0
 80006fc:	837b      	strh	r3, [r7, #26]

	//printf("%s \r\n",rx_data);
	printf("%d %d %d \n",rdr, ldr, e123);
 80006fe:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8000702:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000706:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <HAL_UART_RxCpltCallback+0x5c>)
 800070c:	f003 fe6a 	bl	80043e4 <iprintf>
//	printf("%d \r\n",rdr);
//	printf("%d \r\n",ldr);
//	printf("%d \r\n",e123);
//	HAL_UART_Receive_DMA(&huart2,rx_data,10);
}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000084 	.word	0x20000084
 800071c:	08005484 	.word	0x08005484

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fbec 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f81a 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff40 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff ff16 	bl	8000560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000734:	f000 fa40 	bl	8000bb8 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000738:	f000 f9dc 	bl	8000af4 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 800073c:	f000 fa66 	bl	8000c0c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef uart2
  HAL_UART_Receive_DMA(&huart2,rx_data,rx_data_size);
#endif
#ifdef uart3
  HAL_UART_Receive_DMA(&huart3,rx_data,rx_data_size);
 8000740:	2208      	movs	r2, #8
 8000742:	4904      	ldr	r1, [pc, #16]	@ (8000754 <main+0x34>)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <main+0x38>)
 8000746:	f002 fc53 	bl	8002ff0 <HAL_UART_Receive_DMA>
#endif
  HAL_TIM_Base_Start_IT(&htim9);
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <main+0x3c>)
 800074c:	f002 f816 	bl	800277c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <main+0x30>
 8000754:	20000084 	.word	0x20000084
 8000758:	20000130 	.word	0x20000130
 800075c:	200000a0 	.word	0x200000a0

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fead 	bl	80044ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	@ (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	@ 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	@ 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fae1 	bl	8001dac <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f872 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fd42 	bl	800229c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f000 f85b 	bl	80008d8 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;

  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e009      	b.n	800085a <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	60ba      	str	r2, [r7, #8]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff0e 	bl	8000670 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	429a      	cmp	r2, r3
 8000860:	dbf1      	blt.n	8000846 <_write+0x12>
  }
  return len;
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <TIM1_BRK_TIM9_IRQHandler>:

void TIM1_BRK_TIM9_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
if(TIM9->SR & TIM_SR_UIF)
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <TIM1_BRK_TIM9_IRQHandler+0x50>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d018      	beq.n	80008b0 <TIM1_BRK_TIM9_IRQHandler+0x44>
	{
		sprintf(tx_data,"%d %d %d %d\r\n", 45, 34, 22, 67);
 800087e:	2343      	movs	r3, #67	@ 0x43
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2316      	movs	r3, #22
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2322      	movs	r3, #34	@ 0x22
 8000888:	222d      	movs	r2, #45	@ 0x2d
 800088a:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <TIM1_BRK_TIM9_IRQHandler+0x54>)
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <TIM1_BRK_TIM9_IRQHandler+0x58>)
 800088e:	f003 fdbb 	bl	8004408 <siprintf>
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)tx_data,sizeof(tx_data));
		HAL_UART_Receive_DMA(&huart2,rx_data,rx_data_size);
#endif

#ifdef uart3
		HAL_UART_Transmit_IT(&huart3,(uint8_t *)tx_data,sizeof(tx_data));
 8000892:	220e      	movs	r2, #14
 8000894:	490b      	ldr	r1, [pc, #44]	@ (80008c4 <TIM1_BRK_TIM9_IRQHandler+0x58>)
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 8000898:	f002 fb74 	bl	8002f84 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_DMA(&huart3,rx_data,rx_data_size);
 800089c:	2208      	movs	r2, #8
 800089e:	490b      	ldr	r1, [pc, #44]	@ (80008cc <TIM1_BRK_TIM9_IRQHandler+0x60>)
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 80008a2:	f002 fba5 	bl	8002ff0 <HAL_UART_Receive_DMA>
#endif

		HAL_GPIO_TogglePin(GPIOD,Orange_Pin|Blue_Pin);
 80008a6:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80008aa:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <TIM1_BRK_TIM9_IRQHandler+0x64>)
 80008ac:	f001 fa63 	bl	8001d76 <HAL_GPIO_TogglePin>

		//HAL_Delay(1000);
	}
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 80008b2:	f001 ffd3 	bl	800285c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40014000 	.word	0x40014000
 80008c0:	08005490 	.word	0x08005490
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	20000130 	.word	0x20000130
 80008cc:	20000084 	.word	0x20000084
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	200000a0 	.word	0x200000a0

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fc2e 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <NMI_Handler+0x4>

0800093c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 fb0b 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <DMA1_Stream1_IRQHandler+0x10>)
 800099a:	f000 fdcd 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200001d8 	.word	0x200001d8

080009a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <DMA1_Stream5_IRQHandler+0x10>)
 80009ae:	f000 fdc3 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000178 	.word	0x20000178

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f002 fb3b 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e8 	.word	0x200000e8

080009d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <USART3_IRQHandler+0x10>)
 80009d6:	f002 fb31 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000130 	.word	0x20000130

080009e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
  }

  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a46:	605a      	str	r2, [r3, #4]
  return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_isatty>:

int _isatty(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f003 fd58 	bl	800456c <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20020000 	.word	0x20020000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	20000388 	.word	0x20000388

08000af4 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b08:	4a16      	ldr	r2, [pc, #88]	@ (8000b64 <MX_TIM9_Init+0x70>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b0e:	22a7      	movs	r2, #167	@ 0xa7
 8000b10:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b1a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b1e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b2c:	480c      	ldr	r0, [pc, #48]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b2e:	f001 fdd5 	bl	80026dc <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000b38:	f7ff fece 	bl	80008d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b40:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <MX_TIM9_Init+0x6c>)
 8000b48:	f001 ff78 	bl	8002a3c <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000b52:	f7ff fec1 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000a0 	.word	0x200000a0
 8000b64:	40014000 	.word	0x40014000

08000b68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x48>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d115      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2018      	movs	r0, #24
 8000b9c:	f000 fafd 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ba0:	2018      	movs	r0, #24
 8000ba2:	f000 fb16 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40014000 	.word	0x40014000
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <MX_USART2_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f002 f978 	bl	8002ee4 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f7ff fe6d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000e8 	.word	0x200000e8
 8000c08:	40004400 	.word	0x40004400

08000c0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <MX_USART3_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_USART3_UART_Init+0x4c>)
 8000c44:	f002 f94e 	bl	8002ee4 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f7ff fe43 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000130 	.word	0x20000130
 8000c5c:	40004800 	.word	0x40004800

08000c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a78      	ldr	r2, [pc, #480]	@ (8000e60 <HAL_UART_MspInit+0x200>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	f040 8081 	bne.w	8000d86 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	4b76      	ldr	r3, [pc, #472]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8c:	4a75      	ldr	r2, [pc, #468]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c94:	4b73      	ldr	r3, [pc, #460]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	4b68      	ldr	r3, [pc, #416]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a67      	ldr	r2, [pc, #412]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b65      	ldr	r3, [pc, #404]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	485d      	ldr	r0, [pc, #372]	@ (8000e68 <HAL_UART_MspInit+0x208>)
 8000cf4:	f000 fe8a 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cf8:	2320      	movs	r3, #32
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	4856      	ldr	r0, [pc, #344]	@ (8000e6c <HAL_UART_MspInit+0x20c>)
 8000d14:	f000 fe7a 	bl	8001a0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d18:	4b55      	ldr	r3, [pc, #340]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d1a:	4a56      	ldr	r2, [pc, #344]	@ (8000e74 <HAL_UART_MspInit+0x214>)
 8000d1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d1e:	4b54      	ldr	r3, [pc, #336]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d24:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d26:	4b52      	ldr	r3, [pc, #328]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2c:	4b50      	ldr	r3, [pc, #320]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d32:	4b4f      	ldr	r3, [pc, #316]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d40:	4b4b      	ldr	r3, [pc, #300]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d4c:	4b48      	ldr	r3, [pc, #288]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d52:	4b47      	ldr	r3, [pc, #284]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d58:	4845      	ldr	r0, [pc, #276]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d5a:	f000 fa55 	bl	8001208 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000d64:	f7ff fdb8 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a41      	ldr	r2, [pc, #260]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d6e:	4a40      	ldr	r2, [pc, #256]	@ (8000e70 <HAL_UART_MspInit+0x210>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2026      	movs	r0, #38	@ 0x26
 8000d7a:	f000 fa0e 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7e:	2026      	movs	r0, #38	@ 0x26
 8000d80:	f000 fa27 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d84:	e067      	b.n	8000e56 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART3)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e78 <HAL_UART_MspInit+0x218>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d162      	bne.n	8000e56 <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a32      	ldr	r2, [pc, #200]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000d9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <HAL_UART_MspInit+0x204>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4825      	ldr	r0, [pc, #148]	@ (8000e7c <HAL_UART_MspInit+0x21c>)
 8000de6:	f000 fe11 	bl	8001a0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000dea:	4b25      	ldr	r3, [pc, #148]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000dec:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <HAL_UART_MspInit+0x224>)
 8000dee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000df0:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000df2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000df6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e04:	4b1e      	ldr	r3, [pc, #120]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e2a:	4815      	ldr	r0, [pc, #84]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e2c:	f000 f9ec 	bl	8001208 <HAL_DMA_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8000e36:	f7ff fd4f 	bl	80008d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e40:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <HAL_UART_MspInit+0x220>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2027      	movs	r0, #39	@ 0x27
 8000e4c:	f000 f9a5 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e50:	2027      	movs	r0, #39	@ 0x27
 8000e52:	f000 f9be 	bl	80011d2 <HAL_NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	@ 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40004400 	.word	0x40004400
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	20000178 	.word	0x20000178
 8000e74:	40026088 	.word	0x40026088
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	200001d8 	.word	0x200001d8
 8000e84:	40026028 	.word	0x40026028

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e8c:	f000 f826 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f003 fb5f 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fc31 	bl	8000720 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ecc:	08005604 	.word	0x08005604
  ldr r2, =_sbss
 8000ed0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed4:	20000388 	.word	0x20000388

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f92b 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fcd6 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f943 	bl	80011ee <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f90b 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000238 	.word	0x20000238

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000238 	.word	0x20000238

08000fe4 <__NVIC_SetPriorityGrouping>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	@ (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff feda 	bl	8000fcc <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e099      	b.n	8001358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	e00f      	b.n	8001266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001246:	f7ff fec1 	bl	8000fcc <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b05      	cmp	r3, #5
 8001252:	d908      	bls.n	8001266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e078      	b.n	8001358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e8      	bne.n	8001246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_DMA_Init+0x158>)
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4313      	orrs	r3, r2
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d117      	bne.n	800132a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00e      	beq.n	800132a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fb01 	bl	8001914 <DMA_CheckFifoParam>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001326:	2301      	movs	r3, #1
 8001328:	e016      	b.n	8001358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fab8 	bl	80018a8 <DMA_CalcBaseAndBitshift>
 8001338:	4603      	mov	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001340:	223f      	movs	r2, #63	@ 0x3f
 8001342:	409a      	lsls	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	f010803f 	.word	0xf010803f

08001364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_DMA_Start_IT+0x26>
 8001386:	2302      	movs	r3, #2
 8001388:	e040      	b.n	800140c <HAL_DMA_Start_IT+0xa8>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d12f      	bne.n	80013fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 fa4a 	bl	800184c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013bc:	223f      	movs	r2, #63	@ 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0216 	orr.w	r2, r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e005      	b.n	800140a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001406:	2302      	movs	r3, #2
 8001408:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800140a:	7dfb      	ldrb	r3, [r7, #23]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001422:	f7ff fdd3 	bl	8000fcc <HAL_GetTick>
 8001426:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d008      	beq.n	8001446 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e052      	b.n	80014ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0216 	bic.w	r2, r2, #22
 8001454:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001464:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <HAL_DMA_Abort+0x62>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0208 	bic.w	r2, r2, #8
 8001484:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001496:	e013      	b.n	80014c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001498:	f7ff fd98 	bl	8000fcc <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d90c      	bls.n	80014c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e015      	b.n	80014ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e4      	bne.n	8001498 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d2:	223f      	movs	r2, #63	@ 0x3f
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d004      	beq.n	8001512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2280      	movs	r2, #128	@ 0x80
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00c      	b.n	800152c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2205      	movs	r2, #5
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001544:	4b8e      	ldr	r3, [pc, #568]	@ (8001780 <HAL_DMA_IRQHandler+0x248>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a8e      	ldr	r2, [pc, #568]	@ (8001784 <HAL_DMA_IRQHandler+0x24c>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001562:	2208      	movs	r2, #8
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0204 	bic.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	2208      	movs	r2, #8
 8001592:	409a      	lsls	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	2201      	movs	r2, #1
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d012      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015de:	2204      	movs	r2, #4
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d012      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fc:	2204      	movs	r2, #4
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	f043 0204 	orr.w	r2, r3, #4
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001614:	2210      	movs	r2, #16
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d043      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03c      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	2210      	movs	r2, #16
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d018      	beq.n	800167a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d024      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
 8001666:	e01f      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e016      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	2220      	movs	r2, #32
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 808f 	beq.w	80017d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8087 	beq.w	80017d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ce:	2220      	movs	r2, #32
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d136      	bne.n	8001750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0216 	bic.w	r2, r2, #22
 80016f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_DMA_IRQHandler+0x1da>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	223f      	movs	r2, #63	@ 0x3f
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d07e      	beq.n	8001844 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
        }
        return;
 800174e:	e079      	b.n	8001844 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01d      	beq.n	800179a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10d      	bne.n	8001788 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001770:	2b00      	cmp	r3, #0
 8001772:	d031      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
 800177c:	e02c      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000
 8001784:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
 8001798:	e01e      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10f      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0210 	bic.w	r2, r2, #16
 80017b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d032      	beq.n	8001846 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d022      	beq.n	8001832 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	3301      	adds	r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	d307      	bcc.n	8001820 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f2      	bne.n	8001804 <HAL_DMA_IRQHandler+0x2cc>
 800181e:	e000      	b.n	8001822 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001820:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
 8001842:	e000      	b.n	8001846 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001844:	bf00      	nop
    }
  }
}
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001868:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b40      	cmp	r3, #64	@ 0x40
 8001878:	d108      	bne.n	800188c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800188a:	e007      	b.n	800189c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b10      	subs	r3, #16
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <DMA_CalcBaseAndBitshift+0x64>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <DMA_CalcBaseAndBitshift+0x68>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d909      	bls.n	80018ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018de:	f023 0303 	bic.w	r3, r3, #3
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80018e8:	e007      	b.n	80018fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018f2:	f023 0303 	bic.w	r3, r3, #3
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	aaaaaaab 	.word	0xaaaaaaab
 8001910:	080054b8 	.word	0x080054b8

08001914 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11f      	bne.n	800196e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d856      	bhi.n	80019e2 <DMA_CheckFifoParam+0xce>
 8001934:	a201      	add	r2, pc, #4	@ (adr r2, 800193c <DMA_CheckFifoParam+0x28>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	0800194d 	.word	0x0800194d
 8001940:	0800195f 	.word	0x0800195f
 8001944:	0800194d 	.word	0x0800194d
 8001948:	080019e3 	.word	0x080019e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d046      	beq.n	80019e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195c:	e043      	b.n	80019e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001962:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001966:	d140      	bne.n	80019ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196c:	e03d      	b.n	80019ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001976:	d121      	bne.n	80019bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d837      	bhi.n	80019ee <DMA_CheckFifoParam+0xda>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <DMA_CheckFifoParam+0x70>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	0800199b 	.word	0x0800199b
 800198c:	08001995 	.word	0x08001995
 8001990:	080019ad 	.word	0x080019ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      break;
 8001998:	e030      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d025      	beq.n	80019f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019aa:	e022      	b.n	80019f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019b4:	d11f      	bne.n	80019f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ba:	e01c      	b.n	80019f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d903      	bls.n	80019ca <DMA_CheckFifoParam+0xb6>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d003      	beq.n	80019d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019c8:	e018      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
      break;
 80019ce:	e015      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
      break;
 80019e0:	e00b      	b.n	80019fa <DMA_CheckFifoParam+0xe6>
      break;
 80019e2:	bf00      	nop
 80019e4:	e00a      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;
 80019e6:	bf00      	nop
 80019e8:	e008      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;
 80019ea:	bf00      	nop
 80019ec:	e006      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;
 80019ee:	bf00      	nop
 80019f0:	e004      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;
 80019f2:	bf00      	nop
 80019f4:	e002      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;   
 80019f6:	bf00      	nop
 80019f8:	e000      	b.n	80019fc <DMA_CheckFifoParam+0xe8>
      break;
 80019fa:	bf00      	nop
    }
  } 
  
  return status; 
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e16b      	b.n	8001d00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f040 815a 	bne.w	8001cfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d005      	beq.n	8001a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d130      	bne.n	8001ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 0201 	and.w	r2, r3, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d017      	beq.n	8001afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d123      	bne.n	8001b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80b4 	beq.w	8001cfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b60      	ldr	r3, [pc, #384]	@ (8001d18 <HAL_GPIO_Init+0x30c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d18 <HAL_GPIO_Init+0x30c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <HAL_GPIO_Init+0x30c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bae:	4a5b      	ldr	r2, [pc, #364]	@ (8001d1c <HAL_GPIO_Init+0x310>)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_GPIO_Init+0x314>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d02b      	beq.n	8001c32 <HAL_GPIO_Init+0x226>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a51      	ldr	r2, [pc, #324]	@ (8001d24 <HAL_GPIO_Init+0x318>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x222>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a50      	ldr	r2, [pc, #320]	@ (8001d28 <HAL_GPIO_Init+0x31c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x21e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4f      	ldr	r2, [pc, #316]	@ (8001d2c <HAL_GPIO_Init+0x320>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x21a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d30 <HAL_GPIO_Init+0x324>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x216>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <HAL_GPIO_Init+0x328>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x212>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4c      	ldr	r2, [pc, #304]	@ (8001d38 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d3c <HAL_GPIO_Init+0x330>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x20a>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00e      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x228>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	@ (8001d1c <HAL_GPIO_Init+0x310>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a27      	ldr	r2, [pc, #156]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf4:	4a12      	ldr	r2, [pc, #72]	@ (8001d40 <HAL_GPIO_Init+0x334>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae90 	bls.w	8001a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b085      	sub	sp, #20
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d88:	887a      	ldrh	r2, [r7, #2]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	041a      	lsls	r2, r3, #16
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	400b      	ands	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e267      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d075      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dca:	4b88      	ldr	r3, [pc, #544]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d00c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b85      	ldr	r3, [pc, #532]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d112      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de2:	4b82      	ldr	r3, [pc, #520]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dee:	d10b      	bne.n	8001e08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d05b      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x108>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d157      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e242      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e10:	d106      	bne.n	8001e20 <HAL_RCC_OscConfig+0x74>
 8001e12:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a75      	ldr	r2, [pc, #468]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xb0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x98>
 8001e2a:	4b70      	ldr	r3, [pc, #448]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6d      	ldr	r3, [pc, #436]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xb0>
 8001e44:	4b69      	ldr	r3, [pc, #420]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a68      	ldr	r2, [pc, #416]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b66      	ldr	r3, [pc, #408]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a65      	ldr	r2, [pc, #404]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8b2 	bl	8000fcc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f8ae 	bl	8000fcc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e207      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xc0>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f89e 	bl	8000fcc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff f89a 	bl	8000fcc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1f3      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0xe8>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x152>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1c7      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4937      	ldr	r1, [pc, #220]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_RCC_OscConfig+0x244>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff f853 	bl	8000fcc <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f84f 	bl	8000fcc <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1a8      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4925      	ldr	r1, [pc, #148]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_OscConfig+0x244>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f832 	bl	8000fcc <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f82e 	bl	8000fcc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e187      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d036      	beq.n	8002004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <HAL_RCC_OscConfig+0x248>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f812 	bl	8000fcc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff f80e 	bl	8000fcc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e167      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_RCC_OscConfig+0x240>)
 8001fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x200>
 8001fca:	e01b      	b.n	8002004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_OscConfig+0x248>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fffb 	bl	8000fcc <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	e00e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fda:	f7fe fff7 	bl	8000fcc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d907      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e150      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470000 	.word	0x42470000
 8001ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b88      	ldr	r3, [pc, #544]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ea      	bne.n	8001fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8097 	beq.w	8002140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b81      	ldr	r3, [pc, #516]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b7d      	ldr	r3, [pc, #500]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a7c      	ldr	r2, [pc, #496]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
 8002032:	4b7a      	ldr	r3, [pc, #488]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b77      	ldr	r3, [pc, #476]	@ (8002220 <HAL_RCC_OscConfig+0x474>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b74      	ldr	r3, [pc, #464]	@ (8002220 <HAL_RCC_OscConfig+0x474>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a73      	ldr	r2, [pc, #460]	@ (8002220 <HAL_RCC_OscConfig+0x474>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7fe ffb7 	bl	8000fcc <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe ffb3 	bl	8000fcc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e10c      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b6a      	ldr	r3, [pc, #424]	@ (8002220 <HAL_RCC_OscConfig+0x474>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x2ea>
 8002088:	4b64      	ldr	r3, [pc, #400]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a63      	ldr	r2, [pc, #396]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x324>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x30c>
 800209e:	4b5f      	ldr	r3, [pc, #380]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	4a5e      	ldr	r2, [pc, #376]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a5b      	ldr	r2, [pc, #364]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0x324>
 80020b8:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	4a57      	ldr	r2, [pc, #348]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c4:	4b55      	ldr	r3, [pc, #340]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a54      	ldr	r2, [pc, #336]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020ca:	f023 0304 	bic.w	r3, r3, #4
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7fe ff78 	bl	8000fcc <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe ff74 	bl	8000fcc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0cb      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ee      	beq.n	80020e0 <HAL_RCC_OscConfig+0x334>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7fe ff62 	bl	8000fcc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe ff5e 	bl	8000fcc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0b5      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ee      	bne.n	800210c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002134:	4b39      	ldr	r3, [pc, #228]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	4a38      	ldr	r2, [pc, #224]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a1 	beq.w	800228c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214a:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d05c      	beq.n	8002210 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d141      	bne.n	80021e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_RCC_OscConfig+0x478>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe ff32 	bl	8000fcc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe ff2e 	bl	8000fcc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e087      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	491b      	ldr	r1, [pc, #108]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x478>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7fe ff07 	bl	8000fcc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe ff03 	bl	8000fcc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e05c      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x416>
 80021e0:	e054      	b.n	800228c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_RCC_OscConfig+0x478>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fef0 	bl	8000fcc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe feec 	bl	8000fcc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e045      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_RCC_OscConfig+0x470>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x444>
 800220e:	e03d      	b.n	800228c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e038      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000
 8002224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <HAL_RCC_OscConfig+0x4ec>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d028      	beq.n	8002288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d121      	bne.n	8002288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d11a      	bne.n	8002288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800225e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002260:	4293      	cmp	r3, r2
 8002262:	d111      	bne.n	8002288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0cc      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b68      	ldr	r3, [pc, #416]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d90c      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b65      	ldr	r3, [pc, #404]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b63      	ldr	r3, [pc, #396]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0b8      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f0:	4b59      	ldr	r3, [pc, #356]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a58      	ldr	r2, [pc, #352]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a52      	ldr	r2, [pc, #328]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4b50      	ldr	r3, [pc, #320]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	494d      	ldr	r1, [pc, #308]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d044      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d119      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e07f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d003      	beq.n	800235a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	2b03      	cmp	r3, #3
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e067      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4934      	ldr	r1, [pc, #208]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe fe1e 	bl	8000fcc <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fe1a 	bl	8000fcc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e04f      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d20c      	bcs.n	80023e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e032      	b.n	800244a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4916      	ldr	r1, [pc, #88]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240e:	4b12      	ldr	r3, [pc, #72]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	490e      	ldr	r1, [pc, #56]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002422:	f000 f821 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8002426:	4602      	mov	r2, r0
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	490a      	ldr	r1, [pc, #40]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	5ccb      	ldrb	r3, [r1, r3]
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	4a09      	ldr	r2, [pc, #36]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fd7e 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023c00 	.word	0x40023c00
 8002458:	40023800 	.word	0x40023800
 800245c:	080054a0 	.word	0x080054a0
 8002460:	20000000 	.word	0x20000000
 8002464:	20000004 	.word	0x20000004

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800246c:	b094      	sub	sp, #80	@ 0x50
 800246e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	647b      	str	r3, [r7, #68]	@ 0x44
 8002474:	2300      	movs	r3, #0
 8002476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002478:	2300      	movs	r3, #0
 800247a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002480:	4b79      	ldr	r3, [pc, #484]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d00d      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x40>
 800248c:	2b08      	cmp	r3, #8
 800248e:	f200 80e1 	bhi.w	8002654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x34>
 8002496:	2b04      	cmp	r3, #4
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800249a:	e0db      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_RCC_GetSysClockFreq+0x204>)
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80024a0:	e0db      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a2:	4b73      	ldr	r3, [pc, #460]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x208>)
 80024a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024a6:	e0d8      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d063      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	4b6a      	ldr	r3, [pc, #424]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	2200      	movs	r2, #0
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024d2:	2300      	movs	r3, #0
 80024d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	0159      	lsls	r1, r3, #5
 80024e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ec:	0150      	lsls	r0, r2, #5
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4621      	mov	r1, r4
 80024f4:	1a51      	subs	r1, r2, r1
 80024f6:	6139      	str	r1, [r7, #16]
 80024f8:	4629      	mov	r1, r5
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800250c:	4659      	mov	r1, fp
 800250e:	018b      	lsls	r3, r1, #6
 8002510:	4651      	mov	r1, sl
 8002512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002516:	4651      	mov	r1, sl
 8002518:	018a      	lsls	r2, r1, #6
 800251a:	4651      	mov	r1, sl
 800251c:	ebb2 0801 	subs.w	r8, r2, r1
 8002520:	4659      	mov	r1, fp
 8002522:	eb63 0901 	sbc.w	r9, r3, r1
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253a:	4690      	mov	r8, r2
 800253c:	4699      	mov	r9, r3
 800253e:	4623      	mov	r3, r4
 8002540:	eb18 0303 	adds.w	r3, r8, r3
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	462b      	mov	r3, r5
 8002548:	eb49 0303 	adc.w	r3, r9, r3
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800255a:	4629      	mov	r1, r5
 800255c:	024b      	lsls	r3, r1, #9
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002564:	4621      	mov	r1, r4
 8002566:	024a      	lsls	r2, r1, #9
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800256e:	2200      	movs	r2, #0
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002578:	f7fd fe7a 	bl	8000270 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002584:	e058      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	099b      	lsrs	r3, r3, #6
 800258c:	2200      	movs	r2, #0
 800258e:	4618      	mov	r0, r3
 8002590:	4611      	mov	r1, r2
 8002592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
 800259c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	f04f 0000 	mov.w	r0, #0
 80025a8:	f04f 0100 	mov.w	r1, #0
 80025ac:	0159      	lsls	r1, r3, #5
 80025ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b2:	0150      	lsls	r0, r2, #5
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4641      	mov	r1, r8
 80025ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80025be:	4649      	mov	r1, r9
 80025c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025d8:	ebb2 040a 	subs.w	r4, r2, sl
 80025dc:	eb63 050b 	sbc.w	r5, r3, fp
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	00eb      	lsls	r3, r5, #3
 80025ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ee:	00e2      	lsls	r2, r4, #3
 80025f0:	4614      	mov	r4, r2
 80025f2:	461d      	mov	r5, r3
 80025f4:	4643      	mov	r3, r8
 80025f6:	18e3      	adds	r3, r4, r3
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	464b      	mov	r3, r9
 80025fc:	eb45 0303 	adc.w	r3, r5, r3
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800260e:	4629      	mov	r1, r5
 8002610:	028b      	lsls	r3, r1, #10
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002618:	4621      	mov	r1, r4
 800261a:	028a      	lsls	r2, r1, #10
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002622:	2200      	movs	r2, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	61fa      	str	r2, [r7, #28]
 8002628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800262c:	f7fd fe20 	bl	8000270 <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4613      	mov	r3, r2
 8002636:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800264a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800264c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetSysClockFreq+0x204>)
 8002656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800265c:	4618      	mov	r0, r3
 800265e:	3750      	adds	r7, #80	@ 0x50
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400
 8002670:	007a1200 	.word	0x007a1200

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b03      	ldr	r3, [pc, #12]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000

0800268c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002690:	f7ff fff0 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080054b0 	.word	0x080054b0

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b8:	f7ff ffdc 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0b5b      	lsrs	r3, r3, #13
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	080054b0 	.word	0x080054b0

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe fa30 	bl	8000b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 fa88 	bl	8002c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d001      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e04e      	b.n	8002832 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <HAL_TIM_Base_Start_IT+0xc4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d022      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027be:	d01d      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <HAL_TIM_Base_Start_IT+0xc8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d018      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002848 <HAL_TIM_Base_Start_IT+0xcc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1c      	ldr	r2, [pc, #112]	@ (800284c <HAL_TIM_Base_Start_IT+0xd0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00e      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002850 <HAL_TIM_Base_Start_IT+0xd4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x80>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d111      	bne.n	8002820 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d010      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	e007      	b.n	8002830 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40010000 	.word	0x40010000
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800
 800284c:	40000c00 	.word	0x40000c00
 8002850:	40010400 	.word	0x40010400
 8002854:	40014000 	.word	0x40014000
 8002858:	40001800 	.word	0x40001800

0800285c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d020      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0202 	mvn.w	r2, #2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9a3 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f995 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f9a6 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d020      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0204 	mvn.w	r2, #4
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f97d 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f96f 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f980 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0208 	mvn.w	r2, #8
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2204      	movs	r2, #4
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f957 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f949 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f95a 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2208      	movs	r2, #8
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f931 	bl	8002bf2 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f923 	bl	8002bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f934 	bl	8002c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0201 	mvn.w	r2, #1
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f901 	bl	8002bca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa72 	bl	8002ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f905 	bl	8002c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0220 	mvn.w	r2, #32
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa44 	bl	8002ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_TIM_ConfigClockSource+0x1c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0b4      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x186>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a90:	d03e      	beq.n	8002b10 <HAL_TIM_ConfigClockSource+0xd4>
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	f200 8087 	bhi.w	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9e:	f000 8086 	beq.w	8002bae <HAL_TIM_ConfigClockSource+0x172>
 8002aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa6:	d87f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b70      	cmp	r3, #112	@ 0x70
 8002aaa:	d01a      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8002aac:	2b70      	cmp	r3, #112	@ 0x70
 8002aae:	d87b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b60      	cmp	r3, #96	@ 0x60
 8002ab2:	d050      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x11a>
 8002ab4:	2b60      	cmp	r3, #96	@ 0x60
 8002ab6:	d877      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b50      	cmp	r3, #80	@ 0x50
 8002aba:	d03c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xfa>
 8002abc:	2b50      	cmp	r3, #80	@ 0x50
 8002abe:	d873      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d058      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x13a>
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d86f      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d064      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d86b      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d060      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d867      	bhi.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d05c      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d05a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae0:	e062      	b.n	8002ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002af2:	f000 f9c3 	bl	8002e7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
      break;
 8002b0e:	e04f      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b20:	f000 f9ac 	bl	8002e7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b32:	609a      	str	r2, [r3, #8]
      break;
 8002b34:	e03c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f920 	bl	8002d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2150      	movs	r1, #80	@ 0x50
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f979 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e02c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 f93f 	bl	8002de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2160      	movs	r1, #96	@ 0x60
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f969 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e01c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 f900 	bl	8002d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2140      	movs	r1, #64	@ 0x40
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f959 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002b94:	e00c      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f000 f950 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a46      	ldr	r2, [pc, #280]	@ (8002d5c <TIM_Base_SetConfig+0x12c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4e:	d00f      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a43      	ldr	r2, [pc, #268]	@ (8002d60 <TIM_Base_SetConfig+0x130>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a42      	ldr	r2, [pc, #264]	@ (8002d64 <TIM_Base_SetConfig+0x134>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <TIM_Base_SetConfig+0x138>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a40      	ldr	r2, [pc, #256]	@ (8002d6c <TIM_Base_SetConfig+0x13c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <TIM_Base_SetConfig+0x12c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c90:	d027      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a32      	ldr	r2, [pc, #200]	@ (8002d60 <TIM_Base_SetConfig+0x130>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d023      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <TIM_Base_SetConfig+0x134>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a30      	ldr	r2, [pc, #192]	@ (8002d68 <TIM_Base_SetConfig+0x138>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <TIM_Base_SetConfig+0x13c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d017      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <TIM_Base_SetConfig+0x140>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <TIM_Base_SetConfig+0x144>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00f      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d78 <TIM_Base_SetConfig+0x148>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d7c <TIM_Base_SetConfig+0x14c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d80 <TIM_Base_SetConfig+0x150>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a29      	ldr	r2, [pc, #164]	@ (8002d84 <TIM_Base_SetConfig+0x154>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <TIM_Base_SetConfig+0x12c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0xf8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <TIM_Base_SetConfig+0x13c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800
 8002d7c:	40001800 	.word	0x40001800
 8002d80:	40001c00 	.word	0x40001c00
 8002d84:	40002000 	.word	0x40002000

08002d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f023 0210 	bic.w	r2, r3, #16
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	031b      	lsls	r3, r3, #12
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f043 0307 	orr.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	021a      	lsls	r2, r3, #8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e042      	b.n	8002f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fea8 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fea1 	bl	8003c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d121      	bne.n	8002fe2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Transmit_IT+0x26>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e01a      	b.n	8002fe4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	@ 0x21
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fdc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b20      	cmp	r3, #32
 8003008:	d112      	bne.n	8003030 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_UART_Receive_DMA+0x26>
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e00b      	b.n	8003032 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	461a      	mov	r2, r3
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fbc2 	bl	80037b0 <UART_Start_Receive_DMA>
 800302c:	4603      	mov	r3, r0
 800302e:	e000      	b.n	8003032 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0ba      	sub	sp, #232	@ 0xe8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800307a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_UART_IRQHandler+0x66>
 800308e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fd29 	bl	8003af2 <UART_Receive_IT>
      return;
 80030a0:	e25b      	b.n	800355a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80de 	beq.w	8003268 <HAL_UART_IRQHandler+0x22c>
 80030ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80d1 	beq.w	8003268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xae>
 80030d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <HAL_UART_IRQHandler+0xf6>
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f043 0204 	orr.w	r2, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d011      	beq.n	8003162 <HAL_UART_IRQHandler+0x126>
 800313e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800314a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f043 0208 	orr.w	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 81f2 	beq.w	8003550 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_UART_IRQHandler+0x14e>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fcb4 	bl	8003af2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b40      	cmp	r3, #64	@ 0x40
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_UART_IRQHandler+0x17a>
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04f      	beq.n	8003256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fbbc 	bl	8003934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d141      	bne.n	800324e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3314      	adds	r3, #20
 80031f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800320e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1d9      	bne.n	80031ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d013      	beq.n	8003246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	4a7e      	ldr	r2, [pc, #504]	@ (800341c <HAL_UART_IRQHandler+0x3e0>)
 8003224:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f962 	bl	80014f4 <HAL_DMA_Abort_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003240:	4610      	mov	r0, r2
 8003242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e00e      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f99e 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00a      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f99a 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e006      	b.n	8003264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f996 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003262:	e175      	b.n	8003550 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	bf00      	nop
    return;
 8003266:	e173      	b.n	8003550 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 814f 	bne.w	8003510 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8148 	beq.w	8003510 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8141 	beq.w	8003510 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	f040 80b6 	bne.w	8003420 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8145 	beq.w	8003554 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f080 813e 	bcs.w	8003554 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ea:	f000 8088 	beq.w	80033fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800331a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003326:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003332:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800334a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3314      	adds	r3, #20
 800335a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800335e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003362:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003366:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e1      	bne.n	800333a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800339a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800339c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e3      	bne.n	80033bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe f80b 	bl	8001414 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8c1 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800341a:	e09b      	b.n	8003554 <HAL_UART_IRQHandler+0x518>
 800341c:	080039fb 	.word	0x080039fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003428:	b29b      	uxth	r3, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 808e 	beq.w	8003558 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800343c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8089 	beq.w	8003558 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800345c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800346a:	647a      	str	r2, [r7, #68]	@ 0x44
 800346c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e3      	bne.n	8003446 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3314      	adds	r3, #20
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	623b      	str	r3, [r7, #32]
   return(result);
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	330c      	adds	r3, #12
 80034ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0310 	bic.w	r3, r3, #16
 80034da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	330c      	adds	r3, #12
 80034e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034e8:	61fa      	str	r2, [r7, #28]
 80034ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	69b9      	ldr	r1, [r7, #24]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	617b      	str	r3, [r7, #20]
   return(result);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e3      	bne.n	80034c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003502:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f847 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350e:	e023      	b.n	8003558 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_UART_IRQHandler+0x4f4>
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fa7a 	bl	8003a22 <UART_Transmit_IT>
    return;
 800352e:	e014      	b.n	800355a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <HAL_UART_IRQHandler+0x51e>
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 faba 	bl	8003ac2 <UART_EndTransmit_IT>
    return;
 800354e:	e004      	b.n	800355a <HAL_UART_IRQHandler+0x51e>
    return;
 8003550:	bf00      	nop
 8003552:	e002      	b.n	800355a <HAL_UART_IRQHandler+0x51e>
      return;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <HAL_UART_IRQHandler+0x51e>
      return;
 8003558:	bf00      	nop
  }
}
 800355a:	37e8      	adds	r7, #232	@ 0xe8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b09c      	sub	sp, #112	@ 0x70
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d172      	bne.n	80036b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80035d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d2:	2200      	movs	r2, #0
 80035d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80035f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	667b      	str	r3, [r7, #100]	@ 0x64
 8003622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800362a:	647a      	str	r2, [r7, #68]	@ 0x44
 800362c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	623b      	str	r3, [r7, #32]
   return(result);
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003654:	663b      	str	r3, [r7, #96]	@ 0x60
 8003656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800365e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	2b01      	cmp	r3, #1
 8003680:	d119      	bne.n	80036b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	60fb      	str	r3, [r7, #12]
   return(result);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 0310 	bic.w	r3, r3, #16
 8003698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800369a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80036a2:	61fa      	str	r2, [r7, #28]
 80036a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	69b9      	ldr	r1, [r7, #24]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	617b      	str	r3, [r7, #20]
   return(result);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b8:	2200      	movs	r2, #0
 80036ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036c8:	4619      	mov	r1, r3
 80036ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036cc:	f7ff ff66 	bl	800359c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036d0:	e002      	b.n	80036d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80036d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036d4:	f7fc fff4 	bl	80006c0 <HAL_UART_RxCpltCallback>
}
 80036d8:	bf00      	nop
 80036da:	3770      	adds	r7, #112	@ 0x70
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d108      	bne.n	800370e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	4619      	mov	r1, r3
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff48 	bl	800359c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800370c:	e002      	b.n	8003714 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff ff30 	bl	8003574 <HAL_UART_RxHalfCpltCallback>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003738:	2b80      	cmp	r3, #128	@ 0x80
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b21      	cmp	r3, #33	@ 0x21
 800374e:	d108      	bne.n	8003762 <UART_DMAError+0x46>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	f000 f8c1 	bl	80038e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b22      	cmp	r3, #34	@ 0x22
 8003782:	d108      	bne.n	8003796 <UART_DMAError+0x7a>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2200      	movs	r2, #0
 800378e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003790:	68b8      	ldr	r0, [r7, #8]
 8003792:	f000 f8cf 	bl	8003934 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f043 0210 	orr.w	r2, r3, #16
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f7ff fef0 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b098      	sub	sp, #96	@ 0x60
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2222      	movs	r2, #34	@ 0x22
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	4a3e      	ldr	r2, [pc, #248]	@ (80038d8 <UART_Start_Receive_DMA+0x128>)
 80037de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e4:	4a3d      	ldr	r2, [pc, #244]	@ (80038dc <UART_Start_Receive_DMA+0x12c>)
 80037e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ec:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <UART_Start_Receive_DMA+0x130>)
 80037ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	2200      	movs	r2, #0
 80037f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f7fd fda8 	bl	8001364 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d019      	beq.n	8003866 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003852:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003854:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3314      	adds	r3, #20
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	657b      	str	r3, [r7, #84]	@ 0x54
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003886:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800388c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e5      	bne.n	8003866 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3314      	adds	r3, #20
 80038a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	617b      	str	r3, [r7, #20]
   return(result);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80038ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80038bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3760      	adds	r7, #96	@ 0x60
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	080035b5 	.word	0x080035b5
 80038dc:	080036e1 	.word	0x080036e1
 80038e0:	0800371d 	.word	0x0800371d

080038e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	@ 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	61ba      	str	r2, [r7, #24]
 800390e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	613b      	str	r3, [r7, #16]
   return(result);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e5      	bne.n	80038ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003928:	bf00      	nop
 800392a:	3724      	adds	r7, #36	@ 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b095      	sub	sp, #84	@ 0x54
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800395c:	643a      	str	r2, [r7, #64]	@ 0x40
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d119      	bne.n	80039e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039cc:	61ba      	str	r2, [r7, #24]
 80039ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6979      	ldr	r1, [r7, #20]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	613b      	str	r3, [r7, #16]
   return(result);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ee:	bf00      	nop
 80039f0:	3754      	adds	r7, #84	@ 0x54
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fdb7 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b21      	cmp	r3, #33	@ 0x21
 8003a34:	d13e      	bne.n	8003ab4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a3e:	d114      	bne.n	8003a6a <UART_Transmit_IT+0x48>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d110      	bne.n	8003a6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]
 8003a68:	e008      	b.n	8003a7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6211      	str	r1, [r2, #32]
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10f      	bne.n	8003ab0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ad8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fd3c 	bl	8003560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08c      	sub	sp, #48	@ 0x30
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b22      	cmp	r3, #34	@ 0x22
 8003b04:	f040 80ae 	bne.w	8003c64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b10:	d117      	bne.n	8003b42 <UART_Receive_IT+0x50>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	1c9a      	adds	r2, r3, #2
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b40:	e026      	b.n	8003b90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b54:	d007      	beq.n	8003b66 <UART_Receive_IT+0x74>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <UART_Receive_IT+0x82>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e008      	b.n	8003b86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d15d      	bne.n	8003c60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0220 	bic.w	r2, r2, #32
 8003bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d135      	bne.n	8003c56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f023 0310 	bic.w	r3, r3, #16
 8003c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c10:	623a      	str	r2, [r7, #32]
 8003c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	69f9      	ldr	r1, [r7, #28]
 8003c16:	6a3a      	ldr	r2, [r7, #32]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e5      	bne.n	8003bf0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d10a      	bne.n	8003c48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fca4 	bl	800359c <HAL_UARTEx_RxEventCallback>
 8003c54:	e002      	b.n	8003c5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc fd32 	bl	80006c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e002      	b.n	8003c66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3730      	adds	r7, #48	@ 0x30
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c74:	b0c0      	sub	sp, #256	@ 0x100
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	68d9      	ldr	r1, [r3, #12]
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	ea40 0301 	orr.w	r3, r0, r1
 8003c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cc8:	f021 010c 	bic.w	r1, r1, #12
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cea:	6999      	ldr	r1, [r3, #24]
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	ea40 0301 	orr.w	r3, r0, r1
 8003cf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b8f      	ldr	r3, [pc, #572]	@ (8003f3c <UART_SetConfig+0x2cc>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d005      	beq.n	8003d10 <UART_SetConfig+0xa0>
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f40 <UART_SetConfig+0x2d0>)
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d104      	bne.n	8003d1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe fcd0 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 8003d14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d18:	e003      	b.n	8003d22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d1a:	f7fe fcb7 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 8003d1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d2c:	f040 810c 	bne.w	8003f48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	1891      	adds	r1, r2, r2
 8003d48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d4a:	415b      	adcs	r3, r3
 8003d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d52:	4621      	mov	r1, r4
 8003d54:	eb12 0801 	adds.w	r8, r2, r1
 8003d58:	4629      	mov	r1, r5
 8003d5a:	eb43 0901 	adc.w	r9, r3, r1
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d72:	4690      	mov	r8, r2
 8003d74:	4699      	mov	r9, r3
 8003d76:	4623      	mov	r3, r4
 8003d78:	eb18 0303 	adds.w	r3, r8, r3
 8003d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d80:	462b      	mov	r3, r5
 8003d82:	eb49 0303 	adc.w	r3, r9, r3
 8003d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d9e:	460b      	mov	r3, r1
 8003da0:	18db      	adds	r3, r3, r3
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da4:	4613      	mov	r3, r2
 8003da6:	eb42 0303 	adc.w	r3, r2, r3
 8003daa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003db0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003db4:	f7fc fa5c 	bl	8000270 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4b61      	ldr	r3, [pc, #388]	@ (8003f44 <UART_SetConfig+0x2d4>)
 8003dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	011c      	lsls	r4, r3, #4
 8003dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dd8:	4642      	mov	r2, r8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003de0:	415b      	adcs	r3, r3
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003de8:	4641      	mov	r1, r8
 8003dea:	eb12 0a01 	adds.w	sl, r2, r1
 8003dee:	4649      	mov	r1, r9
 8003df0:	eb43 0b01 	adc.w	fp, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e08:	4692      	mov	sl, r2
 8003e0a:	469b      	mov	fp, r3
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e16:	464b      	mov	r3, r9
 8003e18:	eb4b 0303 	adc.w	r3, fp, r3
 8003e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e34:	460b      	mov	r3, r1
 8003e36:	18db      	adds	r3, r3, r3
 8003e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e4a:	f7fc fa11 	bl	8000270 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	4b3b      	ldr	r3, [pc, #236]	@ (8003f44 <UART_SetConfig+0x2d4>)
 8003e56:	fba3 2301 	umull	r2, r3, r3, r1
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2264      	movs	r2, #100	@ 0x64
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	1acb      	subs	r3, r1, r3
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e6a:	4b36      	ldr	r3, [pc, #216]	@ (8003f44 <UART_SetConfig+0x2d4>)
 8003e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e78:	441c      	add	r4, r3
 8003e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	1891      	adds	r1, r2, r2
 8003e92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e94:	415b      	adcs	r3, r3
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	1851      	adds	r1, r2, r1
 8003ea0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	414b      	adcs	r3, r1
 8003ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	00cb      	lsls	r3, r1, #3
 8003eb8:	4651      	mov	r1, sl
 8003eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	00ca      	lsls	r2, r1, #3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4642      	mov	r2, r8
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ee8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003eec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	18db      	adds	r3, r3, r3
 8003ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f06:	f7fc f9b3 	bl	8000270 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <UART_SetConfig+0x2d4>)
 8003f10:	fba3 1302 	umull	r1, r3, r3, r2
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	2164      	movs	r1, #100	@ 0x64
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	3332      	adds	r3, #50	@ 0x32
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <UART_SetConfig+0x2d4>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	f003 0207 	and.w	r2, r3, #7
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4422      	add	r2, r4
 8003f36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f38:	e106      	b.n	8004148 <UART_SetConfig+0x4d8>
 8003f3a:	bf00      	nop
 8003f3c:	40011000 	.word	0x40011000
 8003f40:	40011400 	.word	0x40011400
 8003f44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f5a:	4642      	mov	r2, r8
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	6239      	str	r1, [r7, #32]
 8003f62:	415b      	adcs	r3, r3
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	1854      	adds	r4, r2, r1
 8003f6e:	4649      	mov	r1, r9
 8003f70:	eb43 0501 	adc.w	r5, r3, r1
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	00eb      	lsls	r3, r5, #3
 8003f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f82:	00e2      	lsls	r2, r4, #3
 8003f84:	4614      	mov	r4, r2
 8003f86:	461d      	mov	r5, r3
 8003f88:	4643      	mov	r3, r8
 8003f8a:	18e3      	adds	r3, r4, r3
 8003f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f90:	464b      	mov	r3, r9
 8003f92:	eb45 0303 	adc.w	r3, r5, r3
 8003f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	008b      	lsls	r3, r1, #2
 8003fba:	4621      	mov	r1, r4
 8003fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	008a      	lsls	r2, r1, #2
 8003fc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fc8:	f7fc f952 	bl	8000270 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4b60      	ldr	r3, [pc, #384]	@ (8004154 <UART_SetConfig+0x4e4>)
 8003fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	011c      	lsls	r4, r3, #4
 8003fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fe4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fe8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fec:	4642      	mov	r2, r8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	1891      	adds	r1, r2, r2
 8003ff2:	61b9      	str	r1, [r7, #24]
 8003ff4:	415b      	adcs	r3, r3
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	1851      	adds	r1, r2, r1
 8004000:	6139      	str	r1, [r7, #16]
 8004002:	4649      	mov	r1, r9
 8004004:	414b      	adcs	r3, r1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004014:	4659      	mov	r1, fp
 8004016:	00cb      	lsls	r3, r1, #3
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800401e:	4651      	mov	r1, sl
 8004020:	00ca      	lsls	r2, r1, #3
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	4603      	mov	r3, r0
 8004028:	4642      	mov	r2, r8
 800402a:	189b      	adds	r3, r3, r2
 800402c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004030:	464b      	mov	r3, r9
 8004032:	460a      	mov	r2, r1
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004046:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004054:	4649      	mov	r1, r9
 8004056:	008b      	lsls	r3, r1, #2
 8004058:	4641      	mov	r1, r8
 800405a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405e:	4641      	mov	r1, r8
 8004060:	008a      	lsls	r2, r1, #2
 8004062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004066:	f7fc f903 	bl	8000270 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4611      	mov	r1, r2
 8004070:	4b38      	ldr	r3, [pc, #224]	@ (8004154 <UART_SetConfig+0x4e4>)
 8004072:	fba3 2301 	umull	r2, r3, r3, r1
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2264      	movs	r2, #100	@ 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	1acb      	subs	r3, r1, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	3332      	adds	r3, #50	@ 0x32
 8004084:	4a33      	ldr	r2, [pc, #204]	@ (8004154 <UART_SetConfig+0x4e4>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004090:	441c      	add	r4, r3
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	673b      	str	r3, [r7, #112]	@ 0x70
 800409a:	677a      	str	r2, [r7, #116]	@ 0x74
 800409c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040a0:	4642      	mov	r2, r8
 80040a2:	464b      	mov	r3, r9
 80040a4:	1891      	adds	r1, r2, r2
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	415b      	adcs	r3, r3
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b0:	4641      	mov	r1, r8
 80040b2:	1851      	adds	r1, r2, r1
 80040b4:	6039      	str	r1, [r7, #0]
 80040b6:	4649      	mov	r1, r9
 80040b8:	414b      	adcs	r3, r1
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040c8:	4659      	mov	r1, fp
 80040ca:	00cb      	lsls	r3, r1, #3
 80040cc:	4651      	mov	r1, sl
 80040ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d2:	4651      	mov	r1, sl
 80040d4:	00ca      	lsls	r2, r1, #3
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	4642      	mov	r2, r8
 80040de:	189b      	adds	r3, r3, r2
 80040e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e2:	464b      	mov	r3, r9
 80040e4:	460a      	mov	r2, r1
 80040e6:	eb42 0303 	adc.w	r3, r2, r3
 80040ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80040f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004104:	4649      	mov	r1, r9
 8004106:	008b      	lsls	r3, r1, #2
 8004108:	4641      	mov	r1, r8
 800410a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800410e:	4641      	mov	r1, r8
 8004110:	008a      	lsls	r2, r1, #2
 8004112:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004116:	f7fc f8ab 	bl	8000270 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <UART_SetConfig+0x4e4>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2164      	movs	r1, #100	@ 0x64
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	3332      	adds	r3, #50	@ 0x32
 8004132:	4a08      	ldr	r2, [pc, #32]	@ (8004154 <UART_SetConfig+0x4e4>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4422      	add	r2, r4
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004154:	51eb851f 	.word	0x51eb851f

08004158 <_strtol_l.constprop.0>:
 8004158:	2b24      	cmp	r3, #36	@ 0x24
 800415a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415e:	4686      	mov	lr, r0
 8004160:	4690      	mov	r8, r2
 8004162:	d801      	bhi.n	8004168 <_strtol_l.constprop.0+0x10>
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <_strtol_l.constprop.0+0x1e>
 8004168:	f000 fa00 	bl	800456c <__errno>
 800416c:	2316      	movs	r3, #22
 800416e:	6003      	str	r3, [r0, #0]
 8004170:	2000      	movs	r0, #0
 8004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004176:	4834      	ldr	r0, [pc, #208]	@ (8004248 <_strtol_l.constprop.0+0xf0>)
 8004178:	460d      	mov	r5, r1
 800417a:	462a      	mov	r2, r5
 800417c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004180:	5d06      	ldrb	r6, [r0, r4]
 8004182:	f016 0608 	ands.w	r6, r6, #8
 8004186:	d1f8      	bne.n	800417a <_strtol_l.constprop.0+0x22>
 8004188:	2c2d      	cmp	r4, #45	@ 0x2d
 800418a:	d12d      	bne.n	80041e8 <_strtol_l.constprop.0+0x90>
 800418c:	782c      	ldrb	r4, [r5, #0]
 800418e:	2601      	movs	r6, #1
 8004190:	1c95      	adds	r5, r2, #2
 8004192:	f033 0210 	bics.w	r2, r3, #16
 8004196:	d109      	bne.n	80041ac <_strtol_l.constprop.0+0x54>
 8004198:	2c30      	cmp	r4, #48	@ 0x30
 800419a:	d12a      	bne.n	80041f2 <_strtol_l.constprop.0+0x9a>
 800419c:	782a      	ldrb	r2, [r5, #0]
 800419e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80041a2:	2a58      	cmp	r2, #88	@ 0x58
 80041a4:	d125      	bne.n	80041f2 <_strtol_l.constprop.0+0x9a>
 80041a6:	786c      	ldrb	r4, [r5, #1]
 80041a8:	2310      	movs	r3, #16
 80041aa:	3502      	adds	r5, #2
 80041ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80041b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041b4:	2200      	movs	r2, #0
 80041b6:	fbbc f9f3 	udiv	r9, ip, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80041c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80041c4:	2f09      	cmp	r7, #9
 80041c6:	d81b      	bhi.n	8004200 <_strtol_l.constprop.0+0xa8>
 80041c8:	463c      	mov	r4, r7
 80041ca:	42a3      	cmp	r3, r4
 80041cc:	dd27      	ble.n	800421e <_strtol_l.constprop.0+0xc6>
 80041ce:	1c57      	adds	r7, r2, #1
 80041d0:	d007      	beq.n	80041e2 <_strtol_l.constprop.0+0x8a>
 80041d2:	4581      	cmp	r9, r0
 80041d4:	d320      	bcc.n	8004218 <_strtol_l.constprop.0+0xc0>
 80041d6:	d101      	bne.n	80041dc <_strtol_l.constprop.0+0x84>
 80041d8:	45a2      	cmp	sl, r4
 80041da:	db1d      	blt.n	8004218 <_strtol_l.constprop.0+0xc0>
 80041dc:	fb00 4003 	mla	r0, r0, r3, r4
 80041e0:	2201      	movs	r2, #1
 80041e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041e6:	e7eb      	b.n	80041c0 <_strtol_l.constprop.0+0x68>
 80041e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80041ea:	bf04      	itt	eq
 80041ec:	782c      	ldrbeq	r4, [r5, #0]
 80041ee:	1c95      	addeq	r5, r2, #2
 80041f0:	e7cf      	b.n	8004192 <_strtol_l.constprop.0+0x3a>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1da      	bne.n	80041ac <_strtol_l.constprop.0+0x54>
 80041f6:	2c30      	cmp	r4, #48	@ 0x30
 80041f8:	bf0c      	ite	eq
 80041fa:	2308      	moveq	r3, #8
 80041fc:	230a      	movne	r3, #10
 80041fe:	e7d5      	b.n	80041ac <_strtol_l.constprop.0+0x54>
 8004200:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004204:	2f19      	cmp	r7, #25
 8004206:	d801      	bhi.n	800420c <_strtol_l.constprop.0+0xb4>
 8004208:	3c37      	subs	r4, #55	@ 0x37
 800420a:	e7de      	b.n	80041ca <_strtol_l.constprop.0+0x72>
 800420c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004210:	2f19      	cmp	r7, #25
 8004212:	d804      	bhi.n	800421e <_strtol_l.constprop.0+0xc6>
 8004214:	3c57      	subs	r4, #87	@ 0x57
 8004216:	e7d8      	b.n	80041ca <_strtol_l.constprop.0+0x72>
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
 800421c:	e7e1      	b.n	80041e2 <_strtol_l.constprop.0+0x8a>
 800421e:	1c53      	adds	r3, r2, #1
 8004220:	d108      	bne.n	8004234 <_strtol_l.constprop.0+0xdc>
 8004222:	2322      	movs	r3, #34	@ 0x22
 8004224:	f8ce 3000 	str.w	r3, [lr]
 8004228:	4660      	mov	r0, ip
 800422a:	f1b8 0f00 	cmp.w	r8, #0
 800422e:	d0a0      	beq.n	8004172 <_strtol_l.constprop.0+0x1a>
 8004230:	1e69      	subs	r1, r5, #1
 8004232:	e006      	b.n	8004242 <_strtol_l.constprop.0+0xea>
 8004234:	b106      	cbz	r6, 8004238 <_strtol_l.constprop.0+0xe0>
 8004236:	4240      	negs	r0, r0
 8004238:	f1b8 0f00 	cmp.w	r8, #0
 800423c:	d099      	beq.n	8004172 <_strtol_l.constprop.0+0x1a>
 800423e:	2a00      	cmp	r2, #0
 8004240:	d1f6      	bne.n	8004230 <_strtol_l.constprop.0+0xd8>
 8004242:	f8c8 1000 	str.w	r1, [r8]
 8004246:	e794      	b.n	8004172 <_strtol_l.constprop.0+0x1a>
 8004248:	080054c1 	.word	0x080054c1

0800424c <strtol>:
 800424c:	4613      	mov	r3, r2
 800424e:	460a      	mov	r2, r1
 8004250:	4601      	mov	r1, r0
 8004252:	4802      	ldr	r0, [pc, #8]	@ (800425c <strtol+0x10>)
 8004254:	6800      	ldr	r0, [r0, #0]
 8004256:	f7ff bf7f 	b.w	8004158 <_strtol_l.constprop.0>
 800425a:	bf00      	nop
 800425c:	20000018 	.word	0x20000018

08004260 <std>:
 8004260:	2300      	movs	r3, #0
 8004262:	b510      	push	{r4, lr}
 8004264:	4604      	mov	r4, r0
 8004266:	e9c0 3300 	strd	r3, r3, [r0]
 800426a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800426e:	6083      	str	r3, [r0, #8]
 8004270:	8181      	strh	r1, [r0, #12]
 8004272:	6643      	str	r3, [r0, #100]	@ 0x64
 8004274:	81c2      	strh	r2, [r0, #14]
 8004276:	6183      	str	r3, [r0, #24]
 8004278:	4619      	mov	r1, r3
 800427a:	2208      	movs	r2, #8
 800427c:	305c      	adds	r0, #92	@ 0x5c
 800427e:	f000 f926 	bl	80044ce <memset>
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <std+0x58>)
 8004284:	6263      	str	r3, [r4, #36]	@ 0x24
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <std+0x5c>)
 8004288:	62a3      	str	r3, [r4, #40]	@ 0x28
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <std+0x60>)
 800428c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <std+0x64>)
 8004290:	6323      	str	r3, [r4, #48]	@ 0x30
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <std+0x68>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	429c      	cmp	r4, r3
 8004298:	d006      	beq.n	80042a8 <std+0x48>
 800429a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800429e:	4294      	cmp	r4, r2
 80042a0:	d002      	beq.n	80042a8 <std+0x48>
 80042a2:	33d0      	adds	r3, #208	@ 0xd0
 80042a4:	429c      	cmp	r4, r3
 80042a6:	d105      	bne.n	80042b4 <std+0x54>
 80042a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b0:	f000 b986 	b.w	80045c0 <__retarget_lock_init_recursive>
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	08004449 	.word	0x08004449
 80042bc:	0800446b 	.word	0x0800446b
 80042c0:	080044a3 	.word	0x080044a3
 80042c4:	080044c7 	.word	0x080044c7
 80042c8:	2000023c 	.word	0x2000023c

080042cc <stdio_exit_handler>:
 80042cc:	4a02      	ldr	r2, [pc, #8]	@ (80042d8 <stdio_exit_handler+0xc>)
 80042ce:	4903      	ldr	r1, [pc, #12]	@ (80042dc <stdio_exit_handler+0x10>)
 80042d0:	4803      	ldr	r0, [pc, #12]	@ (80042e0 <stdio_exit_handler+0x14>)
 80042d2:	f000 b869 	b.w	80043a8 <_fwalk_sglue>
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	08005111 	.word	0x08005111
 80042e0:	2000001c 	.word	0x2000001c

080042e4 <cleanup_stdio>:
 80042e4:	6841      	ldr	r1, [r0, #4]
 80042e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <cleanup_stdio+0x34>)
 80042e8:	4299      	cmp	r1, r3
 80042ea:	b510      	push	{r4, lr}
 80042ec:	4604      	mov	r4, r0
 80042ee:	d001      	beq.n	80042f4 <cleanup_stdio+0x10>
 80042f0:	f000 ff0e 	bl	8005110 <_fflush_r>
 80042f4:	68a1      	ldr	r1, [r4, #8]
 80042f6:	4b09      	ldr	r3, [pc, #36]	@ (800431c <cleanup_stdio+0x38>)
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d002      	beq.n	8004302 <cleanup_stdio+0x1e>
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 ff07 	bl	8005110 <_fflush_r>
 8004302:	68e1      	ldr	r1, [r4, #12]
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <cleanup_stdio+0x3c>)
 8004306:	4299      	cmp	r1, r3
 8004308:	d004      	beq.n	8004314 <cleanup_stdio+0x30>
 800430a:	4620      	mov	r0, r4
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f000 befe 	b.w	8005110 <_fflush_r>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	2000023c 	.word	0x2000023c
 800431c:	200002a4 	.word	0x200002a4
 8004320:	2000030c 	.word	0x2000030c

08004324 <global_stdio_init.part.0>:
 8004324:	b510      	push	{r4, lr}
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <global_stdio_init.part.0+0x30>)
 8004328:	4c0b      	ldr	r4, [pc, #44]	@ (8004358 <global_stdio_init.part.0+0x34>)
 800432a:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <global_stdio_init.part.0+0x38>)
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4620      	mov	r0, r4
 8004330:	2200      	movs	r2, #0
 8004332:	2104      	movs	r1, #4
 8004334:	f7ff ff94 	bl	8004260 <std>
 8004338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800433c:	2201      	movs	r2, #1
 800433e:	2109      	movs	r1, #9
 8004340:	f7ff ff8e 	bl	8004260 <std>
 8004344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004348:	2202      	movs	r2, #2
 800434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434e:	2112      	movs	r1, #18
 8004350:	f7ff bf86 	b.w	8004260 <std>
 8004354:	20000374 	.word	0x20000374
 8004358:	2000023c 	.word	0x2000023c
 800435c:	080042cd 	.word	0x080042cd

08004360 <__sfp_lock_acquire>:
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <__sfp_lock_acquire+0x8>)
 8004362:	f000 b92e 	b.w	80045c2 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	2000037d 	.word	0x2000037d

0800436c <__sfp_lock_release>:
 800436c:	4801      	ldr	r0, [pc, #4]	@ (8004374 <__sfp_lock_release+0x8>)
 800436e:	f000 b929 	b.w	80045c4 <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	2000037d 	.word	0x2000037d

08004378 <__sinit>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	f7ff fff0 	bl	8004360 <__sfp_lock_acquire>
 8004380:	6a23      	ldr	r3, [r4, #32]
 8004382:	b11b      	cbz	r3, 800438c <__sinit+0x14>
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f7ff bff0 	b.w	800436c <__sfp_lock_release>
 800438c:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <__sinit+0x28>)
 800438e:	6223      	str	r3, [r4, #32]
 8004390:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <__sinit+0x2c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f5      	bne.n	8004384 <__sinit+0xc>
 8004398:	f7ff ffc4 	bl	8004324 <global_stdio_init.part.0>
 800439c:	e7f2      	b.n	8004384 <__sinit+0xc>
 800439e:	bf00      	nop
 80043a0:	080042e5 	.word	0x080042e5
 80043a4:	20000374 	.word	0x20000374

080043a8 <_fwalk_sglue>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	4607      	mov	r7, r0
 80043ae:	4688      	mov	r8, r1
 80043b0:	4614      	mov	r4, r2
 80043b2:	2600      	movs	r6, #0
 80043b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b8:	f1b9 0901 	subs.w	r9, r9, #1
 80043bc:	d505      	bpl.n	80043ca <_fwalk_sglue+0x22>
 80043be:	6824      	ldr	r4, [r4, #0]
 80043c0:	2c00      	cmp	r4, #0
 80043c2:	d1f7      	bne.n	80043b4 <_fwalk_sglue+0xc>
 80043c4:	4630      	mov	r0, r6
 80043c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d907      	bls.n	80043e0 <_fwalk_sglue+0x38>
 80043d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d4:	3301      	adds	r3, #1
 80043d6:	d003      	beq.n	80043e0 <_fwalk_sglue+0x38>
 80043d8:	4629      	mov	r1, r5
 80043da:	4638      	mov	r0, r7
 80043dc:	47c0      	blx	r8
 80043de:	4306      	orrs	r6, r0
 80043e0:	3568      	adds	r5, #104	@ 0x68
 80043e2:	e7e9      	b.n	80043b8 <_fwalk_sglue+0x10>

080043e4 <iprintf>:
 80043e4:	b40f      	push	{r0, r1, r2, r3}
 80043e6:	b507      	push	{r0, r1, r2, lr}
 80043e8:	4906      	ldr	r1, [pc, #24]	@ (8004404 <iprintf+0x20>)
 80043ea:	ab04      	add	r3, sp, #16
 80043ec:	6808      	ldr	r0, [r1, #0]
 80043ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f2:	6881      	ldr	r1, [r0, #8]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f000 fb61 	bl	8004abc <_vfiprintf_r>
 80043fa:	b003      	add	sp, #12
 80043fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004400:	b004      	add	sp, #16
 8004402:	4770      	bx	lr
 8004404:	20000018 	.word	0x20000018

08004408 <siprintf>:
 8004408:	b40e      	push	{r1, r2, r3}
 800440a:	b500      	push	{lr}
 800440c:	b09c      	sub	sp, #112	@ 0x70
 800440e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004410:	9002      	str	r0, [sp, #8]
 8004412:	9006      	str	r0, [sp, #24]
 8004414:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004418:	4809      	ldr	r0, [pc, #36]	@ (8004440 <siprintf+0x38>)
 800441a:	9107      	str	r1, [sp, #28]
 800441c:	9104      	str	r1, [sp, #16]
 800441e:	4909      	ldr	r1, [pc, #36]	@ (8004444 <siprintf+0x3c>)
 8004420:	f853 2b04 	ldr.w	r2, [r3], #4
 8004424:	9105      	str	r1, [sp, #20]
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	a902      	add	r1, sp, #8
 800442c:	f000 fa20 	bl	8004870 <_svfiprintf_r>
 8004430:	9b02      	ldr	r3, [sp, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	b01c      	add	sp, #112	@ 0x70
 8004438:	f85d eb04 	ldr.w	lr, [sp], #4
 800443c:	b003      	add	sp, #12
 800443e:	4770      	bx	lr
 8004440:	20000018 	.word	0x20000018
 8004444:	ffff0208 	.word	0xffff0208

08004448 <__sread>:
 8004448:	b510      	push	{r4, lr}
 800444a:	460c      	mov	r4, r1
 800444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004450:	f000 f868 	bl	8004524 <_read_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	bfab      	itete	ge
 8004458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800445a:	89a3      	ldrhlt	r3, [r4, #12]
 800445c:	181b      	addge	r3, r3, r0
 800445e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004462:	bfac      	ite	ge
 8004464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004466:	81a3      	strhlt	r3, [r4, #12]
 8004468:	bd10      	pop	{r4, pc}

0800446a <__swrite>:
 800446a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446e:	461f      	mov	r7, r3
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	05db      	lsls	r3, r3, #23
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4616      	mov	r6, r2
 800447a:	d505      	bpl.n	8004488 <__swrite+0x1e>
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	2302      	movs	r3, #2
 8004482:	2200      	movs	r2, #0
 8004484:	f000 f83c 	bl	8004500 <_lseek_r>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800448e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	4628      	mov	r0, r5
 800449a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449e:	f000 b853 	b.w	8004548 <_write_r>

080044a2 <__sseek>:
 80044a2:	b510      	push	{r4, lr}
 80044a4:	460c      	mov	r4, r1
 80044a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044aa:	f000 f829 	bl	8004500 <_lseek_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	bf15      	itete	ne
 80044b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044be:	81a3      	strheq	r3, [r4, #12]
 80044c0:	bf18      	it	ne
 80044c2:	81a3      	strhne	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__sclose>:
 80044c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ca:	f000 b809 	b.w	80044e0 <_close_r>

080044ce <memset>:
 80044ce:	4402      	add	r2, r0
 80044d0:	4603      	mov	r3, r0
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d100      	bne.n	80044d8 <memset+0xa>
 80044d6:	4770      	bx	lr
 80044d8:	f803 1b01 	strb.w	r1, [r3], #1
 80044dc:	e7f9      	b.n	80044d2 <memset+0x4>
	...

080044e0 <_close_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d06      	ldr	r5, [pc, #24]	@ (80044fc <_close_r+0x1c>)
 80044e4:	2300      	movs	r3, #0
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fa97 	bl	8000a1e <_close>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_close_r+0x1a>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_close_r+0x1a>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	20000378 	.word	0x20000378

08004500 <_lseek_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	@ (8004520 <_lseek_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc faac 	bl	8000a6c <_lseek>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_lseek_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_lseek_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20000378 	.word	0x20000378

08004524 <_read_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	@ (8004544 <_read_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fc fa56 	bl	80009e4 <_read>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_read_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_read_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20000378 	.word	0x20000378

08004548 <_write_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	@ (8004568 <_write_r+0x20>)
 800454c:	4604      	mov	r4, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc f96c 	bl	8000834 <_write>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_write_r+0x1e>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_write_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000378 	.word	0x20000378

0800456c <__errno>:
 800456c:	4b01      	ldr	r3, [pc, #4]	@ (8004574 <__errno+0x8>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000018 	.word	0x20000018

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4d0d      	ldr	r5, [pc, #52]	@ (80045b0 <__libc_init_array+0x38>)
 800457c:	4c0d      	ldr	r4, [pc, #52]	@ (80045b4 <__libc_init_array+0x3c>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	2600      	movs	r6, #0
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	4d0b      	ldr	r5, [pc, #44]	@ (80045b8 <__libc_init_array+0x40>)
 800458a:	4c0c      	ldr	r4, [pc, #48]	@ (80045bc <__libc_init_array+0x44>)
 800458c:	f000 ff6e 	bl	800546c <_init>
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	2600      	movs	r6, #0
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	080055fc 	.word	0x080055fc
 80045b4:	080055fc 	.word	0x080055fc
 80045b8:	080055fc 	.word	0x080055fc
 80045bc:	08005600 	.word	0x08005600

080045c0 <__retarget_lock_init_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_acquire_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <__retarget_lock_release_recursive>:
 80045c4:	4770      	bx	lr
	...

080045c8 <_free_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4605      	mov	r5, r0
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d041      	beq.n	8004654 <_free_r+0x8c>
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f0c      	subs	r4, r1, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	18e4      	addlt	r4, r4, r3
 80045dc:	f000 f8e0 	bl	80047a0 <__malloc_lock>
 80045e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <_free_r+0x90>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	b933      	cbnz	r3, 80045f4 <_free_r+0x2c>
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	6014      	str	r4, [r2, #0]
 80045ea:	4628      	mov	r0, r5
 80045ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f0:	f000 b8dc 	b.w	80047ac <__malloc_unlock>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d908      	bls.n	800460a <_free_r+0x42>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	1821      	adds	r1, r4, r0
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf01      	itttt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	1809      	addeq	r1, r1, r0
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	e7ed      	b.n	80045e6 <_free_r+0x1e>
 800460a:	461a      	mov	r2, r3
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b10b      	cbz	r3, 8004614 <_free_r+0x4c>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d9fa      	bls.n	800460a <_free_r+0x42>
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	1850      	adds	r0, r2, r1
 8004618:	42a0      	cmp	r0, r4
 800461a:	d10b      	bne.n	8004634 <_free_r+0x6c>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	4401      	add	r1, r0
 8004620:	1850      	adds	r0, r2, r1
 8004622:	4283      	cmp	r3, r0
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	d1e0      	bne.n	80045ea <_free_r+0x22>
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	6053      	str	r3, [r2, #4]
 800462e:	4408      	add	r0, r1
 8004630:	6010      	str	r0, [r2, #0]
 8004632:	e7da      	b.n	80045ea <_free_r+0x22>
 8004634:	d902      	bls.n	800463c <_free_r+0x74>
 8004636:	230c      	movs	r3, #12
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	e7d6      	b.n	80045ea <_free_r+0x22>
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	1821      	adds	r1, r4, r0
 8004640:	428b      	cmp	r3, r1
 8004642:	bf04      	itt	eq
 8004644:	6819      	ldreq	r1, [r3, #0]
 8004646:	685b      	ldreq	r3, [r3, #4]
 8004648:	6063      	str	r3, [r4, #4]
 800464a:	bf04      	itt	eq
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6054      	str	r4, [r2, #4]
 8004652:	e7ca      	b.n	80045ea <_free_r+0x22>
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	20000384 	.word	0x20000384

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0f      	ldr	r6, [pc, #60]	@ (800469c <sbrk_aligned+0x40>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 fe28 	bl	80052bc <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 fe23 	bl	80052bc <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d103      	bne.n	8004682 <sbrk_aligned+0x26>
 800467a:	f04f 34ff 	mov.w	r4, #4294967295
 800467e:	4620      	mov	r0, r4
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	1cc4      	adds	r4, r0, #3
 8004684:	f024 0403 	bic.w	r4, r4, #3
 8004688:	42a0      	cmp	r0, r4
 800468a:	d0f8      	beq.n	800467e <sbrk_aligned+0x22>
 800468c:	1a21      	subs	r1, r4, r0
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fe14 	bl	80052bc <_sbrk_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d1f2      	bne.n	800467e <sbrk_aligned+0x22>
 8004698:	e7ef      	b.n	800467a <sbrk_aligned+0x1e>
 800469a:	bf00      	nop
 800469c:	20000380 	.word	0x20000380

080046a0 <_malloc_r>:
 80046a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a4:	1ccd      	adds	r5, r1, #3
 80046a6:	f025 0503 	bic.w	r5, r5, #3
 80046aa:	3508      	adds	r5, #8
 80046ac:	2d0c      	cmp	r5, #12
 80046ae:	bf38      	it	cc
 80046b0:	250c      	movcc	r5, #12
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	4606      	mov	r6, r0
 80046b6:	db01      	blt.n	80046bc <_malloc_r+0x1c>
 80046b8:	42a9      	cmp	r1, r5
 80046ba:	d904      	bls.n	80046c6 <_malloc_r+0x26>
 80046bc:	230c      	movs	r3, #12
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	2000      	movs	r0, #0
 80046c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800479c <_malloc_r+0xfc>
 80046ca:	f000 f869 	bl	80047a0 <__malloc_lock>
 80046ce:	f8d8 3000 	ldr.w	r3, [r8]
 80046d2:	461c      	mov	r4, r3
 80046d4:	bb44      	cbnz	r4, 8004728 <_malloc_r+0x88>
 80046d6:	4629      	mov	r1, r5
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff ffbf 	bl	800465c <sbrk_aligned>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	4604      	mov	r4, r0
 80046e2:	d158      	bne.n	8004796 <_malloc_r+0xf6>
 80046e4:	f8d8 4000 	ldr.w	r4, [r8]
 80046e8:	4627      	mov	r7, r4
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	d143      	bne.n	8004776 <_malloc_r+0xd6>
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	d04b      	beq.n	800478a <_malloc_r+0xea>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	4639      	mov	r1, r7
 80046f6:	4630      	mov	r0, r6
 80046f8:	eb04 0903 	add.w	r9, r4, r3
 80046fc:	f000 fdde 	bl	80052bc <_sbrk_r>
 8004700:	4581      	cmp	r9, r0
 8004702:	d142      	bne.n	800478a <_malloc_r+0xea>
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	1a6d      	subs	r5, r5, r1
 8004708:	4629      	mov	r1, r5
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff ffa6 	bl	800465c <sbrk_aligned>
 8004710:	3001      	adds	r0, #1
 8004712:	d03a      	beq.n	800478a <_malloc_r+0xea>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	442b      	add	r3, r5
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	f8d8 3000 	ldr.w	r3, [r8]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	bb62      	cbnz	r2, 800477c <_malloc_r+0xdc>
 8004722:	f8c8 7000 	str.w	r7, [r8]
 8004726:	e00f      	b.n	8004748 <_malloc_r+0xa8>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	1b52      	subs	r2, r2, r5
 800472c:	d420      	bmi.n	8004770 <_malloc_r+0xd0>
 800472e:	2a0b      	cmp	r2, #11
 8004730:	d917      	bls.n	8004762 <_malloc_r+0xc2>
 8004732:	1961      	adds	r1, r4, r5
 8004734:	42a3      	cmp	r3, r4
 8004736:	6025      	str	r5, [r4, #0]
 8004738:	bf18      	it	ne
 800473a:	6059      	strne	r1, [r3, #4]
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	bf08      	it	eq
 8004740:	f8c8 1000 	streq.w	r1, [r8]
 8004744:	5162      	str	r2, [r4, r5]
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f82f 	bl	80047ac <__malloc_unlock>
 800474e:	f104 000b 	add.w	r0, r4, #11
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	f020 0007 	bic.w	r0, r0, #7
 8004758:	1ac2      	subs	r2, r0, r3
 800475a:	bf1c      	itt	ne
 800475c:	1a1b      	subne	r3, r3, r0
 800475e:	50a3      	strne	r3, [r4, r2]
 8004760:	e7af      	b.n	80046c2 <_malloc_r+0x22>
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	42a3      	cmp	r3, r4
 8004766:	bf0c      	ite	eq
 8004768:	f8c8 2000 	streq.w	r2, [r8]
 800476c:	605a      	strne	r2, [r3, #4]
 800476e:	e7eb      	b.n	8004748 <_malloc_r+0xa8>
 8004770:	4623      	mov	r3, r4
 8004772:	6864      	ldr	r4, [r4, #4]
 8004774:	e7ae      	b.n	80046d4 <_malloc_r+0x34>
 8004776:	463c      	mov	r4, r7
 8004778:	687f      	ldr	r7, [r7, #4]
 800477a:	e7b6      	b.n	80046ea <_malloc_r+0x4a>
 800477c:	461a      	mov	r2, r3
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	42a3      	cmp	r3, r4
 8004782:	d1fb      	bne.n	800477c <_malloc_r+0xdc>
 8004784:	2300      	movs	r3, #0
 8004786:	6053      	str	r3, [r2, #4]
 8004788:	e7de      	b.n	8004748 <_malloc_r+0xa8>
 800478a:	230c      	movs	r3, #12
 800478c:	6033      	str	r3, [r6, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	f000 f80c 	bl	80047ac <__malloc_unlock>
 8004794:	e794      	b.n	80046c0 <_malloc_r+0x20>
 8004796:	6005      	str	r5, [r0, #0]
 8004798:	e7d6      	b.n	8004748 <_malloc_r+0xa8>
 800479a:	bf00      	nop
 800479c:	20000384 	.word	0x20000384

080047a0 <__malloc_lock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	@ (80047a8 <__malloc_lock+0x8>)
 80047a2:	f7ff bf0e 	b.w	80045c2 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	2000037c 	.word	0x2000037c

080047ac <__malloc_unlock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	@ (80047b4 <__malloc_unlock+0x8>)
 80047ae:	f7ff bf09 	b.w	80045c4 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	2000037c 	.word	0x2000037c

080047b8 <__ssputs_r>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	688e      	ldr	r6, [r1, #8]
 80047be:	461f      	mov	r7, r3
 80047c0:	42be      	cmp	r6, r7
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	4682      	mov	sl, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4690      	mov	r8, r2
 80047ca:	d82d      	bhi.n	8004828 <__ssputs_r+0x70>
 80047cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047d4:	d026      	beq.n	8004824 <__ssputs_r+0x6c>
 80047d6:	6965      	ldr	r5, [r4, #20]
 80047d8:	6909      	ldr	r1, [r1, #16]
 80047da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047de:	eba3 0901 	sub.w	r9, r3, r1
 80047e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e6:	1c7b      	adds	r3, r7, #1
 80047e8:	444b      	add	r3, r9
 80047ea:	106d      	asrs	r5, r5, #1
 80047ec:	429d      	cmp	r5, r3
 80047ee:	bf38      	it	cc
 80047f0:	461d      	movcc	r5, r3
 80047f2:	0553      	lsls	r3, r2, #21
 80047f4:	d527      	bpl.n	8004846 <__ssputs_r+0x8e>
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7ff ff52 	bl	80046a0 <_malloc_r>
 80047fc:	4606      	mov	r6, r0
 80047fe:	b360      	cbz	r0, 800485a <__ssputs_r+0xa2>
 8004800:	6921      	ldr	r1, [r4, #16]
 8004802:	464a      	mov	r2, r9
 8004804:	f000 fd6a 	bl	80052dc <memcpy>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6126      	str	r6, [r4, #16]
 8004816:	6165      	str	r5, [r4, #20]
 8004818:	444e      	add	r6, r9
 800481a:	eba5 0509 	sub.w	r5, r5, r9
 800481e:	6026      	str	r6, [r4, #0]
 8004820:	60a5      	str	r5, [r4, #8]
 8004822:	463e      	mov	r6, r7
 8004824:	42be      	cmp	r6, r7
 8004826:	d900      	bls.n	800482a <__ssputs_r+0x72>
 8004828:	463e      	mov	r6, r7
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	4632      	mov	r2, r6
 800482e:	4641      	mov	r1, r8
 8004830:	f000 fd2a 	bl	8005288 <memmove>
 8004834:	68a3      	ldr	r3, [r4, #8]
 8004836:	1b9b      	subs	r3, r3, r6
 8004838:	60a3      	str	r3, [r4, #8]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	4433      	add	r3, r6
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	2000      	movs	r0, #0
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	462a      	mov	r2, r5
 8004848:	f000 fd56 	bl	80052f8 <_realloc_r>
 800484c:	4606      	mov	r6, r0
 800484e:	2800      	cmp	r0, #0
 8004850:	d1e0      	bne.n	8004814 <__ssputs_r+0x5c>
 8004852:	6921      	ldr	r1, [r4, #16]
 8004854:	4650      	mov	r0, sl
 8004856:	f7ff feb7 	bl	80045c8 <_free_r>
 800485a:	230c      	movs	r3, #12
 800485c:	f8ca 3000 	str.w	r3, [sl]
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	e7e9      	b.n	8004842 <__ssputs_r+0x8a>
	...

08004870 <_svfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	4698      	mov	r8, r3
 8004876:	898b      	ldrh	r3, [r1, #12]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	b09d      	sub	sp, #116	@ 0x74
 800487c:	4607      	mov	r7, r0
 800487e:	460d      	mov	r5, r1
 8004880:	4614      	mov	r4, r2
 8004882:	d510      	bpl.n	80048a6 <_svfiprintf_r+0x36>
 8004884:	690b      	ldr	r3, [r1, #16]
 8004886:	b973      	cbnz	r3, 80048a6 <_svfiprintf_r+0x36>
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	f7ff ff09 	bl	80046a0 <_malloc_r>
 800488e:	6028      	str	r0, [r5, #0]
 8004890:	6128      	str	r0, [r5, #16]
 8004892:	b930      	cbnz	r0, 80048a2 <_svfiprintf_r+0x32>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b01d      	add	sp, #116	@ 0x74
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	2340      	movs	r3, #64	@ 0x40
 80048a4:	616b      	str	r3, [r5, #20]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048aa:	2320      	movs	r3, #32
 80048ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048b4:	2330      	movs	r3, #48	@ 0x30
 80048b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a54 <_svfiprintf_r+0x1e4>
 80048ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048be:	f04f 0901 	mov.w	r9, #1
 80048c2:	4623      	mov	r3, r4
 80048c4:	469a      	mov	sl, r3
 80048c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ca:	b10a      	cbz	r2, 80048d0 <_svfiprintf_r+0x60>
 80048cc:	2a25      	cmp	r2, #37	@ 0x25
 80048ce:	d1f9      	bne.n	80048c4 <_svfiprintf_r+0x54>
 80048d0:	ebba 0b04 	subs.w	fp, sl, r4
 80048d4:	d00b      	beq.n	80048ee <_svfiprintf_r+0x7e>
 80048d6:	465b      	mov	r3, fp
 80048d8:	4622      	mov	r2, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	4638      	mov	r0, r7
 80048de:	f7ff ff6b 	bl	80047b8 <__ssputs_r>
 80048e2:	3001      	adds	r0, #1
 80048e4:	f000 80a7 	beq.w	8004a36 <_svfiprintf_r+0x1c6>
 80048e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048ea:	445a      	add	r2, fp
 80048ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80048ee:	f89a 3000 	ldrb.w	r3, [sl]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 809f 	beq.w	8004a36 <_svfiprintf_r+0x1c6>
 80048f8:	2300      	movs	r3, #0
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004902:	f10a 0a01 	add.w	sl, sl, #1
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	9307      	str	r3, [sp, #28]
 800490a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800490e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004910:	4654      	mov	r4, sl
 8004912:	2205      	movs	r2, #5
 8004914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004918:	484e      	ldr	r0, [pc, #312]	@ (8004a54 <_svfiprintf_r+0x1e4>)
 800491a:	f7fb fc59 	bl	80001d0 <memchr>
 800491e:	9a04      	ldr	r2, [sp, #16]
 8004920:	b9d8      	cbnz	r0, 800495a <_svfiprintf_r+0xea>
 8004922:	06d0      	lsls	r0, r2, #27
 8004924:	bf44      	itt	mi
 8004926:	2320      	movmi	r3, #32
 8004928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800492c:	0711      	lsls	r1, r2, #28
 800492e:	bf44      	itt	mi
 8004930:	232b      	movmi	r3, #43	@ 0x2b
 8004932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004936:	f89a 3000 	ldrb.w	r3, [sl]
 800493a:	2b2a      	cmp	r3, #42	@ 0x2a
 800493c:	d015      	beq.n	800496a <_svfiprintf_r+0xfa>
 800493e:	9a07      	ldr	r2, [sp, #28]
 8004940:	4654      	mov	r4, sl
 8004942:	2000      	movs	r0, #0
 8004944:	f04f 0c0a 	mov.w	ip, #10
 8004948:	4621      	mov	r1, r4
 800494a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800494e:	3b30      	subs	r3, #48	@ 0x30
 8004950:	2b09      	cmp	r3, #9
 8004952:	d94b      	bls.n	80049ec <_svfiprintf_r+0x17c>
 8004954:	b1b0      	cbz	r0, 8004984 <_svfiprintf_r+0x114>
 8004956:	9207      	str	r2, [sp, #28]
 8004958:	e014      	b.n	8004984 <_svfiprintf_r+0x114>
 800495a:	eba0 0308 	sub.w	r3, r0, r8
 800495e:	fa09 f303 	lsl.w	r3, r9, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	46a2      	mov	sl, r4
 8004968:	e7d2      	b.n	8004910 <_svfiprintf_r+0xa0>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	9103      	str	r1, [sp, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfbb      	ittet	lt
 8004976:	425b      	neglt	r3, r3
 8004978:	f042 0202 	orrlt.w	r2, r2, #2
 800497c:	9307      	strge	r3, [sp, #28]
 800497e:	9307      	strlt	r3, [sp, #28]
 8004980:	bfb8      	it	lt
 8004982:	9204      	strlt	r2, [sp, #16]
 8004984:	7823      	ldrb	r3, [r4, #0]
 8004986:	2b2e      	cmp	r3, #46	@ 0x2e
 8004988:	d10a      	bne.n	80049a0 <_svfiprintf_r+0x130>
 800498a:	7863      	ldrb	r3, [r4, #1]
 800498c:	2b2a      	cmp	r3, #42	@ 0x2a
 800498e:	d132      	bne.n	80049f6 <_svfiprintf_r+0x186>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	1d1a      	adds	r2, r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	9203      	str	r2, [sp, #12]
 8004998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800499c:	3402      	adds	r4, #2
 800499e:	9305      	str	r3, [sp, #20]
 80049a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a64 <_svfiprintf_r+0x1f4>
 80049a4:	7821      	ldrb	r1, [r4, #0]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4650      	mov	r0, sl
 80049aa:	f7fb fc11 	bl	80001d0 <memchr>
 80049ae:	b138      	cbz	r0, 80049c0 <_svfiprintf_r+0x150>
 80049b0:	9b04      	ldr	r3, [sp, #16]
 80049b2:	eba0 000a 	sub.w	r0, r0, sl
 80049b6:	2240      	movs	r2, #64	@ 0x40
 80049b8:	4082      	lsls	r2, r0
 80049ba:	4313      	orrs	r3, r2
 80049bc:	3401      	adds	r4, #1
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c4:	4824      	ldr	r0, [pc, #144]	@ (8004a58 <_svfiprintf_r+0x1e8>)
 80049c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049ca:	2206      	movs	r2, #6
 80049cc:	f7fb fc00 	bl	80001d0 <memchr>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d036      	beq.n	8004a42 <_svfiprintf_r+0x1d2>
 80049d4:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <_svfiprintf_r+0x1ec>)
 80049d6:	bb1b      	cbnz	r3, 8004a20 <_svfiprintf_r+0x1b0>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	3307      	adds	r3, #7
 80049dc:	f023 0307 	bic.w	r3, r3, #7
 80049e0:	3308      	adds	r3, #8
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e6:	4433      	add	r3, r6
 80049e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ea:	e76a      	b.n	80048c2 <_svfiprintf_r+0x52>
 80049ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f0:	460c      	mov	r4, r1
 80049f2:	2001      	movs	r0, #1
 80049f4:	e7a8      	b.n	8004948 <_svfiprintf_r+0xd8>
 80049f6:	2300      	movs	r3, #0
 80049f8:	3401      	adds	r4, #1
 80049fa:	9305      	str	r3, [sp, #20]
 80049fc:	4619      	mov	r1, r3
 80049fe:	f04f 0c0a 	mov.w	ip, #10
 8004a02:	4620      	mov	r0, r4
 8004a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a08:	3a30      	subs	r2, #48	@ 0x30
 8004a0a:	2a09      	cmp	r2, #9
 8004a0c:	d903      	bls.n	8004a16 <_svfiprintf_r+0x1a6>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0c6      	beq.n	80049a0 <_svfiprintf_r+0x130>
 8004a12:	9105      	str	r1, [sp, #20]
 8004a14:	e7c4      	b.n	80049a0 <_svfiprintf_r+0x130>
 8004a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e7f0      	b.n	8004a02 <_svfiprintf_r+0x192>
 8004a20:	ab03      	add	r3, sp, #12
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	462a      	mov	r2, r5
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <_svfiprintf_r+0x1f0>)
 8004a28:	a904      	add	r1, sp, #16
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f3af 8000 	nop.w
 8004a30:	1c42      	adds	r2, r0, #1
 8004a32:	4606      	mov	r6, r0
 8004a34:	d1d6      	bne.n	80049e4 <_svfiprintf_r+0x174>
 8004a36:	89ab      	ldrh	r3, [r5, #12]
 8004a38:	065b      	lsls	r3, r3, #25
 8004a3a:	f53f af2d 	bmi.w	8004898 <_svfiprintf_r+0x28>
 8004a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a40:	e72c      	b.n	800489c <_svfiprintf_r+0x2c>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <_svfiprintf_r+0x1f0>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f000 f9bb 	bl	8004dc8 <_printf_i>
 8004a52:	e7ed      	b.n	8004a30 <_svfiprintf_r+0x1c0>
 8004a54:	080055c1 	.word	0x080055c1
 8004a58:	080055cb 	.word	0x080055cb
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	080047b9 	.word	0x080047b9
 8004a64:	080055c7 	.word	0x080055c7

08004a68 <__sfputc_r>:
 8004a68:	6893      	ldr	r3, [r2, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	b410      	push	{r4}
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	da08      	bge.n	8004a86 <__sfputc_r+0x1e>
 8004a74:	6994      	ldr	r4, [r2, #24]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	db01      	blt.n	8004a7e <__sfputc_r+0x16>
 8004a7a:	290a      	cmp	r1, #10
 8004a7c:	d103      	bne.n	8004a86 <__sfputc_r+0x1e>
 8004a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a82:	f000 bb6d 	b.w	8005160 <__swbuf_r>
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	1c58      	adds	r0, r3, #1
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	7019      	strb	r1, [r3, #0]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <__sfputs_r>:
 8004a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a98:	4606      	mov	r6, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	18d5      	adds	r5, r2, r3
 8004aa0:	42ac      	cmp	r4, r5
 8004aa2:	d101      	bne.n	8004aa8 <__sfputs_r+0x12>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e007      	b.n	8004ab8 <__sfputs_r+0x22>
 8004aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aac:	463a      	mov	r2, r7
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffda 	bl	8004a68 <__sfputc_r>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d1f3      	bne.n	8004aa0 <__sfputs_r+0xa>
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004abc <_vfiprintf_r>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	b09d      	sub	sp, #116	@ 0x74
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4698      	mov	r8, r3
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_vfiprintf_r+0x18>
 8004acc:	6a03      	ldr	r3, [r0, #32]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x18>
 8004ad0:	f7ff fc52 	bl	8004378 <__sinit>
 8004ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ad6:	07d9      	lsls	r1, r3, #31
 8004ad8:	d405      	bmi.n	8004ae6 <_vfiprintf_r+0x2a>
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d402      	bmi.n	8004ae6 <_vfiprintf_r+0x2a>
 8004ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ae2:	f7ff fd6e 	bl	80045c2 <__retarget_lock_acquire_recursive>
 8004ae6:	89ab      	ldrh	r3, [r5, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	d501      	bpl.n	8004af0 <_vfiprintf_r+0x34>
 8004aec:	692b      	ldr	r3, [r5, #16]
 8004aee:	b99b      	cbnz	r3, 8004b18 <_vfiprintf_r+0x5c>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4630      	mov	r0, r6
 8004af4:	f000 fb72 	bl	80051dc <__swsetup_r>
 8004af8:	b170      	cbz	r0, 8004b18 <_vfiprintf_r+0x5c>
 8004afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004afc:	07dc      	lsls	r4, r3, #31
 8004afe:	d504      	bpl.n	8004b0a <_vfiprintf_r+0x4e>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295
 8004b04:	b01d      	add	sp, #116	@ 0x74
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	0598      	lsls	r0, r3, #22
 8004b0e:	d4f7      	bmi.n	8004b00 <_vfiprintf_r+0x44>
 8004b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b12:	f7ff fd57 	bl	80045c4 <__retarget_lock_release_recursive>
 8004b16:	e7f3      	b.n	8004b00 <_vfiprintf_r+0x44>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b26:	2330      	movs	r3, #48	@ 0x30
 8004b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004cd8 <_vfiprintf_r+0x21c>
 8004b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b30:	f04f 0901 	mov.w	r9, #1
 8004b34:	4623      	mov	r3, r4
 8004b36:	469a      	mov	sl, r3
 8004b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b3c:	b10a      	cbz	r2, 8004b42 <_vfiprintf_r+0x86>
 8004b3e:	2a25      	cmp	r2, #37	@ 0x25
 8004b40:	d1f9      	bne.n	8004b36 <_vfiprintf_r+0x7a>
 8004b42:	ebba 0b04 	subs.w	fp, sl, r4
 8004b46:	d00b      	beq.n	8004b60 <_vfiprintf_r+0xa4>
 8004b48:	465b      	mov	r3, fp
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f7ff ffa1 	bl	8004a96 <__sfputs_r>
 8004b54:	3001      	adds	r0, #1
 8004b56:	f000 80a7 	beq.w	8004ca8 <_vfiprintf_r+0x1ec>
 8004b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b5c:	445a      	add	r2, fp
 8004b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b60:	f89a 3000 	ldrb.w	r3, [sl]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 809f 	beq.w	8004ca8 <_vfiprintf_r+0x1ec>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b74:	f10a 0a01 	add.w	sl, sl, #1
 8004b78:	9304      	str	r3, [sp, #16]
 8004b7a:	9307      	str	r3, [sp, #28]
 8004b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b82:	4654      	mov	r4, sl
 8004b84:	2205      	movs	r2, #5
 8004b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8a:	4853      	ldr	r0, [pc, #332]	@ (8004cd8 <_vfiprintf_r+0x21c>)
 8004b8c:	f7fb fb20 	bl	80001d0 <memchr>
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	b9d8      	cbnz	r0, 8004bcc <_vfiprintf_r+0x110>
 8004b94:	06d1      	lsls	r1, r2, #27
 8004b96:	bf44      	itt	mi
 8004b98:	2320      	movmi	r3, #32
 8004b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b9e:	0713      	lsls	r3, r2, #28
 8004ba0:	bf44      	itt	mi
 8004ba2:	232b      	movmi	r3, #43	@ 0x2b
 8004ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bae:	d015      	beq.n	8004bdc <_vfiprintf_r+0x120>
 8004bb0:	9a07      	ldr	r2, [sp, #28]
 8004bb2:	4654      	mov	r4, sl
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f04f 0c0a 	mov.w	ip, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bc0:	3b30      	subs	r3, #48	@ 0x30
 8004bc2:	2b09      	cmp	r3, #9
 8004bc4:	d94b      	bls.n	8004c5e <_vfiprintf_r+0x1a2>
 8004bc6:	b1b0      	cbz	r0, 8004bf6 <_vfiprintf_r+0x13a>
 8004bc8:	9207      	str	r2, [sp, #28]
 8004bca:	e014      	b.n	8004bf6 <_vfiprintf_r+0x13a>
 8004bcc:	eba0 0308 	sub.w	r3, r0, r8
 8004bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	46a2      	mov	sl, r4
 8004bda:	e7d2      	b.n	8004b82 <_vfiprintf_r+0xc6>
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	1d19      	adds	r1, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	9103      	str	r1, [sp, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bfbb      	ittet	lt
 8004be8:	425b      	neglt	r3, r3
 8004bea:	f042 0202 	orrlt.w	r2, r2, #2
 8004bee:	9307      	strge	r3, [sp, #28]
 8004bf0:	9307      	strlt	r3, [sp, #28]
 8004bf2:	bfb8      	it	lt
 8004bf4:	9204      	strlt	r2, [sp, #16]
 8004bf6:	7823      	ldrb	r3, [r4, #0]
 8004bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bfa:	d10a      	bne.n	8004c12 <_vfiprintf_r+0x156>
 8004bfc:	7863      	ldrb	r3, [r4, #1]
 8004bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c00:	d132      	bne.n	8004c68 <_vfiprintf_r+0x1ac>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	9203      	str	r2, [sp, #12]
 8004c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c0e:	3402      	adds	r4, #2
 8004c10:	9305      	str	r3, [sp, #20]
 8004c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ce8 <_vfiprintf_r+0x22c>
 8004c16:	7821      	ldrb	r1, [r4, #0]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7fb fad8 	bl	80001d0 <memchr>
 8004c20:	b138      	cbz	r0, 8004c32 <_vfiprintf_r+0x176>
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	eba0 000a 	sub.w	r0, r0, sl
 8004c28:	2240      	movs	r2, #64	@ 0x40
 8004c2a:	4082      	lsls	r2, r0
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	3401      	adds	r4, #1
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c36:	4829      	ldr	r0, [pc, #164]	@ (8004cdc <_vfiprintf_r+0x220>)
 8004c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	f7fb fac7 	bl	80001d0 <memchr>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d03f      	beq.n	8004cc6 <_vfiprintf_r+0x20a>
 8004c46:	4b26      	ldr	r3, [pc, #152]	@ (8004ce0 <_vfiprintf_r+0x224>)
 8004c48:	bb1b      	cbnz	r3, 8004c92 <_vfiprintf_r+0x1d6>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	3308      	adds	r3, #8
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c58:	443b      	add	r3, r7
 8004c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c5c:	e76a      	b.n	8004b34 <_vfiprintf_r+0x78>
 8004c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c62:	460c      	mov	r4, r1
 8004c64:	2001      	movs	r0, #1
 8004c66:	e7a8      	b.n	8004bba <_vfiprintf_r+0xfe>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f04f 0c0a 	mov.w	ip, #10
 8004c74:	4620      	mov	r0, r4
 8004c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c7a:	3a30      	subs	r2, #48	@ 0x30
 8004c7c:	2a09      	cmp	r2, #9
 8004c7e:	d903      	bls.n	8004c88 <_vfiprintf_r+0x1cc>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0c6      	beq.n	8004c12 <_vfiprintf_r+0x156>
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	e7c4      	b.n	8004c12 <_vfiprintf_r+0x156>
 8004c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7f0      	b.n	8004c74 <_vfiprintf_r+0x1b8>
 8004c92:	ab03      	add	r3, sp, #12
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	462a      	mov	r2, r5
 8004c98:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <_vfiprintf_r+0x228>)
 8004c9a:	a904      	add	r1, sp, #16
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f3af 8000 	nop.w
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	1c78      	adds	r0, r7, #1
 8004ca6:	d1d6      	bne.n	8004c56 <_vfiprintf_r+0x19a>
 8004ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004caa:	07d9      	lsls	r1, r3, #31
 8004cac:	d405      	bmi.n	8004cba <_vfiprintf_r+0x1fe>
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	059a      	lsls	r2, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_vfiprintf_r+0x1fe>
 8004cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cb6:	f7ff fc85 	bl	80045c4 <__retarget_lock_release_recursive>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	065b      	lsls	r3, r3, #25
 8004cbe:	f53f af1f 	bmi.w	8004b00 <_vfiprintf_r+0x44>
 8004cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cc4:	e71e      	b.n	8004b04 <_vfiprintf_r+0x48>
 8004cc6:	ab03      	add	r3, sp, #12
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <_vfiprintf_r+0x228>)
 8004cce:	a904      	add	r1, sp, #16
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 f879 	bl	8004dc8 <_printf_i>
 8004cd6:	e7e4      	b.n	8004ca2 <_vfiprintf_r+0x1e6>
 8004cd8:	080055c1 	.word	0x080055c1
 8004cdc:	080055cb 	.word	0x080055cb
 8004ce0:	00000000 	.word	0x00000000
 8004ce4:	08004a97 	.word	0x08004a97
 8004ce8:	080055c7 	.word	0x080055c7

08004cec <_printf_common>:
 8004cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	688a      	ldr	r2, [r1, #8]
 8004cf6:	690b      	ldr	r3, [r1, #16]
 8004cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bfb8      	it	lt
 8004d00:	4613      	movlt	r3, r2
 8004d02:	6033      	str	r3, [r6, #0]
 8004d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b10a      	cbz	r2, 8004d12 <_printf_common+0x26>
 8004d0e:	3301      	adds	r3, #1
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	bf42      	ittt	mi
 8004d18:	6833      	ldrmi	r3, [r6, #0]
 8004d1a:	3302      	addmi	r3, #2
 8004d1c:	6033      	strmi	r3, [r6, #0]
 8004d1e:	6825      	ldr	r5, [r4, #0]
 8004d20:	f015 0506 	ands.w	r5, r5, #6
 8004d24:	d106      	bne.n	8004d34 <_printf_common+0x48>
 8004d26:	f104 0a19 	add.w	sl, r4, #25
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	6832      	ldr	r2, [r6, #0]
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dc26      	bgt.n	8004d82 <_printf_common+0x96>
 8004d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	3b00      	subs	r3, #0
 8004d3c:	bf18      	it	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	0692      	lsls	r2, r2, #26
 8004d42:	d42b      	bmi.n	8004d9c <_printf_common+0xb0>
 8004d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d48:	4641      	mov	r1, r8
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	47c8      	blx	r9
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d01e      	beq.n	8004d90 <_printf_common+0xa4>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	f003 0306 	and.w	r3, r3, #6
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	bf02      	ittt	eq
 8004d5e:	68e5      	ldreq	r5, [r4, #12]
 8004d60:	6833      	ldreq	r3, [r6, #0]
 8004d62:	1aed      	subeq	r5, r5, r3
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	bf0c      	ite	eq
 8004d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d6c:	2500      	movne	r5, #0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	bfc4      	itt	gt
 8004d72:	1a9b      	subgt	r3, r3, r2
 8004d74:	18ed      	addgt	r5, r5, r3
 8004d76:	2600      	movs	r6, #0
 8004d78:	341a      	adds	r4, #26
 8004d7a:	42b5      	cmp	r5, r6
 8004d7c:	d11a      	bne.n	8004db4 <_printf_common+0xc8>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e008      	b.n	8004d94 <_printf_common+0xa8>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4652      	mov	r2, sl
 8004d86:	4641      	mov	r1, r8
 8004d88:	4638      	mov	r0, r7
 8004d8a:	47c8      	blx	r9
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d103      	bne.n	8004d98 <_printf_common+0xac>
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	3501      	adds	r5, #1
 8004d9a:	e7c6      	b.n	8004d2a <_printf_common+0x3e>
 8004d9c:	18e1      	adds	r1, r4, r3
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	2030      	movs	r0, #48	@ 0x30
 8004da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004da6:	4422      	add	r2, r4
 8004da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004db0:	3302      	adds	r3, #2
 8004db2:	e7c7      	b.n	8004d44 <_printf_common+0x58>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4622      	mov	r2, r4
 8004db8:	4641      	mov	r1, r8
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d0e6      	beq.n	8004d90 <_printf_common+0xa4>
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e7d9      	b.n	8004d7a <_printf_common+0x8e>
	...

08004dc8 <_printf_i>:
 8004dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	7e0f      	ldrb	r7, [r1, #24]
 8004dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dd0:	2f78      	cmp	r7, #120	@ 0x78
 8004dd2:	4691      	mov	r9, r2
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	469a      	mov	sl, r3
 8004dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dde:	d807      	bhi.n	8004df0 <_printf_i+0x28>
 8004de0:	2f62      	cmp	r7, #98	@ 0x62
 8004de2:	d80a      	bhi.n	8004dfa <_printf_i+0x32>
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	f000 80d2 	beq.w	8004f8e <_printf_i+0x1c6>
 8004dea:	2f58      	cmp	r7, #88	@ 0x58
 8004dec:	f000 80b9 	beq.w	8004f62 <_printf_i+0x19a>
 8004df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df8:	e03a      	b.n	8004e70 <_printf_i+0xa8>
 8004dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dfe:	2b15      	cmp	r3, #21
 8004e00:	d8f6      	bhi.n	8004df0 <_printf_i+0x28>
 8004e02:	a101      	add	r1, pc, #4	@ (adr r1, 8004e08 <_printf_i+0x40>)
 8004e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e75 	.word	0x08004e75
 8004e10:	08004df1 	.word	0x08004df1
 8004e14:	08004df1 	.word	0x08004df1
 8004e18:	08004df1 	.word	0x08004df1
 8004e1c:	08004df1 	.word	0x08004df1
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004df1 	.word	0x08004df1
 8004e28:	08004df1 	.word	0x08004df1
 8004e2c:	08004df1 	.word	0x08004df1
 8004e30:	08004df1 	.word	0x08004df1
 8004e34:	08004f75 	.word	0x08004f75
 8004e38:	08004e9f 	.word	0x08004e9f
 8004e3c:	08004f2f 	.word	0x08004f2f
 8004e40:	08004df1 	.word	0x08004df1
 8004e44:	08004df1 	.word	0x08004df1
 8004e48:	08004f97 	.word	0x08004f97
 8004e4c:	08004df1 	.word	0x08004df1
 8004e50:	08004e9f 	.word	0x08004e9f
 8004e54:	08004df1 	.word	0x08004df1
 8004e58:	08004df1 	.word	0x08004df1
 8004e5c:	08004f37 	.word	0x08004f37
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6032      	str	r2, [r6, #0]
 8004e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e70:	2301      	movs	r3, #1
 8004e72:	e09d      	b.n	8004fb0 <_printf_i+0x1e8>
 8004e74:	6833      	ldr	r3, [r6, #0]
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	6031      	str	r1, [r6, #0]
 8004e7c:	0606      	lsls	r6, r0, #24
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0xbc>
 8004e80:	681d      	ldr	r5, [r3, #0]
 8004e82:	e003      	b.n	8004e8c <_printf_i+0xc4>
 8004e84:	0645      	lsls	r5, r0, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0xb8>
 8004e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xd0>
 8004e90:	232d      	movs	r3, #45	@ 0x2d
 8004e92:	426d      	negs	r5, r5
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e98:	4859      	ldr	r0, [pc, #356]	@ (8005000 <_printf_i+0x238>)
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e011      	b.n	8004ec2 <_printf_i+0xfa>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	0608      	lsls	r0, r1, #24
 8004ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea8:	d402      	bmi.n	8004eb0 <_printf_i+0xe8>
 8004eaa:	0649      	lsls	r1, r1, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2ad      	uxthmi	r5, r5
 8004eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eb2:	4853      	ldr	r0, [pc, #332]	@ (8005000 <_printf_i+0x238>)
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	bf14      	ite	ne
 8004eb8:	230a      	movne	r3, #10
 8004eba:	2308      	moveq	r3, #8
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ec2:	6866      	ldr	r6, [r4, #4]
 8004ec4:	60a6      	str	r6, [r4, #8]
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	bfa2      	ittt	ge
 8004eca:	6821      	ldrge	r1, [r4, #0]
 8004ecc:	f021 0104 	bicge.w	r1, r1, #4
 8004ed0:	6021      	strge	r1, [r4, #0]
 8004ed2:	b90d      	cbnz	r5, 8004ed8 <_printf_i+0x110>
 8004ed4:	2e00      	cmp	r6, #0
 8004ed6:	d04b      	beq.n	8004f70 <_printf_i+0x1a8>
 8004ed8:	4616      	mov	r6, r2
 8004eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ede:	fb03 5711 	mls	r7, r3, r1, r5
 8004ee2:	5dc7      	ldrb	r7, [r0, r7]
 8004ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee8:	462f      	mov	r7, r5
 8004eea:	42bb      	cmp	r3, r7
 8004eec:	460d      	mov	r5, r1
 8004eee:	d9f4      	bls.n	8004eda <_printf_i+0x112>
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10b      	bne.n	8004f0c <_printf_i+0x144>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	07df      	lsls	r7, r3, #31
 8004ef8:	d508      	bpl.n	8004f0c <_printf_i+0x144>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6861      	ldr	r1, [r4, #4]
 8004efe:	4299      	cmp	r1, r3
 8004f00:	bfde      	ittt	le
 8004f02:	2330      	movle	r3, #48	@ 0x30
 8004f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f0c:	1b92      	subs	r2, r2, r6
 8004f0e:	6122      	str	r2, [r4, #16]
 8004f10:	f8cd a000 	str.w	sl, [sp]
 8004f14:	464b      	mov	r3, r9
 8004f16:	aa03      	add	r2, sp, #12
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f7ff fee6 	bl	8004cec <_printf_common>
 8004f20:	3001      	adds	r0, #1
 8004f22:	d14a      	bne.n	8004fba <_printf_i+0x1f2>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	b004      	add	sp, #16
 8004f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	f043 0320 	orr.w	r3, r3, #32
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	4833      	ldr	r0, [pc, #204]	@ (8005004 <_printf_i+0x23c>)
 8004f38:	2778      	movs	r7, #120	@ 0x78
 8004f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	6831      	ldr	r1, [r6, #0]
 8004f42:	061f      	lsls	r7, r3, #24
 8004f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f48:	d402      	bmi.n	8004f50 <_printf_i+0x188>
 8004f4a:	065f      	lsls	r7, r3, #25
 8004f4c:	bf48      	it	mi
 8004f4e:	b2ad      	uxthmi	r5, r5
 8004f50:	6031      	str	r1, [r6, #0]
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	bf44      	itt	mi
 8004f56:	f043 0320 	orrmi.w	r3, r3, #32
 8004f5a:	6023      	strmi	r3, [r4, #0]
 8004f5c:	b11d      	cbz	r5, 8004f66 <_printf_i+0x19e>
 8004f5e:	2310      	movs	r3, #16
 8004f60:	e7ac      	b.n	8004ebc <_printf_i+0xf4>
 8004f62:	4827      	ldr	r0, [pc, #156]	@ (8005000 <_printf_i+0x238>)
 8004f64:	e7e9      	b.n	8004f3a <_printf_i+0x172>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f023 0320 	bic.w	r3, r3, #32
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	e7f6      	b.n	8004f5e <_printf_i+0x196>
 8004f70:	4616      	mov	r6, r2
 8004f72:	e7bd      	b.n	8004ef0 <_printf_i+0x128>
 8004f74:	6833      	ldr	r3, [r6, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	6961      	ldr	r1, [r4, #20]
 8004f7a:	1d18      	adds	r0, r3, #4
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	062e      	lsls	r6, r5, #24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	d501      	bpl.n	8004f88 <_printf_i+0x1c0>
 8004f84:	6019      	str	r1, [r3, #0]
 8004f86:	e002      	b.n	8004f8e <_printf_i+0x1c6>
 8004f88:	0668      	lsls	r0, r5, #25
 8004f8a:	d5fb      	bpl.n	8004f84 <_printf_i+0x1bc>
 8004f8c:	8019      	strh	r1, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	4616      	mov	r6, r2
 8004f94:	e7bc      	b.n	8004f10 <_printf_i+0x148>
 8004f96:	6833      	ldr	r3, [r6, #0]
 8004f98:	1d1a      	adds	r2, r3, #4
 8004f9a:	6032      	str	r2, [r6, #0]
 8004f9c:	681e      	ldr	r6, [r3, #0]
 8004f9e:	6862      	ldr	r2, [r4, #4]
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7fb f914 	bl	80001d0 <memchr>
 8004fa8:	b108      	cbz	r0, 8004fae <_printf_i+0x1e6>
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	6060      	str	r0, [r4, #4]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb8:	e7aa      	b.n	8004f10 <_printf_i+0x148>
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d0ad      	beq.n	8004f24 <_printf_i+0x15c>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	d413      	bmi.n	8004ff6 <_printf_i+0x22e>
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	9b03      	ldr	r3, [sp, #12]
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	bfb8      	it	lt
 8004fd6:	4618      	movlt	r0, r3
 8004fd8:	e7a6      	b.n	8004f28 <_printf_i+0x160>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	47d0      	blx	sl
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d09d      	beq.n	8004f24 <_printf_i+0x15c>
 8004fe8:	3501      	adds	r5, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	9903      	ldr	r1, [sp, #12]
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dcf2      	bgt.n	8004fda <_printf_i+0x212>
 8004ff4:	e7eb      	b.n	8004fce <_printf_i+0x206>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	f104 0619 	add.w	r6, r4, #25
 8004ffc:	e7f5      	b.n	8004fea <_printf_i+0x222>
 8004ffe:	bf00      	nop
 8005000:	080055d2 	.word	0x080055d2
 8005004:	080055e3 	.word	0x080055e3

08005008 <__sflush_r>:
 8005008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	0716      	lsls	r6, r2, #28
 8005012:	4605      	mov	r5, r0
 8005014:	460c      	mov	r4, r1
 8005016:	d454      	bmi.n	80050c2 <__sflush_r+0xba>
 8005018:	684b      	ldr	r3, [r1, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	dc02      	bgt.n	8005024 <__sflush_r+0x1c>
 800501e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	dd48      	ble.n	80050b6 <__sflush_r+0xae>
 8005024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005026:	2e00      	cmp	r6, #0
 8005028:	d045      	beq.n	80050b6 <__sflush_r+0xae>
 800502a:	2300      	movs	r3, #0
 800502c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005030:	682f      	ldr	r7, [r5, #0]
 8005032:	6a21      	ldr	r1, [r4, #32]
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	d030      	beq.n	800509a <__sflush_r+0x92>
 8005038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	0759      	lsls	r1, r3, #29
 800503e:	d505      	bpl.n	800504c <__sflush_r+0x44>
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005046:	b10b      	cbz	r3, 800504c <__sflush_r+0x44>
 8005048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005050:	6a21      	ldr	r1, [r4, #32]
 8005052:	4628      	mov	r0, r5
 8005054:	47b0      	blx	r6
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	d106      	bne.n	800506a <__sflush_r+0x62>
 800505c:	6829      	ldr	r1, [r5, #0]
 800505e:	291d      	cmp	r1, #29
 8005060:	d82b      	bhi.n	80050ba <__sflush_r+0xb2>
 8005062:	4a2a      	ldr	r2, [pc, #168]	@ (800510c <__sflush_r+0x104>)
 8005064:	410a      	asrs	r2, r1
 8005066:	07d6      	lsls	r6, r2, #31
 8005068:	d427      	bmi.n	80050ba <__sflush_r+0xb2>
 800506a:	2200      	movs	r2, #0
 800506c:	6062      	str	r2, [r4, #4]
 800506e:	04d9      	lsls	r1, r3, #19
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	d504      	bpl.n	8005080 <__sflush_r+0x78>
 8005076:	1c42      	adds	r2, r0, #1
 8005078:	d101      	bne.n	800507e <__sflush_r+0x76>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	b903      	cbnz	r3, 8005080 <__sflush_r+0x78>
 800507e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005082:	602f      	str	r7, [r5, #0]
 8005084:	b1b9      	cbz	r1, 80050b6 <__sflush_r+0xae>
 8005086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800508a:	4299      	cmp	r1, r3
 800508c:	d002      	beq.n	8005094 <__sflush_r+0x8c>
 800508e:	4628      	mov	r0, r5
 8005090:	f7ff fa9a 	bl	80045c8 <_free_r>
 8005094:	2300      	movs	r3, #0
 8005096:	6363      	str	r3, [r4, #52]	@ 0x34
 8005098:	e00d      	b.n	80050b6 <__sflush_r+0xae>
 800509a:	2301      	movs	r3, #1
 800509c:	4628      	mov	r0, r5
 800509e:	47b0      	blx	r6
 80050a0:	4602      	mov	r2, r0
 80050a2:	1c50      	adds	r0, r2, #1
 80050a4:	d1c9      	bne.n	800503a <__sflush_r+0x32>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0c6      	beq.n	800503a <__sflush_r+0x32>
 80050ac:	2b1d      	cmp	r3, #29
 80050ae:	d001      	beq.n	80050b4 <__sflush_r+0xac>
 80050b0:	2b16      	cmp	r3, #22
 80050b2:	d11e      	bne.n	80050f2 <__sflush_r+0xea>
 80050b4:	602f      	str	r7, [r5, #0]
 80050b6:	2000      	movs	r0, #0
 80050b8:	e022      	b.n	8005100 <__sflush_r+0xf8>
 80050ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050be:	b21b      	sxth	r3, r3
 80050c0:	e01b      	b.n	80050fa <__sflush_r+0xf2>
 80050c2:	690f      	ldr	r7, [r1, #16]
 80050c4:	2f00      	cmp	r7, #0
 80050c6:	d0f6      	beq.n	80050b6 <__sflush_r+0xae>
 80050c8:	0793      	lsls	r3, r2, #30
 80050ca:	680e      	ldr	r6, [r1, #0]
 80050cc:	bf08      	it	eq
 80050ce:	694b      	ldreq	r3, [r1, #20]
 80050d0:	600f      	str	r7, [r1, #0]
 80050d2:	bf18      	it	ne
 80050d4:	2300      	movne	r3, #0
 80050d6:	eba6 0807 	sub.w	r8, r6, r7
 80050da:	608b      	str	r3, [r1, #8]
 80050dc:	f1b8 0f00 	cmp.w	r8, #0
 80050e0:	dde9      	ble.n	80050b6 <__sflush_r+0xae>
 80050e2:	6a21      	ldr	r1, [r4, #32]
 80050e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050e6:	4643      	mov	r3, r8
 80050e8:	463a      	mov	r2, r7
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	2800      	cmp	r0, #0
 80050f0:	dc08      	bgt.n	8005104 <__sflush_r+0xfc>
 80050f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	4407      	add	r7, r0
 8005106:	eba8 0800 	sub.w	r8, r8, r0
 800510a:	e7e7      	b.n	80050dc <__sflush_r+0xd4>
 800510c:	dfbffffe 	.word	0xdfbffffe

08005110 <_fflush_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b913      	cbnz	r3, 8005120 <_fflush_r+0x10>
 800511a:	2500      	movs	r5, #0
 800511c:	4628      	mov	r0, r5
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	b118      	cbz	r0, 800512a <_fflush_r+0x1a>
 8005122:	6a03      	ldr	r3, [r0, #32]
 8005124:	b90b      	cbnz	r3, 800512a <_fflush_r+0x1a>
 8005126:	f7ff f927 	bl	8004378 <__sinit>
 800512a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f3      	beq.n	800511a <_fflush_r+0xa>
 8005132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005134:	07d0      	lsls	r0, r2, #31
 8005136:	d404      	bmi.n	8005142 <_fflush_r+0x32>
 8005138:	0599      	lsls	r1, r3, #22
 800513a:	d402      	bmi.n	8005142 <_fflush_r+0x32>
 800513c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800513e:	f7ff fa40 	bl	80045c2 <__retarget_lock_acquire_recursive>
 8005142:	4628      	mov	r0, r5
 8005144:	4621      	mov	r1, r4
 8005146:	f7ff ff5f 	bl	8005008 <__sflush_r>
 800514a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800514c:	07da      	lsls	r2, r3, #31
 800514e:	4605      	mov	r5, r0
 8005150:	d4e4      	bmi.n	800511c <_fflush_r+0xc>
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	059b      	lsls	r3, r3, #22
 8005156:	d4e1      	bmi.n	800511c <_fflush_r+0xc>
 8005158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800515a:	f7ff fa33 	bl	80045c4 <__retarget_lock_release_recursive>
 800515e:	e7dd      	b.n	800511c <_fflush_r+0xc>

08005160 <__swbuf_r>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	460e      	mov	r6, r1
 8005164:	4614      	mov	r4, r2
 8005166:	4605      	mov	r5, r0
 8005168:	b118      	cbz	r0, 8005172 <__swbuf_r+0x12>
 800516a:	6a03      	ldr	r3, [r0, #32]
 800516c:	b90b      	cbnz	r3, 8005172 <__swbuf_r+0x12>
 800516e:	f7ff f903 	bl	8004378 <__sinit>
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	071a      	lsls	r2, r3, #28
 800517a:	d501      	bpl.n	8005180 <__swbuf_r+0x20>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	b943      	cbnz	r3, 8005192 <__swbuf_r+0x32>
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f82a 	bl	80051dc <__swsetup_r>
 8005188:	b118      	cbz	r0, 8005192 <__swbuf_r+0x32>
 800518a:	f04f 37ff 	mov.w	r7, #4294967295
 800518e:	4638      	mov	r0, r7
 8005190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	6922      	ldr	r2, [r4, #16]
 8005196:	1a98      	subs	r0, r3, r2
 8005198:	6963      	ldr	r3, [r4, #20]
 800519a:	b2f6      	uxtb	r6, r6
 800519c:	4283      	cmp	r3, r0
 800519e:	4637      	mov	r7, r6
 80051a0:	dc05      	bgt.n	80051ae <__swbuf_r+0x4e>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f7ff ffb3 	bl	8005110 <_fflush_r>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d1ed      	bne.n	800518a <__swbuf_r+0x2a>
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	701e      	strb	r6, [r3, #0]
 80051bc:	6962      	ldr	r2, [r4, #20]
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d004      	beq.n	80051ce <__swbuf_r+0x6e>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	07db      	lsls	r3, r3, #31
 80051c8:	d5e1      	bpl.n	800518e <__swbuf_r+0x2e>
 80051ca:	2e0a      	cmp	r6, #10
 80051cc:	d1df      	bne.n	800518e <__swbuf_r+0x2e>
 80051ce:	4621      	mov	r1, r4
 80051d0:	4628      	mov	r0, r5
 80051d2:	f7ff ff9d 	bl	8005110 <_fflush_r>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d0d9      	beq.n	800518e <__swbuf_r+0x2e>
 80051da:	e7d6      	b.n	800518a <__swbuf_r+0x2a>

080051dc <__swsetup_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4b29      	ldr	r3, [pc, #164]	@ (8005284 <__swsetup_r+0xa8>)
 80051e0:	4605      	mov	r5, r0
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	460c      	mov	r4, r1
 80051e6:	b118      	cbz	r0, 80051f0 <__swsetup_r+0x14>
 80051e8:	6a03      	ldr	r3, [r0, #32]
 80051ea:	b90b      	cbnz	r3, 80051f0 <__swsetup_r+0x14>
 80051ec:	f7ff f8c4 	bl	8004378 <__sinit>
 80051f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051f4:	0719      	lsls	r1, r3, #28
 80051f6:	d422      	bmi.n	800523e <__swsetup_r+0x62>
 80051f8:	06da      	lsls	r2, r3, #27
 80051fa:	d407      	bmi.n	800520c <__swsetup_r+0x30>
 80051fc:	2209      	movs	r2, #9
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	e033      	b.n	8005274 <__swsetup_r+0x98>
 800520c:	0758      	lsls	r0, r3, #29
 800520e:	d512      	bpl.n	8005236 <__swsetup_r+0x5a>
 8005210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005212:	b141      	cbz	r1, 8005226 <__swsetup_r+0x4a>
 8005214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005218:	4299      	cmp	r1, r3
 800521a:	d002      	beq.n	8005222 <__swsetup_r+0x46>
 800521c:	4628      	mov	r0, r5
 800521e:	f7ff f9d3 	bl	80045c8 <_free_r>
 8005222:	2300      	movs	r3, #0
 8005224:	6363      	str	r3, [r4, #52]	@ 0x34
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	2300      	movs	r3, #0
 8005230:	6063      	str	r3, [r4, #4]
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f043 0308 	orr.w	r3, r3, #8
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	b94b      	cbnz	r3, 8005256 <__swsetup_r+0x7a>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d003      	beq.n	8005256 <__swsetup_r+0x7a>
 800524e:	4621      	mov	r1, r4
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f8a5 	bl	80053a0 <__smakebuf_r>
 8005256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525a:	f013 0201 	ands.w	r2, r3, #1
 800525e:	d00a      	beq.n	8005276 <__swsetup_r+0x9a>
 8005260:	2200      	movs	r2, #0
 8005262:	60a2      	str	r2, [r4, #8]
 8005264:	6962      	ldr	r2, [r4, #20]
 8005266:	4252      	negs	r2, r2
 8005268:	61a2      	str	r2, [r4, #24]
 800526a:	6922      	ldr	r2, [r4, #16]
 800526c:	b942      	cbnz	r2, 8005280 <__swsetup_r+0xa4>
 800526e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005272:	d1c5      	bne.n	8005200 <__swsetup_r+0x24>
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	0799      	lsls	r1, r3, #30
 8005278:	bf58      	it	pl
 800527a:	6962      	ldrpl	r2, [r4, #20]
 800527c:	60a2      	str	r2, [r4, #8]
 800527e:	e7f4      	b.n	800526a <__swsetup_r+0x8e>
 8005280:	2000      	movs	r0, #0
 8005282:	e7f7      	b.n	8005274 <__swsetup_r+0x98>
 8005284:	20000018 	.word	0x20000018

08005288 <memmove>:
 8005288:	4288      	cmp	r0, r1
 800528a:	b510      	push	{r4, lr}
 800528c:	eb01 0402 	add.w	r4, r1, r2
 8005290:	d902      	bls.n	8005298 <memmove+0x10>
 8005292:	4284      	cmp	r4, r0
 8005294:	4623      	mov	r3, r4
 8005296:	d807      	bhi.n	80052a8 <memmove+0x20>
 8005298:	1e43      	subs	r3, r0, #1
 800529a:	42a1      	cmp	r1, r4
 800529c:	d008      	beq.n	80052b0 <memmove+0x28>
 800529e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052a6:	e7f8      	b.n	800529a <memmove+0x12>
 80052a8:	4402      	add	r2, r0
 80052aa:	4601      	mov	r1, r0
 80052ac:	428a      	cmp	r2, r1
 80052ae:	d100      	bne.n	80052b2 <memmove+0x2a>
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ba:	e7f7      	b.n	80052ac <memmove+0x24>

080052bc <_sbrk_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d06      	ldr	r5, [pc, #24]	@ (80052d8 <_sbrk_r+0x1c>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	f7fb fbde 	bl	8000a88 <_sbrk>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_sbrk_r+0x1a>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_sbrk_r+0x1a>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	20000378 	.word	0x20000378

080052dc <memcpy>:
 80052dc:	440a      	add	r2, r1
 80052de:	4291      	cmp	r1, r2
 80052e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e4:	d100      	bne.n	80052e8 <memcpy+0xc>
 80052e6:	4770      	bx	lr
 80052e8:	b510      	push	{r4, lr}
 80052ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f2:	4291      	cmp	r1, r2
 80052f4:	d1f9      	bne.n	80052ea <memcpy+0xe>
 80052f6:	bd10      	pop	{r4, pc}

080052f8 <_realloc_r>:
 80052f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	4680      	mov	r8, r0
 80052fe:	4615      	mov	r5, r2
 8005300:	460c      	mov	r4, r1
 8005302:	b921      	cbnz	r1, 800530e <_realloc_r+0x16>
 8005304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005308:	4611      	mov	r1, r2
 800530a:	f7ff b9c9 	b.w	80046a0 <_malloc_r>
 800530e:	b92a      	cbnz	r2, 800531c <_realloc_r+0x24>
 8005310:	f7ff f95a 	bl	80045c8 <_free_r>
 8005314:	2400      	movs	r4, #0
 8005316:	4620      	mov	r0, r4
 8005318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800531c:	f000 f89e 	bl	800545c <_malloc_usable_size_r>
 8005320:	4285      	cmp	r5, r0
 8005322:	4606      	mov	r6, r0
 8005324:	d802      	bhi.n	800532c <_realloc_r+0x34>
 8005326:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800532a:	d8f4      	bhi.n	8005316 <_realloc_r+0x1e>
 800532c:	4629      	mov	r1, r5
 800532e:	4640      	mov	r0, r8
 8005330:	f7ff f9b6 	bl	80046a0 <_malloc_r>
 8005334:	4607      	mov	r7, r0
 8005336:	2800      	cmp	r0, #0
 8005338:	d0ec      	beq.n	8005314 <_realloc_r+0x1c>
 800533a:	42b5      	cmp	r5, r6
 800533c:	462a      	mov	r2, r5
 800533e:	4621      	mov	r1, r4
 8005340:	bf28      	it	cs
 8005342:	4632      	movcs	r2, r6
 8005344:	f7ff ffca 	bl	80052dc <memcpy>
 8005348:	4621      	mov	r1, r4
 800534a:	4640      	mov	r0, r8
 800534c:	f7ff f93c 	bl	80045c8 <_free_r>
 8005350:	463c      	mov	r4, r7
 8005352:	e7e0      	b.n	8005316 <_realloc_r+0x1e>

08005354 <__swhatbuf_r>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	2900      	cmp	r1, #0
 800535e:	b096      	sub	sp, #88	@ 0x58
 8005360:	4615      	mov	r5, r2
 8005362:	461e      	mov	r6, r3
 8005364:	da0d      	bge.n	8005382 <__swhatbuf_r+0x2e>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	bf14      	ite	ne
 8005372:	2340      	movne	r3, #64	@ 0x40
 8005374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005378:	2000      	movs	r0, #0
 800537a:	6031      	str	r1, [r6, #0]
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	b016      	add	sp, #88	@ 0x58
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	466a      	mov	r2, sp
 8005384:	f000 f848 	bl	8005418 <_fstat_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	dbec      	blt.n	8005366 <__swhatbuf_r+0x12>
 800538c:	9901      	ldr	r1, [sp, #4]
 800538e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005396:	4259      	negs	r1, r3
 8005398:	4159      	adcs	r1, r3
 800539a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800539e:	e7eb      	b.n	8005378 <__swhatbuf_r+0x24>

080053a0 <__smakebuf_r>:
 80053a0:	898b      	ldrh	r3, [r1, #12]
 80053a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a4:	079d      	lsls	r5, r3, #30
 80053a6:	4606      	mov	r6, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	d507      	bpl.n	80053bc <__smakebuf_r+0x1c>
 80053ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	2301      	movs	r3, #1
 80053b6:	6163      	str	r3, [r4, #20]
 80053b8:	b003      	add	sp, #12
 80053ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053bc:	ab01      	add	r3, sp, #4
 80053be:	466a      	mov	r2, sp
 80053c0:	f7ff ffc8 	bl	8005354 <__swhatbuf_r>
 80053c4:	9f00      	ldr	r7, [sp, #0]
 80053c6:	4605      	mov	r5, r0
 80053c8:	4639      	mov	r1, r7
 80053ca:	4630      	mov	r0, r6
 80053cc:	f7ff f968 	bl	80046a0 <_malloc_r>
 80053d0:	b948      	cbnz	r0, 80053e6 <__smakebuf_r+0x46>
 80053d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d6:	059a      	lsls	r2, r3, #22
 80053d8:	d4ee      	bmi.n	80053b8 <__smakebuf_r+0x18>
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	f043 0302 	orr.w	r3, r3, #2
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	e7e2      	b.n	80053ac <__smakebuf_r+0xc>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	6020      	str	r0, [r4, #0]
 80053ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ee:	81a3      	strh	r3, [r4, #12]
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053f6:	b15b      	cbz	r3, 8005410 <__smakebuf_r+0x70>
 80053f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fc:	4630      	mov	r0, r6
 80053fe:	f000 f81d 	bl	800543c <_isatty_r>
 8005402:	b128      	cbz	r0, 8005410 <__smakebuf_r+0x70>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	431d      	orrs	r5, r3
 8005414:	81a5      	strh	r5, [r4, #12]
 8005416:	e7cf      	b.n	80053b8 <__smakebuf_r+0x18>

08005418 <_fstat_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4d07      	ldr	r5, [pc, #28]	@ (8005438 <_fstat_r+0x20>)
 800541c:	2300      	movs	r3, #0
 800541e:	4604      	mov	r4, r0
 8005420:	4608      	mov	r0, r1
 8005422:	4611      	mov	r1, r2
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	f7fb fb06 	bl	8000a36 <_fstat>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d102      	bne.n	8005434 <_fstat_r+0x1c>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	b103      	cbz	r3, 8005434 <_fstat_r+0x1c>
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20000378 	.word	0x20000378

0800543c <_isatty_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d06      	ldr	r5, [pc, #24]	@ (8005458 <_isatty_r+0x1c>)
 8005440:	2300      	movs	r3, #0
 8005442:	4604      	mov	r4, r0
 8005444:	4608      	mov	r0, r1
 8005446:	602b      	str	r3, [r5, #0]
 8005448:	f7fb fb05 	bl	8000a56 <_isatty>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d102      	bne.n	8005456 <_isatty_r+0x1a>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	b103      	cbz	r3, 8005456 <_isatty_r+0x1a>
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	20000378 	.word	0x20000378

0800545c <_malloc_usable_size_r>:
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f18      	subs	r0, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfbc      	itt	lt
 8005466:	580b      	ldrlt	r3, [r1, r0]
 8005468:	18c0      	addlt	r0, r0, r3
 800546a:	4770      	bx	lr

0800546c <_init>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	bf00      	nop
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr

08005478 <_fini>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr
