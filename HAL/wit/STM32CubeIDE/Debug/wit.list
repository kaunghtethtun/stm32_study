
wit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006f10  08006f10  00007f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007338  08007338  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007338  08007338  00008338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800733c  0800733c  0000833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007340  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000270  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7e1  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002104  00000000  00000000  000159e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00017af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092d  00000000  00000000  000186e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221e4  00000000  00000000  0001900d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f487  00000000  00000000  0003b1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccdd5  00000000  00000000  0004a678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011744d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004114  00000000  00000000  00117490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0011b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ef4 	.word	0x08006ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006ef4 	.word	0x08006ef4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_DMA_Init+0x3c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <MX_DMA_Init+0x3c>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_DMA_Init+0x3c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200c      	movs	r0, #12
 8000ec0:	f000 fd5b 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f000 fd74 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_GPIO_Init+0x68>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f50:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f5c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f60:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f64:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f6c:	e000      	b.n	8000f70 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f6e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f9      	beq.n	8000f6e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *ptr, int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e009      	b.n	8000fbc <_write+0x2a>
    {
        ITM_SendChar((*ptr++));
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffc7 	bl	8000f44 <ITM_SendChar>
    for (i = 0; i < len; i++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf1      	blt.n	8000fa8 <_write+0x16>
    }
    return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <crcSum>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t crcSum()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t sum = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0 ; i < 10 ; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	e009      	b.n	8000ff4 <crcSum+0x24>
	{
		sum += uart_rx_data[i];
 8000fe0:	4a09      	ldr	r2, [pc, #36]	@ (8001008 <crcSum+0x38>)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4413      	add	r3, r2
 8000fec:	71fb      	strb	r3, [r7, #7]
	for (int i = 0 ; i < 10 ; i++)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	ddf2      	ble.n	8000fe0 <crcSum+0x10>
	}
	return sum;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200001f0 	.word	0x200001f0

0800100c <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a33      	ldr	r2, [pc, #204]	@ (80010e8 <HAL_UART_RxCpltCallback+0xdc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d15f      	bne.n	80010de <HAL_UART_RxCpltCallback+0xd2>
		{
			uint8_t check = crcSum();
 800101e:	f7ff ffd7 	bl	8000fd0 <crcSum>
 8001022:	4603      	mov	r3, r0
 8001024:	75fb      	strb	r3, [r7, #23]
			if(check == (uint8_t)uart_rx_data[10])
 8001026:	4b31      	ldr	r3, [pc, #196]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 8001028:	7a9b      	ldrb	r3, [r3, #10]
 800102a:	7dfa      	ldrb	r2, [r7, #23]
 800102c:	429a      	cmp	r2, r3
 800102e:	d14e      	bne.n	80010ce <HAL_UART_RxCpltCallback+0xc2>
			{
				tmp = (short)((short) uart_rx_data[7] << 8u | uart_rx_data[6]) ;
 8001030:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 8001032:	79db      	ldrb	r3, [r3, #7]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 800103a:	799b      	ldrb	r3, [r3, #6]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <HAL_UART_RxCpltCallback+0xe4>)
 8001044:	801a      	strh	r2, [r3, #0]
				if(uart_rx_data[1] == 0x53)
 8001046:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	2b53      	cmp	r3, #83	@ 0x53
 800104c:	d115      	bne.n	800107a <HAL_UART_RxCpltCallback+0x6e>
				{
					float angleZ=(float) ( tmp/ a);
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <HAL_UART_RxCpltCallback+0xe4>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80010f4 <HAL_UART_RxCpltCallback+0xe8>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	edc7 7a03 	vstr	s15, [r7, #12]
					printf("Angle: %.3f Degree\r\n",angleZ);
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4821      	ldr	r0, [pc, #132]	@ (80010f8 <HAL_UART_RxCpltCallback+0xec>)
 8001074:	f003 ff68 	bl	8004f48 <iprintf>
 8001078:	e02c      	b.n	80010d4 <HAL_UART_RxCpltCallback+0xc8>
				}
				else if (uart_rx_data[1] == 0x52)
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	2b52      	cmp	r3, #82	@ 0x52
 8001080:	d115      	bne.n	80010ae <HAL_UART_RxCpltCallback+0xa2>
				{
					float velocityZ=(float) ( tmp / b);
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_UART_RxCpltCallback+0xe4>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001090:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80010fc <HAL_UART_RxCpltCallback+0xf0>
 8001094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001098:	edc7 7a04 	vstr	s15, [r7, #16]
					printf("Velocity: %.3f DegreePerSec\r\n",velocityZ);
 800109c:	6938      	ldr	r0, [r7, #16]
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4816      	ldr	r0, [pc, #88]	@ (8001100 <HAL_UART_RxCpltCallback+0xf4>)
 80010a8:	f003 ff4e 	bl	8004f48 <iprintf>
 80010ac:	e012      	b.n	80010d4 <HAL_UART_RxCpltCallback+0xc8>
				}
				else{
					printf("Unknown Error \r\n");
 80010ae:	4815      	ldr	r0, [pc, #84]	@ (8001104 <HAL_UART_RxCpltCallback+0xf8>)
 80010b0:	f003 ffb2 	bl	8005018 <puts>
					printf("uart_rx_data[0] = 0x%02X \r\n" , uart_rx_data[0]);
 80010b4:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4813      	ldr	r0, [pc, #76]	@ (8001108 <HAL_UART_RxCpltCallback+0xfc>)
 80010bc:	f003 ff44 	bl	8004f48 <iprintf>
					printf("uart_rx_data[1] = 0x%02X \r\n" , uart_rx_data[1]);
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	@ (800110c <HAL_UART_RxCpltCallback+0x100>)
 80010c8:	f003 ff3e 	bl	8004f48 <iprintf>
 80010cc:	e002      	b.n	80010d4 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				printf("CheckSum Error");
 80010ce:	4810      	ldr	r0, [pc, #64]	@ (8001110 <HAL_UART_RxCpltCallback+0x104>)
 80010d0:	f003 ff3a 	bl	8004f48 <iprintf>
//		 for (uint8_t i = 0; i < 11; i++)
//		    {
//		        printf("0x%02X ", uart_rx_data[i]);  // Print each byte as hexadecimal
//		    }
//		    printf("\n");
		    HAL_UART_Receive_DMA(&huart3, uart_rx_data,rx_data_size);
 80010d4:	220b      	movs	r2, #11
 80010d6:	4905      	ldr	r1, [pc, #20]	@ (80010ec <HAL_UART_RxCpltCallback+0xe0>)
 80010d8:	480e      	ldr	r0, [pc, #56]	@ (8001114 <HAL_UART_RxCpltCallback+0x108>)
 80010da:	f002 f967 	bl	80033ac <HAL_UART_Receive_DMA>
		}
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40004800 	.word	0x40004800
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	200001fc 	.word	0x200001fc
 80010f4:	4ab40000 	.word	0x4ab40000
 80010f8:	08006f10 	.word	0x08006f10
 80010fc:	4c7a0000 	.word	0x4c7a0000
 8001100:	08006f28 	.word	0x08006f28
 8001104:	08006f48 	.word	0x08006f48
 8001108:	08006f58 	.word	0x08006f58
 800110c:	08006f74 	.word	0x08006f74
 8001110:	08006f90 	.word	0x08006f90
 8001114:	2000024c 	.word	0x2000024c

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f000 fae0 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f814 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f7ff fed8 	bl	8000ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001128:	f7ff feb6 	bl	8000e98 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800112c:	f000 f9f0 	bl	8001510 <MX_USART3_UART_Init>
  MX_TIM9_Init();
 8001130:	f000 f992 	bl	8001458 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, uart_rx_data,rx_data_size);
 8001134:	220b      	movs	r2, #11
 8001136:	4903      	ldr	r1, [pc, #12]	@ (8001144 <main+0x2c>)
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <main+0x30>)
 800113a:	f002 f937 	bl	80033ac <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800113e:	bf00      	nop
 8001140:	e7fd      	b.n	800113e <main+0x26>
 8001142:	bf00      	nop
 8001144:	200001f0 	.word	0x200001f0
 8001148:	2000024c 	.word	0x2000024c

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	@ 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	@ 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f004 f83c 	bl	80051d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <SystemClock_Config+0xcc>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	@ (800121c <SystemClock_Config+0xd0>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b0:	2310      	movs	r3, #16
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b4:	2302      	movs	r3, #2
 80011b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011bc:	2308      	movs	r3, #8
 80011be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011c0:	23a8      	movs	r3, #168	@ 0xa8
 80011c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c8:	2307      	movs	r3, #7
 80011ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 f9a7 	bl	8002524 <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011dc:	f000 f820 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2105      	movs	r1, #5
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fc08 	bl	8002a14 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800120a:	f000 f809 	bl	8001220 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	@ 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 fb7a 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 fa57 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA1_Stream1_IRQHandler+0x10>)
 80012e2:	f000 fd19 	bl	8001d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000294 	.word	0x20000294

080012f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <USART3_IRQHandler+0x10>)
 80012f6:	f002 f87f 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000024c 	.word	0x2000024c

08001304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_kill>:

int _kill(int pid, int sig)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800131e:	f003 ffad 	bl	800527c <__errno>
 8001322:	4603      	mov	r3, r0
 8001324:	2216      	movs	r2, #22
 8001326:	601a      	str	r2, [r3, #0]
  return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_exit>:

void _exit (int status)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffe7 	bl	8001314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001346:	bf00      	nop
 8001348:	e7fd      	b.n	8001346 <_exit+0x12>

0800134a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e00a      	b.n	8001372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135c:	f3af 8000 	nop.w
 8001360:	4601      	mov	r1, r0
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	60ba      	str	r2, [r7, #8]
 8001368:	b2ca      	uxtb	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbf0      	blt.n	800135c <_read+0x12>
  }

  return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ac:	605a      	str	r2, [r3, #4]
  return 0;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_isatty>:

int _isatty(int file)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f003 ff2e 	bl	800527c <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20020000 	.word	0x20020000
 800144c:	00000400 	.word	0x00000400
 8001450:	20000200 	.word	0x20000200
 8001454:	20000448 	.word	0x20000448

08001458 <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 800146c:	4a16      	ldr	r2, [pc, #88]	@ (80014c8 <MX_TIM9_Init+0x70>)
 800146e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 800147e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001482:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 8001492:	f001 fcdf 	bl	8002e54 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800149c:	f7ff fec0 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <MX_TIM9_Init+0x6c>)
 80014ac:	f001 fd21 	bl	8002ef2 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80014b6:	f7ff feb3 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000204 	.word	0x20000204
 80014c8:	40014000 	.word	0x40014000

080014cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_TIM_Base_MspInit+0x3c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10d      	bne.n	80014fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_TIM_Base_MspInit+0x40>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_TIM_Base_MspInit+0x40>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_TIM_Base_MspInit+0x40>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40014000 	.word	0x40014000
 800150c:	40023800 	.word	0x40023800

08001510 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_USART3_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800151c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001548:	f001 fee0 	bl	800330c <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f7ff fe65 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000024c 	.word	0x2000024c
 8001560:	40004800 	.word	0x40004800

08001564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a34      	ldr	r2, [pc, #208]	@ (8001654 <HAL_UART_MspInit+0xf0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d162      	bne.n	800164c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_UART_MspInit+0xf4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d0:	2307      	movs	r3, #7
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4820      	ldr	r0, [pc, #128]	@ (800165c <HAL_UART_MspInit+0xf8>)
 80015dc:	f000 fe06 	bl	80021ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 80015e2:	4a20      	ldr	r2, [pc, #128]	@ (8001664 <HAL_UART_MspInit+0x100>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 80015e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001600:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001620:	480f      	ldr	r0, [pc, #60]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001622:	f000 f9e1 	bl	80019e8 <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800162c:	f7ff fdf8 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001634:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_UART_MspInit+0xfc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2027      	movs	r0, #39	@ 0x27
 8001642:	f000 f99a 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001646:	2027      	movs	r0, #39	@ 0x27
 8001648:	f000 f9b3 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	@ 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004800 	.word	0x40004800
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400
 8001660:	20000294 	.word	0x20000294
 8001664:	40026028 	.word	0x40026028

08001668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800166c:	f000 f826 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001672:	490d      	ldr	r1, [pc, #52]	@ (80016a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001688:	4c0a      	ldr	r4, [pc, #40]	@ (80016b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001696:	f003 fdf7 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7ff fd3d 	bl	8001118 <main>
  bx  lr    
 800169e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016ac:	08007340 	.word	0x08007340
  ldr r2, =_sbss
 80016b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016b4:	20000444 	.word	0x20000444

080016b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC_IRQHandler>
	...

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f92b 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fd8a 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f943 	bl	80019ce <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f90b 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	200002f4 	.word	0x200002f4

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200002f4 	.word	0x200002f4

080017c4 <__NVIC_SetPriorityGrouping>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff feda 	bl	80017ac <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e099      	b.n	8001b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a24:	e00f      	b.n	8001a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a26:	f7ff fec1 	bl	80017ac <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d908      	bls.n	8001a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e078      	b.n	8001b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e8      	bne.n	8001a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <HAL_DMA_Init+0x158>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d107      	bne.n	8001ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f023 0307 	bic.w	r3, r3, #7
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d117      	bne.n	8001b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fb01 	bl	80020f4 <DMA_CheckFifoParam>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2240      	movs	r2, #64	@ 0x40
 8001afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b06:	2301      	movs	r3, #1
 8001b08:	e016      	b.n	8001b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fab8 	bl	8002088 <DMA_CalcBaseAndBitshift>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	223f      	movs	r2, #63	@ 0x3f
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	f010803f 	.word	0xf010803f

08001b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_Start_IT+0x26>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e040      	b.n	8001bec <HAL_DMA_Start_IT+0xa8>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d12f      	bne.n	8001bde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fa4a 	bl	800202c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	223f      	movs	r2, #63	@ 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0216 	orr.w	r2, r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0208 	orr.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e005      	b.n	8001bea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
 8001be8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c02:	f7ff fdd3 	bl	80017ac <HAL_GetTick>
 8001c06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e052      	b.n	8001ccc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0216 	bic.w	r2, r2, #22
 8001c34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <HAL_DMA_Abort+0x62>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0208 	bic.w	r2, r2, #8
 8001c64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c76:	e013      	b.n	8001ca0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c78:	f7ff fd98 	bl	80017ac <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d90c      	bls.n	8001ca0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e015      	b.n	8001ccc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1e4      	bne.n	8001c78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	223f      	movs	r2, #63	@ 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	@ 0x80
 8001cec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00c      	b.n	8001d0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d24:	4b8e      	ldr	r3, [pc, #568]	@ (8001f60 <HAL_DMA_IRQHandler+0x248>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a8e      	ldr	r2, [pc, #568]	@ (8001f64 <HAL_DMA_IRQHandler+0x24c>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0a9b      	lsrs	r3, r3, #10
 8001d30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d42:	2208      	movs	r2, #8
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0204 	bic.w	r2, r2, #4
 8001d6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d70:	2208      	movs	r2, #8
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d012      	beq.n	8001dba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da6:	2201      	movs	r2, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	2204      	movs	r2, #4
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	f043 0204 	orr.w	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df4:	2210      	movs	r2, #16
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d043      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03c      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2210      	movs	r2, #16
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d024      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
 8001e46:	e01f      	b.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0208 	bic.w	r2, r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 808f 	beq.w	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8087 	beq.w	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	2220      	movs	r2, #32
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d136      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0216 	bic.w	r2, r2, #22
 8001ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <HAL_DMA_IRQHandler+0x1da>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0208 	bic.w	r2, r2, #8
 8001f00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	223f      	movs	r2, #63	@ 0x3f
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d07e      	beq.n	8002024 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
        }
        return;
 8001f2e:	e079      	b.n	8002024 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d031      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e02c      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000
 8001f64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e01e      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0210 	bic.w	r2, r2, #16
 8001f96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d032      	beq.n	8002026 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2205      	movs	r2, #5
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d307      	bcc.n	8002000 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f2      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x2cc>
 8001ffe:	e000      	b.n	8002002 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002000:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
 8002022:	e000      	b.n	8002026 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002024:	bf00      	nop
    }
  }
}
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b40      	cmp	r3, #64	@ 0x40
 8002058:	d108      	bne.n	800206c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800206a:	e007      	b.n	800207c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b10      	subs	r3, #16
 8002098:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <DMA_CalcBaseAndBitshift+0x64>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a2:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <DMA_CalcBaseAndBitshift+0x68>)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d909      	bls.n	80020ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	1d1a      	adds	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020c8:	e007      	b.n	80020da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	aaaaaaab 	.word	0xaaaaaaab
 80020f0:	08006fb8 	.word	0x08006fb8

080020f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d856      	bhi.n	80021c2 <DMA_CheckFifoParam+0xce>
 8002114:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <DMA_CheckFifoParam+0x28>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	0800213f 	.word	0x0800213f
 8002124:	0800212d 	.word	0x0800212d
 8002128:	080021c3 	.word	0x080021c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d046      	beq.n	80021c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213c:	e043      	b.n	80021c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002146:	d140      	bne.n	80021ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e03d      	b.n	80021ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002156:	d121      	bne.n	800219c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d837      	bhi.n	80021ce <DMA_CheckFifoParam+0xda>
 800215e:	a201      	add	r2, pc, #4	@ (adr r2, 8002164 <DMA_CheckFifoParam+0x70>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002175 	.word	0x08002175
 8002168:	0800217b 	.word	0x0800217b
 800216c:	08002175 	.word	0x08002175
 8002170:	0800218d 	.word	0x0800218d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	e030      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d025      	beq.n	80021d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218a:	e022      	b.n	80021d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002194:	d11f      	bne.n	80021d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219a:	e01c      	b.n	80021d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d903      	bls.n	80021aa <DMA_CheckFifoParam+0xb6>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a8:	e018      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      break;
 80021ae:	e015      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e00b      	b.n	80021da <DMA_CheckFifoParam+0xe6>
      break;
 80021c2:	bf00      	nop
 80021c4:	e00a      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e008      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e006      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e004      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e002      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;   
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
    }
  } 
  
  return status; 
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e16b      	b.n	80024e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 815a 	bne.w	80024da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b4 	beq.w	80024da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a5f      	ldr	r2, [pc, #380]	@ (80024f8 <HAL_GPIO_Init+0x30c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a5b      	ldr	r2, [pc, #364]	@ (80024fc <HAL_GPIO_Init+0x310>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	@ (8002504 <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	@ (8002508 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	@ (800250c <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002510 <HAL_GPIO_Init+0x324>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002514 <HAL_GPIO_Init+0x328>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002518 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	@ (800251c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	@ (80024fc <HAL_GPIO_Init+0x310>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	@ (8002520 <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_GPIO_Init+0x334>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_GPIO_Init+0x334>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae90 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e267      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d075      	beq.n	800262e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002542:	4b88      	ldr	r3, [pc, #544]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d00c      	beq.n	8002568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254e:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002556:	2b08      	cmp	r3, #8
 8002558:	d112      	bne.n	8002580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255a:	4b82      	ldr	r3, [pc, #520]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002562:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002566:	d10b      	bne.n	8002580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	4b7e      	ldr	r3, [pc, #504]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05b      	beq.n	800262c <HAL_RCC_OscConfig+0x108>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d157      	bne.n	800262c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e242      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002588:	d106      	bne.n	8002598 <HAL_RCC_OscConfig+0x74>
 800258a:	4b76      	ldr	r3, [pc, #472]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a75      	ldr	r2, [pc, #468]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01d      	b.n	80025d4 <HAL_RCC_OscConfig+0xb0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x98>
 80025a2:	4b70      	ldr	r3, [pc, #448]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0xb0>
 80025bc:	4b69      	ldr	r3, [pc, #420]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a68      	ldr	r2, [pc, #416]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b66      	ldr	r3, [pc, #408]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a65      	ldr	r2, [pc, #404]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d013      	beq.n	8002604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff f8e6 	bl	80017ac <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e4:	f7ff f8e2 	bl	80017ac <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	@ 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e207      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0xc0>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7ff f8d2 	bl	80017ac <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7ff f8ce 	bl	80017ac <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1f3      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0xe8>
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d063      	beq.n	8002702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002646:	4b47      	ldr	r3, [pc, #284]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11c      	bne.n	800268c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b44      	ldr	r3, [pc, #272]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265e:	4b41      	ldr	r3, [pc, #260]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x152>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e1c7      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b3b      	ldr	r3, [pc, #236]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4937      	ldr	r1, [pc, #220]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	e03a      	b.n	8002702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <HAL_RCC_OscConfig+0x244>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7ff f887 	bl	80017ac <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a2:	f7ff f883 	bl	80017ac <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1a8      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4925      	ldr	r1, [pc, #148]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d6:	4b24      	ldr	r3, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x244>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff f866 	bl	80017ac <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e4:	f7ff f862 	bl	80017ac <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e187      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d036      	beq.n	800277c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d016      	beq.n	8002744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_RCC_OscConfig+0x248>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7ff f846 	bl	80017ac <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002724:	f7ff f842 	bl	80017ac <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e167      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <HAL_RCC_OscConfig+0x240>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x200>
 8002742:	e01b      	b.n	800277c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_RCC_OscConfig+0x248>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff f82f 	bl	80017ac <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	e00e      	b.n	8002770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002752:	f7ff f82b 	bl	80017ac <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d907      	bls.n	8002770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e150      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
 8002764:	40023800 	.word	0x40023800
 8002768:	42470000 	.word	0x42470000
 800276c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4b88      	ldr	r3, [pc, #544]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ea      	bne.n	8002752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8097 	beq.w	80028b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278e:	4b81      	ldr	r3, [pc, #516]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b7d      	ldr	r3, [pc, #500]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80027a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b77      	ldr	r3, [pc, #476]	@ (8002998 <HAL_RCC_OscConfig+0x474>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c6:	4b74      	ldr	r3, [pc, #464]	@ (8002998 <HAL_RCC_OscConfig+0x474>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a73      	ldr	r2, [pc, #460]	@ (8002998 <HAL_RCC_OscConfig+0x474>)
 80027cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d2:	f7fe ffeb 	bl	80017ac <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027da:	f7fe ffe7 	bl	80017ac <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e10c      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002998 <HAL_RCC_OscConfig+0x474>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x2ea>
 8002800:	4b64      	ldr	r3, [pc, #400]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a63      	ldr	r2, [pc, #396]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x324>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x30c>
 8002816:	4b5f      	ldr	r3, [pc, #380]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	4a5e      	ldr	r2, [pc, #376]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	@ 0x70
 8002822:	4b5c      	ldr	r3, [pc, #368]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a5b      	ldr	r2, [pc, #364]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x324>
 8002830:	4b58      	ldr	r3, [pc, #352]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002834:	4a57      	ldr	r2, [pc, #348]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	@ 0x70
 800283c:	4b55      	ldr	r3, [pc, #340]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	4a54      	ldr	r2, [pc, #336]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe ffac 	bl	80017ac <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	e00a      	b.n	800286e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe ffa8 	bl	80017ac <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0cb      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ee      	beq.n	8002858 <HAL_RCC_OscConfig+0x334>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe ff96 	bl	80017ac <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe ff92 	bl	80017ac <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0b5      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	4b3e      	ldr	r3, [pc, #248]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ee      	bne.n	8002884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	4a38      	ldr	r2, [pc, #224]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a1 	beq.w	8002a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c2:	4b34      	ldr	r3, [pc, #208]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d05c      	beq.n	8002988 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d141      	bne.n	800295a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_RCC_OscConfig+0x478>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff66 	bl	80017ac <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe ff62 	bl	80017ac <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e087      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	019b      	lsls	r3, r3, #6
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	491b      	ldr	r1, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCC_OscConfig+0x478>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe ff3b 	bl	80017ac <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe ff37 	bl	80017ac <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e05c      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x416>
 8002958:	e054      	b.n	8002a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_RCC_OscConfig+0x478>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe ff24 	bl	80017ac <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe ff20 	bl	80017ac <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e045      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x470>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x444>
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e038      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000
 800299c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4ec>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d028      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d121      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d11a      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0cc      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b68      	ldr	r3, [pc, #416]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d90c      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b65      	ldr	r3, [pc, #404]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a52      	ldr	r2, [pc, #328]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d044      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d119      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e067      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4934      	ldr	r1, [pc, #208]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fe52 	bl	80017ac <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe fe4e 	bl	80017ac <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e04f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d20c      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f821 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fdb2 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08006fa0 	.word	0x08006fa0
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be4:	b094      	sub	sp, #80	@ 0x50
 8002be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bec:	2300      	movs	r3, #0
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf8:	4b79      	ldr	r3, [pc, #484]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d00d      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x40>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f200 80e1 	bhi.w	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c12:	e0db      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c18:	e0db      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1a:	4b73      	ldr	r3, [pc, #460]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1e:	e0d8      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c20:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c28:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c52:	4622      	mov	r2, r4
 8002c54:	462b      	mov	r3, r5
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c64:	0150      	lsls	r0, r2, #5
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	1a51      	subs	r1, r2, r1
 8002c6e:	6139      	str	r1, [r7, #16]
 8002c70:	4629      	mov	r1, r5
 8002c72:	eb63 0301 	sbc.w	r3, r3, r1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c84:	4659      	mov	r1, fp
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8e:	4651      	mov	r1, sl
 8002c90:	018a      	lsls	r2, r1, #6
 8002c92:	4651      	mov	r1, sl
 8002c94:	ebb2 0801 	subs.w	r8, r2, r1
 8002c98:	4659      	mov	r1, fp
 8002c9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb2:	4690      	mov	r8, r2
 8002cb4:	4699      	mov	r9, r3
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	eb18 0303 	adds.w	r3, r8, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	eb49 0303 	adc.w	r3, r9, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	024b      	lsls	r3, r1, #9
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cdc:	4621      	mov	r1, r4
 8002cde:	024a      	lsls	r2, r1, #9
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cf0:	f7fd ff5a 	bl	8000ba8 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cfc:	e058      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b38      	ldr	r3, [pc, #224]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	2200      	movs	r2, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	4611      	mov	r1, r2
 8002d0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	0159      	lsls	r1, r3, #5
 8002d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2a:	0150      	lsls	r0, r2, #5
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4641      	mov	r1, r8
 8002d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d50:	ebb2 040a 	subs.w	r4, r2, sl
 8002d54:	eb63 050b 	sbc.w	r5, r3, fp
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb45 0303 	adc.w	r3, r5, r3
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d86:	4629      	mov	r1, r5
 8002d88:	028b      	lsls	r3, r1, #10
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d90:	4621      	mov	r1, r4
 8002d92:	028a      	lsls	r2, r1, #10
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	61fa      	str	r2, [r7, #28]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	f7fd ff00 	bl	8000ba8 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4613      	mov	r3, r2
 8002dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002dc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3750      	adds	r7, #80	@ 0x50
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	007a1200 	.word	0x007a1200

08002dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff0 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a9b      	lsrs	r3, r3, #10
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08006fb0 	.word	0x08006fb0

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffdc 	bl	8002dec <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08006fb0 	.word	0x08006fb0

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe fb26 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f8f4 	bl	8003080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_ConfigClockSource+0x1c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0b4      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x186>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f46:	d03e      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xd4>
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f4c:	f200 8087 	bhi.w	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f54:	f000 8086 	beq.w	8003064 <HAL_TIM_ConfigClockSource+0x172>
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5c:	d87f      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f5e:	2b70      	cmp	r3, #112	@ 0x70
 8002f60:	d01a      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0xa6>
 8002f62:	2b70      	cmp	r3, #112	@ 0x70
 8002f64:	d87b      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f66:	2b60      	cmp	r3, #96	@ 0x60
 8002f68:	d050      	beq.n	800300c <HAL_TIM_ConfigClockSource+0x11a>
 8002f6a:	2b60      	cmp	r3, #96	@ 0x60
 8002f6c:	d877      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f6e:	2b50      	cmp	r3, #80	@ 0x50
 8002f70:	d03c      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xfa>
 8002f72:	2b50      	cmp	r3, #80	@ 0x50
 8002f74:	d873      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d058      	beq.n	800302c <HAL_TIM_ConfigClockSource+0x13a>
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d86f      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f7e:	2b30      	cmp	r3, #48	@ 0x30
 8002f80:	d064      	beq.n	800304c <HAL_TIM_ConfigClockSource+0x15a>
 8002f82:	2b30      	cmp	r3, #48	@ 0x30
 8002f84:	d86b      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d060      	beq.n	800304c <HAL_TIM_ConfigClockSource+0x15a>
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d867      	bhi.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d05c      	beq.n	800304c <HAL_TIM_ConfigClockSource+0x15a>
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d05a      	beq.n	800304c <HAL_TIM_ConfigClockSource+0x15a>
 8002f96:	e062      	b.n	800305e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	f000 f990 	bl	80032cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e04f      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fd6:	f000 f979 	bl	80032cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fe8:	609a      	str	r2, [r3, #8]
      break;
 8002fea:	e03c      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f000 f8ed 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2150      	movs	r1, #80	@ 0x50
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f946 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 800300a:	e02c      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003018:	461a      	mov	r2, r3
 800301a:	f000 f90c 	bl	8003236 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2160      	movs	r1, #96	@ 0x60
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f936 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 800302a:	e01c      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003038:	461a      	mov	r2, r3
 800303a:	f000 f8cd 	bl	80031d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2140      	movs	r1, #64	@ 0x40
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f926 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 800304a:	e00c      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f91d 	bl	8003296 <TIM_ITRx_SetConfig>
      break;
 800305c:	e003      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      break;
 8003062:	e000      	b.n	8003066 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003064:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a46      	ldr	r2, [pc, #280]	@ (80031ac <TIM_Base_SetConfig+0x12c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309e:	d00f      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a43      	ldr	r2, [pc, #268]	@ (80031b0 <TIM_Base_SetConfig+0x130>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a42      	ldr	r2, [pc, #264]	@ (80031b4 <TIM_Base_SetConfig+0x134>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a41      	ldr	r2, [pc, #260]	@ (80031b8 <TIM_Base_SetConfig+0x138>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a40      	ldr	r2, [pc, #256]	@ (80031bc <TIM_Base_SetConfig+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a35      	ldr	r2, [pc, #212]	@ (80031ac <TIM_Base_SetConfig+0x12c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e0:	d027      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a32      	ldr	r2, [pc, #200]	@ (80031b0 <TIM_Base_SetConfig+0x130>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d023      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a31      	ldr	r2, [pc, #196]	@ (80031b4 <TIM_Base_SetConfig+0x134>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a30      	ldr	r2, [pc, #192]	@ (80031b8 <TIM_Base_SetConfig+0x138>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2f      	ldr	r2, [pc, #188]	@ (80031bc <TIM_Base_SetConfig+0x13c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d017      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2e      	ldr	r2, [pc, #184]	@ (80031c0 <TIM_Base_SetConfig+0x140>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2d      	ldr	r2, [pc, #180]	@ (80031c4 <TIM_Base_SetConfig+0x144>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00f      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <TIM_Base_SetConfig+0x148>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00b      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2b      	ldr	r2, [pc, #172]	@ (80031cc <TIM_Base_SetConfig+0x14c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2a      	ldr	r2, [pc, #168]	@ (80031d0 <TIM_Base_SetConfig+0x150>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a29      	ldr	r2, [pc, #164]	@ (80031d4 <TIM_Base_SetConfig+0x154>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d108      	bne.n	8003144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a10      	ldr	r2, [pc, #64]	@ (80031ac <TIM_Base_SetConfig+0x12c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0xf8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <TIM_Base_SetConfig+0x13c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]
  }
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40010400 	.word	0x40010400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800
 80031cc:	40001800 	.word	0x40001800
 80031d0:	40001c00 	.word	0x40001c00
 80031d4:	40002000 	.word	0x40002000

080031d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 030a 	bic.w	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	621a      	str	r2, [r3, #32]
}
 800322a:	bf00      	nop
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 0210 	bic.w	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003272:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f043 0307 	orr.w	r3, r3, #7
 80032b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e042      	b.n	80033a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f916 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800334e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fe6b 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d112      	bne.n	80033ec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_UART_Receive_DMA+0x26>
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00b      	b.n	80033ee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	461a      	mov	r2, r3
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fbc2 	bl	8003b6c <UART_Start_Receive_DMA>
 80033e8:	4603      	mov	r3, r0
 80033ea:	e000      	b.n	80033ee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0ba      	sub	sp, #232	@ 0xe8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_UART_IRQHandler+0x66>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fd29 	bl	8003eae <UART_Receive_IT>
      return;
 800345c:	e25b      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80de 	beq.w	8003624 <HAL_UART_IRQHandler+0x22c>
 8003468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80d1 	beq.w	8003624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_UART_IRQHandler+0xae>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_UART_IRQHandler+0xd2>
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_UART_IRQHandler+0xf6>
 80034d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d011      	beq.n	800351e <HAL_UART_IRQHandler+0x126>
 80034fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f043 0208 	orr.w	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 81f2 	beq.w	800390c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_UART_IRQHandler+0x14e>
 8003534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fcb4 	bl	8003eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_UART_IRQHandler+0x17a>
 800356a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04f      	beq.n	8003612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fbbc 	bl	8003cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003582:	2b40      	cmp	r3, #64	@ 0x40
 8003584:	d141      	bne.n	800360a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3314      	adds	r3, #20
 800358c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800359c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1d9      	bne.n	8003586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d013      	beq.n	8003602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	4a7e      	ldr	r2, [pc, #504]	@ (80037d8 <HAL_UART_IRQHandler+0x3e0>)
 80035e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fb74 	bl	8001cd4 <HAL_DMA_Abort_IT>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035fc:	4610      	mov	r0, r2
 80035fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e00e      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f99e 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e00a      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f99a 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	e006      	b.n	8003620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f996 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800361e:	e175      	b.n	800390c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003620:	bf00      	nop
    return;
 8003622:	e173      	b.n	800390c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 814f 	bne.w	80038cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8148 	beq.w	80038cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8141 	beq.w	80038cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	f040 80b6 	bne.w	80037dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800367c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8145 	beq.w	8003910 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800368a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800368e:	429a      	cmp	r2, r3
 8003690:	f080 813e 	bcs.w	8003910 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800369a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a6:	f000 8088 	beq.w	80037ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	330c      	adds	r3, #12
 80036d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1d9      	bne.n	80036aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3314      	adds	r3, #20
 8003716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800371a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800371e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003722:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800372c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e1      	bne.n	80036f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3314      	adds	r3, #20
 8003738:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3314      	adds	r3, #20
 8003752:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003756:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003758:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800375c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e3      	bne.n	8003732 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800378a:	f023 0310 	bic.w	r3, r3, #16
 800378e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800379c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800379e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e3      	bne.n	8003778 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fa1d 	bl	8001bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8c1 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d6:	e09b      	b.n	8003910 <HAL_UART_IRQHandler+0x518>
 80037d8:	08003db7 	.word	0x08003db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808e 	beq.w	8003914 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8089 	beq.w	8003914 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003826:	647a      	str	r2, [r7, #68]	@ 0x44
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800382c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3314      	adds	r3, #20
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	623b      	str	r3, [r7, #32]
   return(result);
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800385e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e3      	bne.n	800383a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038a4:	61fa      	str	r2, [r7, #28]
 80038a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	617b      	str	r3, [r7, #20]
   return(result);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e3      	bne.n	8003880 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f847 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038ca:	e023      	b.n	8003914 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_UART_IRQHandler+0x4f4>
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa7a 	bl	8003dde <UART_Transmit_IT>
    return;
 80038ea:	e014      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <HAL_UART_IRQHandler+0x51e>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 faba 	bl	8003e7e <UART_EndTransmit_IT>
    return;
 800390a:	e004      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
    return;
 800390c:	bf00      	nop
 800390e:	e002      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
      return;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_UART_IRQHandler+0x51e>
      return;
 8003914:	bf00      	nop
  }
}
 8003916:	37e8      	adds	r7, #232	@ 0xe8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b09c      	sub	sp, #112	@ 0x70
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d172      	bne.n	8003a72 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800398c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398e:	2200      	movs	r2, #0
 8003990:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80039b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80039de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80039e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	623b      	str	r3, [r7, #32]
   return(result);
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d119      	bne.n	8003a72 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a5e:	61fa      	str	r2, [r7, #28]
 8003a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a84:	4619      	mov	r1, r3
 8003a86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a88:	f7ff ff66 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8c:	e002      	b.n	8003a94 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003a90:	f7fd fabc 	bl	800100c <HAL_UART_RxCpltCallback>
}
 8003a94:	bf00      	nop
 8003a96:	3770      	adds	r7, #112	@ 0x70
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d108      	bne.n	8003aca <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff ff48 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ac8:	e002      	b.n	8003ad0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f7ff ff30 	bl	8003930 <HAL_UART_RxHalfCpltCallback>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b21      	cmp	r3, #33	@ 0x21
 8003b0a:	d108      	bne.n	8003b1e <UART_DMAError+0x46>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2200      	movs	r2, #0
 8003b16:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003b18:	68b8      	ldr	r0, [r7, #8]
 8003b1a:	f000 f8c1 	bl	8003ca0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b22      	cmp	r3, #34	@ 0x22
 8003b3e:	d108      	bne.n	8003b52 <UART_DMAError+0x7a>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003b4c:	68b8      	ldr	r0, [r7, #8]
 8003b4e:	f000 f8cf 	bl	8003cf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7ff fef0 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b098      	sub	sp, #96	@ 0x60
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2222      	movs	r2, #34	@ 0x22
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	4a3e      	ldr	r2, [pc, #248]	@ (8003c94 <UART_Start_Receive_DMA+0x128>)
 8003b9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8003c98 <UART_Start_Receive_DMA+0x12c>)
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8003c9c <UART_Start_Receive_DMA+0x130>)
 8003baa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	f7fd ffba 	bl	8001b44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d019      	beq.n	8003c22 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e5      	bne.n	8003bee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3314      	adds	r3, #20
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3314      	adds	r3, #20
 8003c40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c42:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	617b      	str	r3, [r7, #20]
   return(result);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c76:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6a39      	ldr	r1, [r7, #32]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e5      	bne.n	8003c56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3760      	adds	r7, #96	@ 0x60
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	08003971 	.word	0x08003971
 8003c98:	08003a9d 	.word	0x08003a9d
 8003c9c:	08003ad9 	.word	0x08003ad9

08003ca0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	61ba      	str	r2, [r7, #24]
 8003cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	6979      	ldr	r1, [r7, #20]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e5      	bne.n	8003ca8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003ce4:	bf00      	nop
 8003ce6:	3724      	adds	r7, #36	@ 0x24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b095      	sub	sp, #84	@ 0x54
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d18:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d119      	bne.n	8003d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	330c      	adds	r3, #12
 8003d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d88:	61ba      	str	r2, [r7, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003daa:	bf00      	nop
 8003dac:	3754      	adds	r7, #84	@ 0x54
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fdb7 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b21      	cmp	r3, #33	@ 0x21
 8003df0:	d13e      	bne.n	8003e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfa:	d114      	bne.n	8003e26 <UART_Transmit_IT+0x48>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d110      	bne.n	8003e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]
 8003e24:	e008      	b.n	8003e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6211      	str	r1, [r2, #32]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4619      	mov	r1, r3
 8003e46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fd3c 	bl	800391c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08c      	sub	sp, #48	@ 0x30
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	@ 0x22
 8003ec0:	f040 80ae 	bne.w	8004020 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ecc:	d117      	bne.n	8003efe <UART_Receive_IT+0x50>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003efc:	e026      	b.n	8003f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f10:	d007      	beq.n	8003f22 <UART_Receive_IT+0x74>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <UART_Receive_IT+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e008      	b.n	8003f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d15d      	bne.n	800401c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0220 	bic.w	r2, r2, #32
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d135      	bne.n	8004012 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 0310 	bic.w	r3, r3, #16
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	623a      	str	r2, [r7, #32]
 8003fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d10a      	bne.n	8004004 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fca4 	bl	8003958 <HAL_UARTEx_RxEventCallback>
 8004010:	e002      	b.n	8004018 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fc fffa 	bl	800100c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e002      	b.n	8004022 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3730      	adds	r7, #48	@ 0x30
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b0c0      	sub	sp, #256	@ 0x100
 8004032:	af00      	add	r7, sp, #0
 8004034:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	ea40 0301 	orr.w	r3, r0, r1
 8004054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004084:	f021 010c 	bic.w	r1, r1, #12
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	6999      	ldr	r1, [r3, #24]
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	ea40 0301 	orr.w	r3, r0, r1
 80040b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8f      	ldr	r3, [pc, #572]	@ (80042f8 <UART_SetConfig+0x2cc>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d005      	beq.n	80040cc <UART_SetConfig+0xa0>
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8d      	ldr	r3, [pc, #564]	@ (80042fc <UART_SetConfig+0x2d0>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d104      	bne.n	80040d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe feae 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 80040d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040d4:	e003      	b.n	80040de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040d6:	f7fe fe95 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 80040da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e8:	f040 810c 	bne.w	8004304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	1891      	adds	r1, r2, r2
 8004104:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004106:	415b      	adcs	r3, r3
 8004108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800410e:	4621      	mov	r1, r4
 8004110:	eb12 0801 	adds.w	r8, r2, r1
 8004114:	4629      	mov	r1, r5
 8004116:	eb43 0901 	adc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800413c:	462b      	mov	r3, r5
 800413e:	eb49 0303 	adc.w	r3, r9, r3
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004152:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800415a:	460b      	mov	r3, r1
 800415c:	18db      	adds	r3, r3, r3
 800415e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004160:	4613      	mov	r3, r2
 8004162:	eb42 0303 	adc.w	r3, r2, r3
 8004166:	657b      	str	r3, [r7, #84]	@ 0x54
 8004168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800416c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004170:	f7fc fd1a 	bl	8000ba8 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2302 	umull	r2, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	011c      	lsls	r4, r3, #4
 8004182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	1891      	adds	r1, r2, r2
 800419a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800419c:	415b      	adcs	r3, r3
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041a4:	4641      	mov	r1, r8
 80041a6:	eb12 0a01 	adds.w	sl, r2, r1
 80041aa:	4649      	mov	r1, r9
 80041ac:	eb43 0b01 	adc.w	fp, r3, r1
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c4:	4692      	mov	sl, r2
 80041c6:	469b      	mov	fp, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	eb1a 0303 	adds.w	r3, sl, r3
 80041ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041d2:	464b      	mov	r3, r9
 80041d4:	eb4b 0303 	adc.w	r3, fp, r3
 80041d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004206:	f7fc fccf 	bl	8000ba8 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4611      	mov	r1, r2
 8004210:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004212:	fba3 2301 	umull	r2, r3, r3, r1
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	1acb      	subs	r3, r1, r3
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004226:	4b36      	ldr	r3, [pc, #216]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004228:	fba3 2302 	umull	r2, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004234:	441c      	add	r4, r3
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004240:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004250:	415b      	adcs	r3, r3
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004258:	4641      	mov	r1, r8
 800425a:	1851      	adds	r1, r2, r1
 800425c:	6339      	str	r1, [r7, #48]	@ 0x30
 800425e:	4649      	mov	r1, r9
 8004260:	414b      	adcs	r3, r1
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004270:	4659      	mov	r1, fp
 8004272:	00cb      	lsls	r3, r1, #3
 8004274:	4651      	mov	r1, sl
 8004276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427a:	4651      	mov	r1, sl
 800427c:	00ca      	lsls	r2, r1, #3
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4603      	mov	r3, r0
 8004284:	4642      	mov	r2, r8
 8004286:	189b      	adds	r3, r3, r2
 8004288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800428c:	464b      	mov	r3, r9
 800428e:	460a      	mov	r2, r1
 8004290:	eb42 0303 	adc.w	r3, r2, r3
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042ac:	460b      	mov	r3, r1
 80042ae:	18db      	adds	r3, r3, r3
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b2:	4613      	mov	r3, r2
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042c2:	f7fc fc71 	bl	8000ba8 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	@ 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	3332      	adds	r3, #50	@ 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042f4:	e106      	b.n	8004504 <UART_SetConfig+0x4d8>
 80042f6:	bf00      	nop
 80042f8:	40011000 	.word	0x40011000
 80042fc:	40011400 	.word	0x40011400
 8004300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800430e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	1891      	adds	r1, r2, r2
 800431c:	6239      	str	r1, [r7, #32]
 800431e:	415b      	adcs	r3, r3
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004326:	4641      	mov	r1, r8
 8004328:	1854      	adds	r4, r2, r1
 800432a:	4649      	mov	r1, r9
 800432c:	eb43 0501 	adc.w	r5, r3, r1
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800434c:	464b      	mov	r3, r9
 800434e:	eb45 0303 	adc.w	r3, r5, r3
 8004352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004362:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004372:	4629      	mov	r1, r5
 8004374:	008b      	lsls	r3, r1, #2
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437c:	4621      	mov	r1, r4
 800437e:	008a      	lsls	r2, r1, #2
 8004380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004384:	f7fc fc10 	bl	8000ba8 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b60      	ldr	r3, [pc, #384]	@ (8004510 <UART_SetConfig+0x4e4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	61b9      	str	r1, [r7, #24]
 80043b0:	415b      	adcs	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	6139      	str	r1, [r7, #16]
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004402:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004410:	4649      	mov	r1, r9
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	4641      	mov	r1, r8
 8004416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441a:	4641      	mov	r1, r8
 800441c:	008a      	lsls	r2, r1, #2
 800441e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004422:	f7fc fbc1 	bl	8000ba8 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4611      	mov	r1, r2
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <UART_SetConfig+0x4e4>)
 800442e:	fba3 2301 	umull	r2, r3, r3, r1
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2264      	movs	r2, #100	@ 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	1acb      	subs	r3, r1, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	@ 0x32
 8004440:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <UART_SetConfig+0x4e4>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444c:	441c      	add	r4, r3
 800444e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004452:	2200      	movs	r2, #0
 8004454:	673b      	str	r3, [r7, #112]	@ 0x70
 8004456:	677a      	str	r2, [r7, #116]	@ 0x74
 8004458:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	415b      	adcs	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449e:	464b      	mov	r3, r9
 80044a0:	460a      	mov	r2, r1
 80044a2:	eb42 0303 	adc.w	r3, r2, r3
 80044a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c0:	4649      	mov	r1, r9
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	4641      	mov	r1, r8
 80044c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ca:	4641      	mov	r1, r8
 80044cc:	008a      	lsls	r2, r1, #2
 80044ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044d2:	f7fc fb69 	bl	8000ba8 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	@ 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	@ 0x32
 80044ee:	4a08      	ldr	r2, [pc, #32]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4422      	add	r2, r4
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004510:	51eb851f 	.word	0x51eb851f

08004514 <__cvt>:
 8004514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004518:	ec57 6b10 	vmov	r6, r7, d0
 800451c:	2f00      	cmp	r7, #0
 800451e:	460c      	mov	r4, r1
 8004520:	4619      	mov	r1, r3
 8004522:	463b      	mov	r3, r7
 8004524:	bfbb      	ittet	lt
 8004526:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800452a:	461f      	movlt	r7, r3
 800452c:	2300      	movge	r3, #0
 800452e:	232d      	movlt	r3, #45	@ 0x2d
 8004530:	700b      	strb	r3, [r1, #0]
 8004532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004534:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004538:	4691      	mov	r9, r2
 800453a:	f023 0820 	bic.w	r8, r3, #32
 800453e:	bfbc      	itt	lt
 8004540:	4632      	movlt	r2, r6
 8004542:	4616      	movlt	r6, r2
 8004544:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004548:	d005      	beq.n	8004556 <__cvt+0x42>
 800454a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800454e:	d100      	bne.n	8004552 <__cvt+0x3e>
 8004550:	3401      	adds	r4, #1
 8004552:	2102      	movs	r1, #2
 8004554:	e000      	b.n	8004558 <__cvt+0x44>
 8004556:	2103      	movs	r1, #3
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	ab02      	add	r3, sp, #8
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	ec47 6b10 	vmov	d0, r6, r7
 8004564:	4653      	mov	r3, sl
 8004566:	4622      	mov	r2, r4
 8004568:	f000 ff3e 	bl	80053e8 <_dtoa_r>
 800456c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004570:	4605      	mov	r5, r0
 8004572:	d119      	bne.n	80045a8 <__cvt+0x94>
 8004574:	f019 0f01 	tst.w	r9, #1
 8004578:	d00e      	beq.n	8004598 <__cvt+0x84>
 800457a:	eb00 0904 	add.w	r9, r0, r4
 800457e:	2200      	movs	r2, #0
 8004580:	2300      	movs	r3, #0
 8004582:	4630      	mov	r0, r6
 8004584:	4639      	mov	r1, r7
 8004586:	f7fc fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800458a:	b108      	cbz	r0, 8004590 <__cvt+0x7c>
 800458c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004590:	2230      	movs	r2, #48	@ 0x30
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	454b      	cmp	r3, r9
 8004596:	d31e      	bcc.n	80045d6 <__cvt+0xc2>
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800459c:	1b5b      	subs	r3, r3, r5
 800459e:	4628      	mov	r0, r5
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	b004      	add	sp, #16
 80045a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045ac:	eb00 0904 	add.w	r9, r0, r4
 80045b0:	d1e5      	bne.n	800457e <__cvt+0x6a>
 80045b2:	7803      	ldrb	r3, [r0, #0]
 80045b4:	2b30      	cmp	r3, #48	@ 0x30
 80045b6:	d10a      	bne.n	80045ce <__cvt+0xba>
 80045b8:	2200      	movs	r2, #0
 80045ba:	2300      	movs	r3, #0
 80045bc:	4630      	mov	r0, r6
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fc fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80045c4:	b918      	cbnz	r0, 80045ce <__cvt+0xba>
 80045c6:	f1c4 0401 	rsb	r4, r4, #1
 80045ca:	f8ca 4000 	str.w	r4, [sl]
 80045ce:	f8da 3000 	ldr.w	r3, [sl]
 80045d2:	4499      	add	r9, r3
 80045d4:	e7d3      	b.n	800457e <__cvt+0x6a>
 80045d6:	1c59      	adds	r1, r3, #1
 80045d8:	9103      	str	r1, [sp, #12]
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e7d9      	b.n	8004592 <__cvt+0x7e>

080045de <__exponent>:
 80045de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e0:	2900      	cmp	r1, #0
 80045e2:	bfba      	itte	lt
 80045e4:	4249      	neglt	r1, r1
 80045e6:	232d      	movlt	r3, #45	@ 0x2d
 80045e8:	232b      	movge	r3, #43	@ 0x2b
 80045ea:	2909      	cmp	r1, #9
 80045ec:	7002      	strb	r2, [r0, #0]
 80045ee:	7043      	strb	r3, [r0, #1]
 80045f0:	dd29      	ble.n	8004646 <__exponent+0x68>
 80045f2:	f10d 0307 	add.w	r3, sp, #7
 80045f6:	461d      	mov	r5, r3
 80045f8:	270a      	movs	r7, #10
 80045fa:	461a      	mov	r2, r3
 80045fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004600:	fb07 1416 	mls	r4, r7, r6, r1
 8004604:	3430      	adds	r4, #48	@ 0x30
 8004606:	f802 4c01 	strb.w	r4, [r2, #-1]
 800460a:	460c      	mov	r4, r1
 800460c:	2c63      	cmp	r4, #99	@ 0x63
 800460e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004612:	4631      	mov	r1, r6
 8004614:	dcf1      	bgt.n	80045fa <__exponent+0x1c>
 8004616:	3130      	adds	r1, #48	@ 0x30
 8004618:	1e94      	subs	r4, r2, #2
 800461a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800461e:	1c41      	adds	r1, r0, #1
 8004620:	4623      	mov	r3, r4
 8004622:	42ab      	cmp	r3, r5
 8004624:	d30a      	bcc.n	800463c <__exponent+0x5e>
 8004626:	f10d 0309 	add.w	r3, sp, #9
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	42ac      	cmp	r4, r5
 800462e:	bf88      	it	hi
 8004630:	2300      	movhi	r3, #0
 8004632:	3302      	adds	r3, #2
 8004634:	4403      	add	r3, r0
 8004636:	1a18      	subs	r0, r3, r0
 8004638:	b003      	add	sp, #12
 800463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004640:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004644:	e7ed      	b.n	8004622 <__exponent+0x44>
 8004646:	2330      	movs	r3, #48	@ 0x30
 8004648:	3130      	adds	r1, #48	@ 0x30
 800464a:	7083      	strb	r3, [r0, #2]
 800464c:	70c1      	strb	r1, [r0, #3]
 800464e:	1d03      	adds	r3, r0, #4
 8004650:	e7f1      	b.n	8004636 <__exponent+0x58>
	...

08004654 <_printf_float>:
 8004654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004658:	b08d      	sub	sp, #52	@ 0x34
 800465a:	460c      	mov	r4, r1
 800465c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004660:	4616      	mov	r6, r2
 8004662:	461f      	mov	r7, r3
 8004664:	4605      	mov	r5, r0
 8004666:	f000 fdbf 	bl	80051e8 <_localeconv_r>
 800466a:	6803      	ldr	r3, [r0, #0]
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fb fdfe 	bl	8000270 <strlen>
 8004674:	2300      	movs	r3, #0
 8004676:	930a      	str	r3, [sp, #40]	@ 0x28
 8004678:	f8d8 3000 	ldr.w	r3, [r8]
 800467c:	9005      	str	r0, [sp, #20]
 800467e:	3307      	adds	r3, #7
 8004680:	f023 0307 	bic.w	r3, r3, #7
 8004684:	f103 0208 	add.w	r2, r3, #8
 8004688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800468c:	f8d4 b000 	ldr.w	fp, [r4]
 8004690:	f8c8 2000 	str.w	r2, [r8]
 8004694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004698:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800469c:	9307      	str	r3, [sp, #28]
 800469e:	f8cd 8018 	str.w	r8, [sp, #24]
 80046a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80046a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046aa:	4b9c      	ldr	r3, [pc, #624]	@ (800491c <_printf_float+0x2c8>)
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	f7fc fa3c 	bl	8000b2c <__aeabi_dcmpun>
 80046b4:	bb70      	cbnz	r0, 8004714 <_printf_float+0xc0>
 80046b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046ba:	4b98      	ldr	r3, [pc, #608]	@ (800491c <_printf_float+0x2c8>)
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	f7fc fa16 	bl	8000af0 <__aeabi_dcmple>
 80046c4:	bb30      	cbnz	r0, 8004714 <_printf_float+0xc0>
 80046c6:	2200      	movs	r2, #0
 80046c8:	2300      	movs	r3, #0
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fc fa05 	bl	8000adc <__aeabi_dcmplt>
 80046d2:	b110      	cbz	r0, 80046da <_printf_float+0x86>
 80046d4:	232d      	movs	r3, #45	@ 0x2d
 80046d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046da:	4a91      	ldr	r2, [pc, #580]	@ (8004920 <_printf_float+0x2cc>)
 80046dc:	4b91      	ldr	r3, [pc, #580]	@ (8004924 <_printf_float+0x2d0>)
 80046de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80046e2:	bf94      	ite	ls
 80046e4:	4690      	movls	r8, r2
 80046e6:	4698      	movhi	r8, r3
 80046e8:	2303      	movs	r3, #3
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	f02b 0304 	bic.w	r3, fp, #4
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	f04f 0900 	mov.w	r9, #0
 80046f6:	9700      	str	r7, [sp, #0]
 80046f8:	4633      	mov	r3, r6
 80046fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80046fc:	4621      	mov	r1, r4
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f9d2 	bl	8004aa8 <_printf_common>
 8004704:	3001      	adds	r0, #1
 8004706:	f040 808d 	bne.w	8004824 <_printf_float+0x1d0>
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	b00d      	add	sp, #52	@ 0x34
 8004710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	4640      	mov	r0, r8
 800471a:	4649      	mov	r1, r9
 800471c:	f7fc fa06 	bl	8000b2c <__aeabi_dcmpun>
 8004720:	b140      	cbz	r0, 8004734 <_printf_float+0xe0>
 8004722:	464b      	mov	r3, r9
 8004724:	2b00      	cmp	r3, #0
 8004726:	bfbc      	itt	lt
 8004728:	232d      	movlt	r3, #45	@ 0x2d
 800472a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800472e:	4a7e      	ldr	r2, [pc, #504]	@ (8004928 <_printf_float+0x2d4>)
 8004730:	4b7e      	ldr	r3, [pc, #504]	@ (800492c <_printf_float+0x2d8>)
 8004732:	e7d4      	b.n	80046de <_printf_float+0x8a>
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800473a:	9206      	str	r2, [sp, #24]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	d13b      	bne.n	80047b8 <_printf_float+0x164>
 8004740:	2306      	movs	r3, #6
 8004742:	6063      	str	r3, [r4, #4]
 8004744:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004748:	2300      	movs	r3, #0
 800474a:	6022      	str	r2, [r4, #0]
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004750:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004754:	ab09      	add	r3, sp, #36	@ 0x24
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	6861      	ldr	r1, [r4, #4]
 800475a:	ec49 8b10 	vmov	d0, r8, r9
 800475e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004762:	4628      	mov	r0, r5
 8004764:	f7ff fed6 	bl	8004514 <__cvt>
 8004768:	9b06      	ldr	r3, [sp, #24]
 800476a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800476c:	2b47      	cmp	r3, #71	@ 0x47
 800476e:	4680      	mov	r8, r0
 8004770:	d129      	bne.n	80047c6 <_printf_float+0x172>
 8004772:	1cc8      	adds	r0, r1, #3
 8004774:	db02      	blt.n	800477c <_printf_float+0x128>
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	4299      	cmp	r1, r3
 800477a:	dd41      	ble.n	8004800 <_printf_float+0x1ac>
 800477c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004780:	fa5f fa8a 	uxtb.w	sl, sl
 8004784:	3901      	subs	r1, #1
 8004786:	4652      	mov	r2, sl
 8004788:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800478c:	9109      	str	r1, [sp, #36]	@ 0x24
 800478e:	f7ff ff26 	bl	80045de <__exponent>
 8004792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004794:	1813      	adds	r3, r2, r0
 8004796:	2a01      	cmp	r2, #1
 8004798:	4681      	mov	r9, r0
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	dc02      	bgt.n	80047a4 <_printf_float+0x150>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	07d2      	lsls	r2, r2, #31
 80047a2:	d501      	bpl.n	80047a8 <_printf_float+0x154>
 80047a4:	3301      	adds	r3, #1
 80047a6:	6123      	str	r3, [r4, #16]
 80047a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0a2      	beq.n	80046f6 <_printf_float+0xa2>
 80047b0:	232d      	movs	r3, #45	@ 0x2d
 80047b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b6:	e79e      	b.n	80046f6 <_printf_float+0xa2>
 80047b8:	9a06      	ldr	r2, [sp, #24]
 80047ba:	2a47      	cmp	r2, #71	@ 0x47
 80047bc:	d1c2      	bne.n	8004744 <_printf_float+0xf0>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1c0      	bne.n	8004744 <_printf_float+0xf0>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e7bd      	b.n	8004742 <_printf_float+0xee>
 80047c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047ca:	d9db      	bls.n	8004784 <_printf_float+0x130>
 80047cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80047d0:	d118      	bne.n	8004804 <_printf_float+0x1b0>
 80047d2:	2900      	cmp	r1, #0
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	dd0b      	ble.n	80047f0 <_printf_float+0x19c>
 80047d8:	6121      	str	r1, [r4, #16]
 80047da:	b913      	cbnz	r3, 80047e2 <_printf_float+0x18e>
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	07d0      	lsls	r0, r2, #31
 80047e0:	d502      	bpl.n	80047e8 <_printf_float+0x194>
 80047e2:	3301      	adds	r3, #1
 80047e4:	440b      	add	r3, r1
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047ea:	f04f 0900 	mov.w	r9, #0
 80047ee:	e7db      	b.n	80047a8 <_printf_float+0x154>
 80047f0:	b913      	cbnz	r3, 80047f8 <_printf_float+0x1a4>
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	07d2      	lsls	r2, r2, #31
 80047f6:	d501      	bpl.n	80047fc <_printf_float+0x1a8>
 80047f8:	3302      	adds	r3, #2
 80047fa:	e7f4      	b.n	80047e6 <_printf_float+0x192>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e7f2      	b.n	80047e6 <_printf_float+0x192>
 8004800:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004806:	4299      	cmp	r1, r3
 8004808:	db05      	blt.n	8004816 <_printf_float+0x1c2>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	6121      	str	r1, [r4, #16]
 800480e:	07d8      	lsls	r0, r3, #31
 8004810:	d5ea      	bpl.n	80047e8 <_printf_float+0x194>
 8004812:	1c4b      	adds	r3, r1, #1
 8004814:	e7e7      	b.n	80047e6 <_printf_float+0x192>
 8004816:	2900      	cmp	r1, #0
 8004818:	bfd4      	ite	le
 800481a:	f1c1 0202 	rsble	r2, r1, #2
 800481e:	2201      	movgt	r2, #1
 8004820:	4413      	add	r3, r2
 8004822:	e7e0      	b.n	80047e6 <_printf_float+0x192>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	055a      	lsls	r2, r3, #21
 8004828:	d407      	bmi.n	800483a <_printf_float+0x1e6>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	4642      	mov	r2, r8
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	d12b      	bne.n	8004890 <_printf_float+0x23c>
 8004838:	e767      	b.n	800470a <_printf_float+0xb6>
 800483a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800483e:	f240 80dd 	bls.w	80049fc <_printf_float+0x3a8>
 8004842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004846:	2200      	movs	r2, #0
 8004848:	2300      	movs	r3, #0
 800484a:	f7fc f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800484e:	2800      	cmp	r0, #0
 8004850:	d033      	beq.n	80048ba <_printf_float+0x266>
 8004852:	4a37      	ldr	r2, [pc, #220]	@ (8004930 <_printf_float+0x2dc>)
 8004854:	2301      	movs	r3, #1
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f af54 	beq.w	800470a <_printf_float+0xb6>
 8004862:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004866:	4543      	cmp	r3, r8
 8004868:	db02      	blt.n	8004870 <_printf_float+0x21c>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	07d8      	lsls	r0, r3, #31
 800486e:	d50f      	bpl.n	8004890 <_printf_float+0x23c>
 8004870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004874:	4631      	mov	r1, r6
 8004876:	4628      	mov	r0, r5
 8004878:	47b8      	blx	r7
 800487a:	3001      	adds	r0, #1
 800487c:	f43f af45 	beq.w	800470a <_printf_float+0xb6>
 8004880:	f04f 0900 	mov.w	r9, #0
 8004884:	f108 38ff 	add.w	r8, r8, #4294967295
 8004888:	f104 0a1a 	add.w	sl, r4, #26
 800488c:	45c8      	cmp	r8, r9
 800488e:	dc09      	bgt.n	80048a4 <_printf_float+0x250>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	079b      	lsls	r3, r3, #30
 8004894:	f100 8103 	bmi.w	8004a9e <_printf_float+0x44a>
 8004898:	68e0      	ldr	r0, [r4, #12]
 800489a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800489c:	4298      	cmp	r0, r3
 800489e:	bfb8      	it	lt
 80048a0:	4618      	movlt	r0, r3
 80048a2:	e734      	b.n	800470e <_printf_float+0xba>
 80048a4:	2301      	movs	r3, #1
 80048a6:	4652      	mov	r2, sl
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	f43f af2b 	beq.w	800470a <_printf_float+0xb6>
 80048b4:	f109 0901 	add.w	r9, r9, #1
 80048b8:	e7e8      	b.n	800488c <_printf_float+0x238>
 80048ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dc39      	bgt.n	8004934 <_printf_float+0x2e0>
 80048c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004930 <_printf_float+0x2dc>)
 80048c2:	2301      	movs	r3, #1
 80048c4:	4631      	mov	r1, r6
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b8      	blx	r7
 80048ca:	3001      	adds	r0, #1
 80048cc:	f43f af1d 	beq.w	800470a <_printf_float+0xb6>
 80048d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80048d4:	ea59 0303 	orrs.w	r3, r9, r3
 80048d8:	d102      	bne.n	80048e0 <_printf_float+0x28c>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	07d9      	lsls	r1, r3, #31
 80048de:	d5d7      	bpl.n	8004890 <_printf_float+0x23c>
 80048e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048e4:	4631      	mov	r1, r6
 80048e6:	4628      	mov	r0, r5
 80048e8:	47b8      	blx	r7
 80048ea:	3001      	adds	r0, #1
 80048ec:	f43f af0d 	beq.w	800470a <_printf_float+0xb6>
 80048f0:	f04f 0a00 	mov.w	sl, #0
 80048f4:	f104 0b1a 	add.w	fp, r4, #26
 80048f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048fa:	425b      	negs	r3, r3
 80048fc:	4553      	cmp	r3, sl
 80048fe:	dc01      	bgt.n	8004904 <_printf_float+0x2b0>
 8004900:	464b      	mov	r3, r9
 8004902:	e793      	b.n	800482c <_printf_float+0x1d8>
 8004904:	2301      	movs	r3, #1
 8004906:	465a      	mov	r2, fp
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f aefb 	beq.w	800470a <_printf_float+0xb6>
 8004914:	f10a 0a01 	add.w	sl, sl, #1
 8004918:	e7ee      	b.n	80048f8 <_printf_float+0x2a4>
 800491a:	bf00      	nop
 800491c:	7fefffff 	.word	0x7fefffff
 8004920:	08006fc0 	.word	0x08006fc0
 8004924:	08006fc4 	.word	0x08006fc4
 8004928:	08006fc8 	.word	0x08006fc8
 800492c:	08006fcc 	.word	0x08006fcc
 8004930:	08006fd0 	.word	0x08006fd0
 8004934:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004936:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800493a:	4553      	cmp	r3, sl
 800493c:	bfa8      	it	ge
 800493e:	4653      	movge	r3, sl
 8004940:	2b00      	cmp	r3, #0
 8004942:	4699      	mov	r9, r3
 8004944:	dc36      	bgt.n	80049b4 <_printf_float+0x360>
 8004946:	f04f 0b00 	mov.w	fp, #0
 800494a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800494e:	f104 021a 	add.w	r2, r4, #26
 8004952:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004954:	9306      	str	r3, [sp, #24]
 8004956:	eba3 0309 	sub.w	r3, r3, r9
 800495a:	455b      	cmp	r3, fp
 800495c:	dc31      	bgt.n	80049c2 <_printf_float+0x36e>
 800495e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004960:	459a      	cmp	sl, r3
 8004962:	dc3a      	bgt.n	80049da <_printf_float+0x386>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07da      	lsls	r2, r3, #31
 8004968:	d437      	bmi.n	80049da <_printf_float+0x386>
 800496a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496c:	ebaa 0903 	sub.w	r9, sl, r3
 8004970:	9b06      	ldr	r3, [sp, #24]
 8004972:	ebaa 0303 	sub.w	r3, sl, r3
 8004976:	4599      	cmp	r9, r3
 8004978:	bfa8      	it	ge
 800497a:	4699      	movge	r9, r3
 800497c:	f1b9 0f00 	cmp.w	r9, #0
 8004980:	dc33      	bgt.n	80049ea <_printf_float+0x396>
 8004982:	f04f 0800 	mov.w	r8, #0
 8004986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800498a:	f104 0b1a 	add.w	fp, r4, #26
 800498e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004990:	ebaa 0303 	sub.w	r3, sl, r3
 8004994:	eba3 0309 	sub.w	r3, r3, r9
 8004998:	4543      	cmp	r3, r8
 800499a:	f77f af79 	ble.w	8004890 <_printf_float+0x23c>
 800499e:	2301      	movs	r3, #1
 80049a0:	465a      	mov	r2, fp
 80049a2:	4631      	mov	r1, r6
 80049a4:	4628      	mov	r0, r5
 80049a6:	47b8      	blx	r7
 80049a8:	3001      	adds	r0, #1
 80049aa:	f43f aeae 	beq.w	800470a <_printf_float+0xb6>
 80049ae:	f108 0801 	add.w	r8, r8, #1
 80049b2:	e7ec      	b.n	800498e <_printf_float+0x33a>
 80049b4:	4642      	mov	r2, r8
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1c2      	bne.n	8004946 <_printf_float+0x2f2>
 80049c0:	e6a3      	b.n	800470a <_printf_float+0xb6>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4631      	mov	r1, r6
 80049c6:	4628      	mov	r0, r5
 80049c8:	9206      	str	r2, [sp, #24]
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	f43f ae9c 	beq.w	800470a <_printf_float+0xb6>
 80049d2:	9a06      	ldr	r2, [sp, #24]
 80049d4:	f10b 0b01 	add.w	fp, fp, #1
 80049d8:	e7bb      	b.n	8004952 <_printf_float+0x2fe>
 80049da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	d1c0      	bne.n	800496a <_printf_float+0x316>
 80049e8:	e68f      	b.n	800470a <_printf_float+0xb6>
 80049ea:	9a06      	ldr	r2, [sp, #24]
 80049ec:	464b      	mov	r3, r9
 80049ee:	4442      	add	r2, r8
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	d1c3      	bne.n	8004982 <_printf_float+0x32e>
 80049fa:	e686      	b.n	800470a <_printf_float+0xb6>
 80049fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a00:	f1ba 0f01 	cmp.w	sl, #1
 8004a04:	dc01      	bgt.n	8004a0a <_printf_float+0x3b6>
 8004a06:	07db      	lsls	r3, r3, #31
 8004a08:	d536      	bpl.n	8004a78 <_printf_float+0x424>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f ae78 	beq.w	800470a <_printf_float+0xb6>
 8004a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f ae70 	beq.w	800470a <_printf_float+0xb6>
 8004a2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2300      	movs	r3, #0
 8004a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a36:	f7fc f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a3a:	b9c0      	cbnz	r0, 8004a6e <_printf_float+0x41a>
 8004a3c:	4653      	mov	r3, sl
 8004a3e:	f108 0201 	add.w	r2, r8, #1
 8004a42:	4631      	mov	r1, r6
 8004a44:	4628      	mov	r0, r5
 8004a46:	47b8      	blx	r7
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d10c      	bne.n	8004a66 <_printf_float+0x412>
 8004a4c:	e65d      	b.n	800470a <_printf_float+0xb6>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	465a      	mov	r2, fp
 8004a52:	4631      	mov	r1, r6
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b8      	blx	r7
 8004a58:	3001      	adds	r0, #1
 8004a5a:	f43f ae56 	beq.w	800470a <_printf_float+0xb6>
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	45d0      	cmp	r8, sl
 8004a64:	dbf3      	blt.n	8004a4e <_printf_float+0x3fa>
 8004a66:	464b      	mov	r3, r9
 8004a68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a6c:	e6df      	b.n	800482e <_printf_float+0x1da>
 8004a6e:	f04f 0800 	mov.w	r8, #0
 8004a72:	f104 0b1a 	add.w	fp, r4, #26
 8004a76:	e7f4      	b.n	8004a62 <_printf_float+0x40e>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4642      	mov	r2, r8
 8004a7c:	e7e1      	b.n	8004a42 <_printf_float+0x3ee>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	464a      	mov	r2, r9
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f ae3e 	beq.w	800470a <_printf_float+0xb6>
 8004a8e:	f108 0801 	add.w	r8, r8, #1
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a96:	1a5b      	subs	r3, r3, r1
 8004a98:	4543      	cmp	r3, r8
 8004a9a:	dcf0      	bgt.n	8004a7e <_printf_float+0x42a>
 8004a9c:	e6fc      	b.n	8004898 <_printf_float+0x244>
 8004a9e:	f04f 0800 	mov.w	r8, #0
 8004aa2:	f104 0919 	add.w	r9, r4, #25
 8004aa6:	e7f4      	b.n	8004a92 <_printf_float+0x43e>

08004aa8 <_printf_common>:
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	4616      	mov	r6, r2
 8004aae:	4698      	mov	r8, r3
 8004ab0:	688a      	ldr	r2, [r1, #8]
 8004ab2:	690b      	ldr	r3, [r1, #16]
 8004ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bfb8      	it	lt
 8004abc:	4613      	movlt	r3, r2
 8004abe:	6033      	str	r3, [r6, #0]
 8004ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	b10a      	cbz	r2, 8004ace <_printf_common+0x26>
 8004aca:	3301      	adds	r3, #1
 8004acc:	6033      	str	r3, [r6, #0]
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	0699      	lsls	r1, r3, #26
 8004ad2:	bf42      	ittt	mi
 8004ad4:	6833      	ldrmi	r3, [r6, #0]
 8004ad6:	3302      	addmi	r3, #2
 8004ad8:	6033      	strmi	r3, [r6, #0]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	f015 0506 	ands.w	r5, r5, #6
 8004ae0:	d106      	bne.n	8004af0 <_printf_common+0x48>
 8004ae2:	f104 0a19 	add.w	sl, r4, #25
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	6832      	ldr	r2, [r6, #0]
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	42ab      	cmp	r3, r5
 8004aee:	dc26      	bgt.n	8004b3e <_printf_common+0x96>
 8004af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	3b00      	subs	r3, #0
 8004af8:	bf18      	it	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	0692      	lsls	r2, r2, #26
 8004afe:	d42b      	bmi.n	8004b58 <_printf_common+0xb0>
 8004b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b04:	4641      	mov	r1, r8
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c8      	blx	r9
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d01e      	beq.n	8004b4c <_printf_common+0xa4>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	6922      	ldr	r2, [r4, #16]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf02      	ittt	eq
 8004b1a:	68e5      	ldreq	r5, [r4, #12]
 8004b1c:	6833      	ldreq	r3, [r6, #0]
 8004b1e:	1aed      	subeq	r5, r5, r3
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	bf0c      	ite	eq
 8004b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b28:	2500      	movne	r5, #0
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	bfc4      	itt	gt
 8004b2e:	1a9b      	subgt	r3, r3, r2
 8004b30:	18ed      	addgt	r5, r5, r3
 8004b32:	2600      	movs	r6, #0
 8004b34:	341a      	adds	r4, #26
 8004b36:	42b5      	cmp	r5, r6
 8004b38:	d11a      	bne.n	8004b70 <_printf_common+0xc8>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e008      	b.n	8004b50 <_printf_common+0xa8>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4652      	mov	r2, sl
 8004b42:	4641      	mov	r1, r8
 8004b44:	4638      	mov	r0, r7
 8004b46:	47c8      	blx	r9
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d103      	bne.n	8004b54 <_printf_common+0xac>
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b54:	3501      	adds	r5, #1
 8004b56:	e7c6      	b.n	8004ae6 <_printf_common+0x3e>
 8004b58:	18e1      	adds	r1, r4, r3
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	2030      	movs	r0, #48	@ 0x30
 8004b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b62:	4422      	add	r2, r4
 8004b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	e7c7      	b.n	8004b00 <_printf_common+0x58>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4622      	mov	r2, r4
 8004b74:	4641      	mov	r1, r8
 8004b76:	4638      	mov	r0, r7
 8004b78:	47c8      	blx	r9
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d0e6      	beq.n	8004b4c <_printf_common+0xa4>
 8004b7e:	3601      	adds	r6, #1
 8004b80:	e7d9      	b.n	8004b36 <_printf_common+0x8e>
	...

08004b84 <_printf_i>:
 8004b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	7e0f      	ldrb	r7, [r1, #24]
 8004b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b8c:	2f78      	cmp	r7, #120	@ 0x78
 8004b8e:	4691      	mov	r9, r2
 8004b90:	4680      	mov	r8, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	469a      	mov	sl, r3
 8004b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b9a:	d807      	bhi.n	8004bac <_printf_i+0x28>
 8004b9c:	2f62      	cmp	r7, #98	@ 0x62
 8004b9e:	d80a      	bhi.n	8004bb6 <_printf_i+0x32>
 8004ba0:	2f00      	cmp	r7, #0
 8004ba2:	f000 80d2 	beq.w	8004d4a <_printf_i+0x1c6>
 8004ba6:	2f58      	cmp	r7, #88	@ 0x58
 8004ba8:	f000 80b9 	beq.w	8004d1e <_printf_i+0x19a>
 8004bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bb4:	e03a      	b.n	8004c2c <_printf_i+0xa8>
 8004bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bba:	2b15      	cmp	r3, #21
 8004bbc:	d8f6      	bhi.n	8004bac <_printf_i+0x28>
 8004bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8004bc4 <_printf_i+0x40>)
 8004bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bc4:	08004c1d 	.word	0x08004c1d
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004bad 	.word	0x08004bad
 8004bd0:	08004bad 	.word	0x08004bad
 8004bd4:	08004bad 	.word	0x08004bad
 8004bd8:	08004bad 	.word	0x08004bad
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004bad 	.word	0x08004bad
 8004be4:	08004bad 	.word	0x08004bad
 8004be8:	08004bad 	.word	0x08004bad
 8004bec:	08004bad 	.word	0x08004bad
 8004bf0:	08004d31 	.word	0x08004d31
 8004bf4:	08004c5b 	.word	0x08004c5b
 8004bf8:	08004ceb 	.word	0x08004ceb
 8004bfc:	08004bad 	.word	0x08004bad
 8004c00:	08004bad 	.word	0x08004bad
 8004c04:	08004d53 	.word	0x08004d53
 8004c08:	08004bad 	.word	0x08004bad
 8004c0c:	08004c5b 	.word	0x08004c5b
 8004c10:	08004bad 	.word	0x08004bad
 8004c14:	08004bad 	.word	0x08004bad
 8004c18:	08004cf3 	.word	0x08004cf3
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6032      	str	r2, [r6, #0]
 8004c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e09d      	b.n	8004d6c <_printf_i+0x1e8>
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	1d19      	adds	r1, r3, #4
 8004c36:	6031      	str	r1, [r6, #0]
 8004c38:	0606      	lsls	r6, r0, #24
 8004c3a:	d501      	bpl.n	8004c40 <_printf_i+0xbc>
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	e003      	b.n	8004c48 <_printf_i+0xc4>
 8004c40:	0645      	lsls	r5, r0, #25
 8004c42:	d5fb      	bpl.n	8004c3c <_printf_i+0xb8>
 8004c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c48:	2d00      	cmp	r5, #0
 8004c4a:	da03      	bge.n	8004c54 <_printf_i+0xd0>
 8004c4c:	232d      	movs	r3, #45	@ 0x2d
 8004c4e:	426d      	negs	r5, r5
 8004c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c54:	4859      	ldr	r0, [pc, #356]	@ (8004dbc <_printf_i+0x238>)
 8004c56:	230a      	movs	r3, #10
 8004c58:	e011      	b.n	8004c7e <_printf_i+0xfa>
 8004c5a:	6821      	ldr	r1, [r4, #0]
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	0608      	lsls	r0, r1, #24
 8004c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c64:	d402      	bmi.n	8004c6c <_printf_i+0xe8>
 8004c66:	0649      	lsls	r1, r1, #25
 8004c68:	bf48      	it	mi
 8004c6a:	b2ad      	uxthmi	r5, r5
 8004c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c6e:	4853      	ldr	r0, [pc, #332]	@ (8004dbc <_printf_i+0x238>)
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	bf14      	ite	ne
 8004c74:	230a      	movne	r3, #10
 8004c76:	2308      	moveq	r3, #8
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c7e:	6866      	ldr	r6, [r4, #4]
 8004c80:	60a6      	str	r6, [r4, #8]
 8004c82:	2e00      	cmp	r6, #0
 8004c84:	bfa2      	ittt	ge
 8004c86:	6821      	ldrge	r1, [r4, #0]
 8004c88:	f021 0104 	bicge.w	r1, r1, #4
 8004c8c:	6021      	strge	r1, [r4, #0]
 8004c8e:	b90d      	cbnz	r5, 8004c94 <_printf_i+0x110>
 8004c90:	2e00      	cmp	r6, #0
 8004c92:	d04b      	beq.n	8004d2c <_printf_i+0x1a8>
 8004c94:	4616      	mov	r6, r2
 8004c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ca4:	462f      	mov	r7, r5
 8004ca6:	42bb      	cmp	r3, r7
 8004ca8:	460d      	mov	r5, r1
 8004caa:	d9f4      	bls.n	8004c96 <_printf_i+0x112>
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d10b      	bne.n	8004cc8 <_printf_i+0x144>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	07df      	lsls	r7, r3, #31
 8004cb4:	d508      	bpl.n	8004cc8 <_printf_i+0x144>
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	6861      	ldr	r1, [r4, #4]
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	bfde      	ittt	le
 8004cbe:	2330      	movle	r3, #48	@ 0x30
 8004cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cc8:	1b92      	subs	r2, r2, r6
 8004cca:	6122      	str	r2, [r4, #16]
 8004ccc:	f8cd a000 	str.w	sl, [sp]
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	aa03      	add	r2, sp, #12
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fee6 	bl	8004aa8 <_printf_common>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d14a      	bne.n	8004d76 <_printf_i+0x1f2>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	b004      	add	sp, #16
 8004ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f043 0320 	orr.w	r3, r3, #32
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	4833      	ldr	r0, [pc, #204]	@ (8004dc0 <_printf_i+0x23c>)
 8004cf4:	2778      	movs	r7, #120	@ 0x78
 8004cf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	6831      	ldr	r1, [r6, #0]
 8004cfe:	061f      	lsls	r7, r3, #24
 8004d00:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d04:	d402      	bmi.n	8004d0c <_printf_i+0x188>
 8004d06:	065f      	lsls	r7, r3, #25
 8004d08:	bf48      	it	mi
 8004d0a:	b2ad      	uxthmi	r5, r5
 8004d0c:	6031      	str	r1, [r6, #0]
 8004d0e:	07d9      	lsls	r1, r3, #31
 8004d10:	bf44      	itt	mi
 8004d12:	f043 0320 	orrmi.w	r3, r3, #32
 8004d16:	6023      	strmi	r3, [r4, #0]
 8004d18:	b11d      	cbz	r5, 8004d22 <_printf_i+0x19e>
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	e7ac      	b.n	8004c78 <_printf_i+0xf4>
 8004d1e:	4827      	ldr	r0, [pc, #156]	@ (8004dbc <_printf_i+0x238>)
 8004d20:	e7e9      	b.n	8004cf6 <_printf_i+0x172>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f023 0320 	bic.w	r3, r3, #32
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	e7f6      	b.n	8004d1a <_printf_i+0x196>
 8004d2c:	4616      	mov	r6, r2
 8004d2e:	e7bd      	b.n	8004cac <_printf_i+0x128>
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	6961      	ldr	r1, [r4, #20]
 8004d36:	1d18      	adds	r0, r3, #4
 8004d38:	6030      	str	r0, [r6, #0]
 8004d3a:	062e      	lsls	r6, r5, #24
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	d501      	bpl.n	8004d44 <_printf_i+0x1c0>
 8004d40:	6019      	str	r1, [r3, #0]
 8004d42:	e002      	b.n	8004d4a <_printf_i+0x1c6>
 8004d44:	0668      	lsls	r0, r5, #25
 8004d46:	d5fb      	bpl.n	8004d40 <_printf_i+0x1bc>
 8004d48:	8019      	strh	r1, [r3, #0]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	4616      	mov	r6, r2
 8004d50:	e7bc      	b.n	8004ccc <_printf_i+0x148>
 8004d52:	6833      	ldr	r3, [r6, #0]
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	6032      	str	r2, [r6, #0]
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f7fb fa36 	bl	80001d0 <memchr>
 8004d64:	b108      	cbz	r0, 8004d6a <_printf_i+0x1e6>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	6060      	str	r0, [r4, #4]
 8004d6a:	6863      	ldr	r3, [r4, #4]
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d74:	e7aa      	b.n	8004ccc <_printf_i+0x148>
 8004d76:	6923      	ldr	r3, [r4, #16]
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	47d0      	blx	sl
 8004d80:	3001      	adds	r0, #1
 8004d82:	d0ad      	beq.n	8004ce0 <_printf_i+0x15c>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	079b      	lsls	r3, r3, #30
 8004d88:	d413      	bmi.n	8004db2 <_printf_i+0x22e>
 8004d8a:	68e0      	ldr	r0, [r4, #12]
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	4298      	cmp	r0, r3
 8004d90:	bfb8      	it	lt
 8004d92:	4618      	movlt	r0, r3
 8004d94:	e7a6      	b.n	8004ce4 <_printf_i+0x160>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4632      	mov	r2, r6
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	47d0      	blx	sl
 8004da0:	3001      	adds	r0, #1
 8004da2:	d09d      	beq.n	8004ce0 <_printf_i+0x15c>
 8004da4:	3501      	adds	r5, #1
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	9903      	ldr	r1, [sp, #12]
 8004daa:	1a5b      	subs	r3, r3, r1
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dcf2      	bgt.n	8004d96 <_printf_i+0x212>
 8004db0:	e7eb      	b.n	8004d8a <_printf_i+0x206>
 8004db2:	2500      	movs	r5, #0
 8004db4:	f104 0619 	add.w	r6, r4, #25
 8004db8:	e7f5      	b.n	8004da6 <_printf_i+0x222>
 8004dba:	bf00      	nop
 8004dbc:	08006fd2 	.word	0x08006fd2
 8004dc0:	08006fe3 	.word	0x08006fe3

08004dc4 <std>:
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	4604      	mov	r4, r0
 8004dca:	e9c0 3300 	strd	r3, r3, [r0]
 8004dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dd2:	6083      	str	r3, [r0, #8]
 8004dd4:	8181      	strh	r1, [r0, #12]
 8004dd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dd8:	81c2      	strh	r2, [r0, #14]
 8004dda:	6183      	str	r3, [r0, #24]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	2208      	movs	r2, #8
 8004de0:	305c      	adds	r0, #92	@ 0x5c
 8004de2:	f000 f9f9 	bl	80051d8 <memset>
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <std+0x58>)
 8004de8:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <std+0x5c>)
 8004dec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <std+0x60>)
 8004df0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <std+0x64>)
 8004df4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <std+0x68>)
 8004df8:	6224      	str	r4, [r4, #32]
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d006      	beq.n	8004e0c <std+0x48>
 8004dfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e02:	4294      	cmp	r4, r2
 8004e04:	d002      	beq.n	8004e0c <std+0x48>
 8004e06:	33d0      	adds	r3, #208	@ 0xd0
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d105      	bne.n	8004e18 <std+0x54>
 8004e0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e14:	f000 ba5c 	b.w	80052d0 <__retarget_lock_init_recursive>
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08005029 	.word	0x08005029
 8004e20:	0800504b 	.word	0x0800504b
 8004e24:	08005083 	.word	0x08005083
 8004e28:	080050a7 	.word	0x080050a7
 8004e2c:	200002f8 	.word	0x200002f8

08004e30 <stdio_exit_handler>:
 8004e30:	4a02      	ldr	r2, [pc, #8]	@ (8004e3c <stdio_exit_handler+0xc>)
 8004e32:	4903      	ldr	r1, [pc, #12]	@ (8004e40 <stdio_exit_handler+0x10>)
 8004e34:	4803      	ldr	r0, [pc, #12]	@ (8004e44 <stdio_exit_handler+0x14>)
 8004e36:	f000 b869 	b.w	8004f0c <_fwalk_sglue>
 8004e3a:	bf00      	nop
 8004e3c:	2000000c 	.word	0x2000000c
 8004e40:	08006c01 	.word	0x08006c01
 8004e44:	2000001c 	.word	0x2000001c

08004e48 <cleanup_stdio>:
 8004e48:	6841      	ldr	r1, [r0, #4]
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e7c <cleanup_stdio+0x34>)
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	4604      	mov	r4, r0
 8004e52:	d001      	beq.n	8004e58 <cleanup_stdio+0x10>
 8004e54:	f001 fed4 	bl	8006c00 <_fflush_r>
 8004e58:	68a1      	ldr	r1, [r4, #8]
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <cleanup_stdio+0x38>)
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	d002      	beq.n	8004e66 <cleanup_stdio+0x1e>
 8004e60:	4620      	mov	r0, r4
 8004e62:	f001 fecd 	bl	8006c00 <_fflush_r>
 8004e66:	68e1      	ldr	r1, [r4, #12]
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <cleanup_stdio+0x3c>)
 8004e6a:	4299      	cmp	r1, r3
 8004e6c:	d004      	beq.n	8004e78 <cleanup_stdio+0x30>
 8004e6e:	4620      	mov	r0, r4
 8004e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e74:	f001 bec4 	b.w	8006c00 <_fflush_r>
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200002f8 	.word	0x200002f8
 8004e80:	20000360 	.word	0x20000360
 8004e84:	200003c8 	.word	0x200003c8

08004e88 <global_stdio_init.part.0>:
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <global_stdio_init.part.0+0x30>)
 8004e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8004ebc <global_stdio_init.part.0+0x34>)
 8004e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec0 <global_stdio_init.part.0+0x38>)
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	4620      	mov	r0, r4
 8004e94:	2200      	movs	r2, #0
 8004e96:	2104      	movs	r1, #4
 8004e98:	f7ff ff94 	bl	8004dc4 <std>
 8004e9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2109      	movs	r1, #9
 8004ea4:	f7ff ff8e 	bl	8004dc4 <std>
 8004ea8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004eac:	2202      	movs	r2, #2
 8004eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb2:	2112      	movs	r1, #18
 8004eb4:	f7ff bf86 	b.w	8004dc4 <std>
 8004eb8:	20000430 	.word	0x20000430
 8004ebc:	200002f8 	.word	0x200002f8
 8004ec0:	08004e31 	.word	0x08004e31

08004ec4 <__sfp_lock_acquire>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	@ (8004ecc <__sfp_lock_acquire+0x8>)
 8004ec6:	f000 ba04 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000439 	.word	0x20000439

08004ed0 <__sfp_lock_release>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	@ (8004ed8 <__sfp_lock_release+0x8>)
 8004ed2:	f000 b9ff 	b.w	80052d4 <__retarget_lock_release_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	20000439 	.word	0x20000439

08004edc <__sinit>:
 8004edc:	b510      	push	{r4, lr}
 8004ede:	4604      	mov	r4, r0
 8004ee0:	f7ff fff0 	bl	8004ec4 <__sfp_lock_acquire>
 8004ee4:	6a23      	ldr	r3, [r4, #32]
 8004ee6:	b11b      	cbz	r3, 8004ef0 <__sinit+0x14>
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eec:	f7ff bff0 	b.w	8004ed0 <__sfp_lock_release>
 8004ef0:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <__sinit+0x28>)
 8004ef2:	6223      	str	r3, [r4, #32]
 8004ef4:	4b04      	ldr	r3, [pc, #16]	@ (8004f08 <__sinit+0x2c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f5      	bne.n	8004ee8 <__sinit+0xc>
 8004efc:	f7ff ffc4 	bl	8004e88 <global_stdio_init.part.0>
 8004f00:	e7f2      	b.n	8004ee8 <__sinit+0xc>
 8004f02:	bf00      	nop
 8004f04:	08004e49 	.word	0x08004e49
 8004f08:	20000430 	.word	0x20000430

08004f0c <_fwalk_sglue>:
 8004f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f10:	4607      	mov	r7, r0
 8004f12:	4688      	mov	r8, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	2600      	movs	r6, #0
 8004f18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f20:	d505      	bpl.n	8004f2e <_fwalk_sglue+0x22>
 8004f22:	6824      	ldr	r4, [r4, #0]
 8004f24:	2c00      	cmp	r4, #0
 8004f26:	d1f7      	bne.n	8004f18 <_fwalk_sglue+0xc>
 8004f28:	4630      	mov	r0, r6
 8004f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d907      	bls.n	8004f44 <_fwalk_sglue+0x38>
 8004f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	d003      	beq.n	8004f44 <_fwalk_sglue+0x38>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c0      	blx	r8
 8004f42:	4306      	orrs	r6, r0
 8004f44:	3568      	adds	r5, #104	@ 0x68
 8004f46:	e7e9      	b.n	8004f1c <_fwalk_sglue+0x10>

08004f48 <iprintf>:
 8004f48:	b40f      	push	{r0, r1, r2, r3}
 8004f4a:	b507      	push	{r0, r1, r2, lr}
 8004f4c:	4906      	ldr	r1, [pc, #24]	@ (8004f68 <iprintf+0x20>)
 8004f4e:	ab04      	add	r3, sp, #16
 8004f50:	6808      	ldr	r0, [r1, #0]
 8004f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f56:	6881      	ldr	r1, [r0, #8]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	f001 fcb5 	bl	80068c8 <_vfiprintf_r>
 8004f5e:	b003      	add	sp, #12
 8004f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f64:	b004      	add	sp, #16
 8004f66:	4770      	bx	lr
 8004f68:	20000018 	.word	0x20000018

08004f6c <_puts_r>:
 8004f6c:	6a03      	ldr	r3, [r0, #32]
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	6884      	ldr	r4, [r0, #8]
 8004f72:	4605      	mov	r5, r0
 8004f74:	460e      	mov	r6, r1
 8004f76:	b90b      	cbnz	r3, 8004f7c <_puts_r+0x10>
 8004f78:	f7ff ffb0 	bl	8004edc <__sinit>
 8004f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f7e:	07db      	lsls	r3, r3, #31
 8004f80:	d405      	bmi.n	8004f8e <_puts_r+0x22>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	0598      	lsls	r0, r3, #22
 8004f86:	d402      	bmi.n	8004f8e <_puts_r+0x22>
 8004f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8a:	f000 f9a2 	bl	80052d2 <__retarget_lock_acquire_recursive>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	0719      	lsls	r1, r3, #28
 8004f92:	d502      	bpl.n	8004f9a <_puts_r+0x2e>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d135      	bne.n	8005006 <_puts_r+0x9a>
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8c5 	bl	800512c <__swsetup_r>
 8004fa2:	b380      	cbz	r0, 8005006 <_puts_r+0x9a>
 8004fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8004fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d405      	bmi.n	8004fba <_puts_r+0x4e>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <_puts_r+0x4e>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fb6:	f000 f98d 	bl	80052d4 <__retarget_lock_release_recursive>
 8004fba:	4628      	mov	r0, r5
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da04      	bge.n	8004fcc <_puts_r+0x60>
 8004fc2:	69a2      	ldr	r2, [r4, #24]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dc17      	bgt.n	8004ff8 <_puts_r+0x8c>
 8004fc8:	290a      	cmp	r1, #10
 8004fca:	d015      	beq.n	8004ff8 <_puts_r+0x8c>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	7019      	strb	r1, [r3, #0]
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	60a3      	str	r3, [r4, #8]
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d1ed      	bne.n	8004fbe <_puts_r+0x52>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da11      	bge.n	800500a <_puts_r+0x9e>
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	210a      	movs	r1, #10
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f85f 	bl	80050ae <__swbuf_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d0d7      	beq.n	8004fa4 <_puts_r+0x38>
 8004ff4:	250a      	movs	r5, #10
 8004ff6:	e7d7      	b.n	8004fa8 <_puts_r+0x3c>
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 f857 	bl	80050ae <__swbuf_r>
 8005000:	3001      	adds	r0, #1
 8005002:	d1e7      	bne.n	8004fd4 <_puts_r+0x68>
 8005004:	e7ce      	b.n	8004fa4 <_puts_r+0x38>
 8005006:	3e01      	subs	r6, #1
 8005008:	e7e4      	b.n	8004fd4 <_puts_r+0x68>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	6022      	str	r2, [r4, #0]
 8005010:	220a      	movs	r2, #10
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e7ee      	b.n	8004ff4 <_puts_r+0x88>
	...

08005018 <puts>:
 8005018:	4b02      	ldr	r3, [pc, #8]	@ (8005024 <puts+0xc>)
 800501a:	4601      	mov	r1, r0
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	f7ff bfa5 	b.w	8004f6c <_puts_r>
 8005022:	bf00      	nop
 8005024:	20000018 	.word	0x20000018

08005028 <__sread>:
 8005028:	b510      	push	{r4, lr}
 800502a:	460c      	mov	r4, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	f000 f900 	bl	8005234 <_read_r>
 8005034:	2800      	cmp	r0, #0
 8005036:	bfab      	itete	ge
 8005038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800503a:	89a3      	ldrhlt	r3, [r4, #12]
 800503c:	181b      	addge	r3, r3, r0
 800503e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005042:	bfac      	ite	ge
 8005044:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005046:	81a3      	strhlt	r3, [r4, #12]
 8005048:	bd10      	pop	{r4, pc}

0800504a <__swrite>:
 800504a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	461f      	mov	r7, r3
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	4605      	mov	r5, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4616      	mov	r6, r2
 800505a:	d505      	bpl.n	8005068 <__swrite+0x1e>
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2302      	movs	r3, #2
 8005062:	2200      	movs	r2, #0
 8005064:	f000 f8d4 	bl	8005210 <_lseek_r>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005072:	81a3      	strh	r3, [r4, #12]
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	f000 b8eb 	b.w	8005258 <_write_r>

08005082 <__sseek>:
 8005082:	b510      	push	{r4, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508a:	f000 f8c1 	bl	8005210 <_lseek_r>
 800508e:	1c43      	adds	r3, r0, #1
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	bf15      	itete	ne
 8005094:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800509a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800509e:	81a3      	strheq	r3, [r4, #12]
 80050a0:	bf18      	it	ne
 80050a2:	81a3      	strhne	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__sclose>:
 80050a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050aa:	f000 b8a1 	b.w	80051f0 <_close_r>

080050ae <__swbuf_r>:
 80050ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b0:	460e      	mov	r6, r1
 80050b2:	4614      	mov	r4, r2
 80050b4:	4605      	mov	r5, r0
 80050b6:	b118      	cbz	r0, 80050c0 <__swbuf_r+0x12>
 80050b8:	6a03      	ldr	r3, [r0, #32]
 80050ba:	b90b      	cbnz	r3, 80050c0 <__swbuf_r+0x12>
 80050bc:	f7ff ff0e 	bl	8004edc <__sinit>
 80050c0:	69a3      	ldr	r3, [r4, #24]
 80050c2:	60a3      	str	r3, [r4, #8]
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	071a      	lsls	r2, r3, #28
 80050c8:	d501      	bpl.n	80050ce <__swbuf_r+0x20>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	b943      	cbnz	r3, 80050e0 <__swbuf_r+0x32>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 f82b 	bl	800512c <__swsetup_r>
 80050d6:	b118      	cbz	r0, 80050e0 <__swbuf_r+0x32>
 80050d8:	f04f 37ff 	mov.w	r7, #4294967295
 80050dc:	4638      	mov	r0, r7
 80050de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	6922      	ldr	r2, [r4, #16]
 80050e4:	1a98      	subs	r0, r3, r2
 80050e6:	6963      	ldr	r3, [r4, #20]
 80050e8:	b2f6      	uxtb	r6, r6
 80050ea:	4283      	cmp	r3, r0
 80050ec:	4637      	mov	r7, r6
 80050ee:	dc05      	bgt.n	80050fc <__swbuf_r+0x4e>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f001 fd84 	bl	8006c00 <_fflush_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d1ed      	bne.n	80050d8 <__swbuf_r+0x2a>
 80050fc:	68a3      	ldr	r3, [r4, #8]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	701e      	strb	r6, [r3, #0]
 800510a:	6962      	ldr	r2, [r4, #20]
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	429a      	cmp	r2, r3
 8005110:	d004      	beq.n	800511c <__swbuf_r+0x6e>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	07db      	lsls	r3, r3, #31
 8005116:	d5e1      	bpl.n	80050dc <__swbuf_r+0x2e>
 8005118:	2e0a      	cmp	r6, #10
 800511a:	d1df      	bne.n	80050dc <__swbuf_r+0x2e>
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f001 fd6e 	bl	8006c00 <_fflush_r>
 8005124:	2800      	cmp	r0, #0
 8005126:	d0d9      	beq.n	80050dc <__swbuf_r+0x2e>
 8005128:	e7d6      	b.n	80050d8 <__swbuf_r+0x2a>
	...

0800512c <__swsetup_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4b29      	ldr	r3, [pc, #164]	@ (80051d4 <__swsetup_r+0xa8>)
 8005130:	4605      	mov	r5, r0
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	460c      	mov	r4, r1
 8005136:	b118      	cbz	r0, 8005140 <__swsetup_r+0x14>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	b90b      	cbnz	r3, 8005140 <__swsetup_r+0x14>
 800513c:	f7ff fece 	bl	8004edc <__sinit>
 8005140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005144:	0719      	lsls	r1, r3, #28
 8005146:	d422      	bmi.n	800518e <__swsetup_r+0x62>
 8005148:	06da      	lsls	r2, r3, #27
 800514a:	d407      	bmi.n	800515c <__swsetup_r+0x30>
 800514c:	2209      	movs	r2, #9
 800514e:	602a      	str	r2, [r5, #0]
 8005150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	e033      	b.n	80051c4 <__swsetup_r+0x98>
 800515c:	0758      	lsls	r0, r3, #29
 800515e:	d512      	bpl.n	8005186 <__swsetup_r+0x5a>
 8005160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005162:	b141      	cbz	r1, 8005176 <__swsetup_r+0x4a>
 8005164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005168:	4299      	cmp	r1, r3
 800516a:	d002      	beq.n	8005172 <__swsetup_r+0x46>
 800516c:	4628      	mov	r0, r5
 800516e:	f000 feff 	bl	8005f70 <_free_r>
 8005172:	2300      	movs	r3, #0
 8005174:	6363      	str	r3, [r4, #52]	@ 0x34
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	2300      	movs	r3, #0
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	b94b      	cbnz	r3, 80051a6 <__swsetup_r+0x7a>
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800519c:	d003      	beq.n	80051a6 <__swsetup_r+0x7a>
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f001 fd7b 	bl	8006c9c <__smakebuf_r>
 80051a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051aa:	f013 0201 	ands.w	r2, r3, #1
 80051ae:	d00a      	beq.n	80051c6 <__swsetup_r+0x9a>
 80051b0:	2200      	movs	r2, #0
 80051b2:	60a2      	str	r2, [r4, #8]
 80051b4:	6962      	ldr	r2, [r4, #20]
 80051b6:	4252      	negs	r2, r2
 80051b8:	61a2      	str	r2, [r4, #24]
 80051ba:	6922      	ldr	r2, [r4, #16]
 80051bc:	b942      	cbnz	r2, 80051d0 <__swsetup_r+0xa4>
 80051be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051c2:	d1c5      	bne.n	8005150 <__swsetup_r+0x24>
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	0799      	lsls	r1, r3, #30
 80051c8:	bf58      	it	pl
 80051ca:	6962      	ldrpl	r2, [r4, #20]
 80051cc:	60a2      	str	r2, [r4, #8]
 80051ce:	e7f4      	b.n	80051ba <__swsetup_r+0x8e>
 80051d0:	2000      	movs	r0, #0
 80051d2:	e7f7      	b.n	80051c4 <__swsetup_r+0x98>
 80051d4:	20000018 	.word	0x20000018

080051d8 <memset>:
 80051d8:	4402      	add	r2, r0
 80051da:	4603      	mov	r3, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	d100      	bne.n	80051e2 <memset+0xa>
 80051e0:	4770      	bx	lr
 80051e2:	f803 1b01 	strb.w	r1, [r3], #1
 80051e6:	e7f9      	b.n	80051dc <memset+0x4>

080051e8 <_localeconv_r>:
 80051e8:	4800      	ldr	r0, [pc, #0]	@ (80051ec <_localeconv_r+0x4>)
 80051ea:	4770      	bx	lr
 80051ec:	20000158 	.word	0x20000158

080051f0 <_close_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d06      	ldr	r5, [pc, #24]	@ (800520c <_close_r+0x1c>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	f7fc f8c2 	bl	8001384 <_close>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_close_r+0x1a>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_close_r+0x1a>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000434 	.word	0x20000434

08005210 <_lseek_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d07      	ldr	r5, [pc, #28]	@ (8005230 <_lseek_r+0x20>)
 8005214:	4604      	mov	r4, r0
 8005216:	4608      	mov	r0, r1
 8005218:	4611      	mov	r1, r2
 800521a:	2200      	movs	r2, #0
 800521c:	602a      	str	r2, [r5, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	f7fc f8d7 	bl	80013d2 <_lseek>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_lseek_r+0x1e>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_lseek_r+0x1e>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20000434 	.word	0x20000434

08005234 <_read_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	@ (8005254 <_read_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fc f881 	bl	800134a <_read>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_read_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_read_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20000434 	.word	0x20000434

08005258 <_write_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d07      	ldr	r5, [pc, #28]	@ (8005278 <_write_r+0x20>)
 800525c:	4604      	mov	r4, r0
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	2200      	movs	r2, #0
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f7fb fe93 	bl	8000f92 <_write>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_write_r+0x1e>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	b103      	cbz	r3, 8005276 <_write_r+0x1e>
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	20000434 	.word	0x20000434

0800527c <__errno>:
 800527c:	4b01      	ldr	r3, [pc, #4]	@ (8005284 <__errno+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000018 	.word	0x20000018

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4d0d      	ldr	r5, [pc, #52]	@ (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	@ (80052c4 <__libc_init_array+0x3c>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2600      	movs	r6, #0
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4d0b      	ldr	r5, [pc, #44]	@ (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	@ (80052cc <__libc_init_array+0x44>)
 800529c:	f001 fe2a 	bl	8006ef4 <_init>
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2600      	movs	r6, #0
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08007338 	.word	0x08007338
 80052c4:	08007338 	.word	0x08007338
 80052c8:	08007338 	.word	0x08007338
 80052cc:	0800733c 	.word	0x0800733c

080052d0 <__retarget_lock_init_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_acquire_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__retarget_lock_release_recursive>:
 80052d4:	4770      	bx	lr

080052d6 <quorem>:
 80052d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	6903      	ldr	r3, [r0, #16]
 80052dc:	690c      	ldr	r4, [r1, #16]
 80052de:	42a3      	cmp	r3, r4
 80052e0:	4607      	mov	r7, r0
 80052e2:	db7e      	blt.n	80053e2 <quorem+0x10c>
 80052e4:	3c01      	subs	r4, #1
 80052e6:	f101 0814 	add.w	r8, r1, #20
 80052ea:	00a3      	lsls	r3, r4, #2
 80052ec:	f100 0514 	add.w	r5, r0, #20
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005300:	3301      	adds	r3, #1
 8005302:	429a      	cmp	r2, r3
 8005304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005308:	fbb2 f6f3 	udiv	r6, r2, r3
 800530c:	d32e      	bcc.n	800536c <quorem+0x96>
 800530e:	f04f 0a00 	mov.w	sl, #0
 8005312:	46c4      	mov	ip, r8
 8005314:	46ae      	mov	lr, r5
 8005316:	46d3      	mov	fp, sl
 8005318:	f85c 3b04 	ldr.w	r3, [ip], #4
 800531c:	b298      	uxth	r0, r3
 800531e:	fb06 a000 	mla	r0, r6, r0, sl
 8005322:	0c02      	lsrs	r2, r0, #16
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	fb06 2303 	mla	r3, r6, r3, r2
 800532a:	f8de 2000 	ldr.w	r2, [lr]
 800532e:	b280      	uxth	r0, r0
 8005330:	b292      	uxth	r2, r2
 8005332:	1a12      	subs	r2, r2, r0
 8005334:	445a      	add	r2, fp
 8005336:	f8de 0000 	ldr.w	r0, [lr]
 800533a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800533e:	b29b      	uxth	r3, r3
 8005340:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005344:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005348:	b292      	uxth	r2, r2
 800534a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800534e:	45e1      	cmp	r9, ip
 8005350:	f84e 2b04 	str.w	r2, [lr], #4
 8005354:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005358:	d2de      	bcs.n	8005318 <quorem+0x42>
 800535a:	9b00      	ldr	r3, [sp, #0]
 800535c:	58eb      	ldr	r3, [r5, r3]
 800535e:	b92b      	cbnz	r3, 800536c <quorem+0x96>
 8005360:	9b01      	ldr	r3, [sp, #4]
 8005362:	3b04      	subs	r3, #4
 8005364:	429d      	cmp	r5, r3
 8005366:	461a      	mov	r2, r3
 8005368:	d32f      	bcc.n	80053ca <quorem+0xf4>
 800536a:	613c      	str	r4, [r7, #16]
 800536c:	4638      	mov	r0, r7
 800536e:	f001 f979 	bl	8006664 <__mcmp>
 8005372:	2800      	cmp	r0, #0
 8005374:	db25      	blt.n	80053c2 <quorem+0xec>
 8005376:	4629      	mov	r1, r5
 8005378:	2000      	movs	r0, #0
 800537a:	f858 2b04 	ldr.w	r2, [r8], #4
 800537e:	f8d1 c000 	ldr.w	ip, [r1]
 8005382:	fa1f fe82 	uxth.w	lr, r2
 8005386:	fa1f f38c 	uxth.w	r3, ip
 800538a:	eba3 030e 	sub.w	r3, r3, lr
 800538e:	4403      	add	r3, r0
 8005390:	0c12      	lsrs	r2, r2, #16
 8005392:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005396:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053a0:	45c1      	cmp	r9, r8
 80053a2:	f841 3b04 	str.w	r3, [r1], #4
 80053a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80053aa:	d2e6      	bcs.n	800537a <quorem+0xa4>
 80053ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053b4:	b922      	cbnz	r2, 80053c0 <quorem+0xea>
 80053b6:	3b04      	subs	r3, #4
 80053b8:	429d      	cmp	r5, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	d30b      	bcc.n	80053d6 <quorem+0x100>
 80053be:	613c      	str	r4, [r7, #16]
 80053c0:	3601      	adds	r6, #1
 80053c2:	4630      	mov	r0, r6
 80053c4:	b003      	add	sp, #12
 80053c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d1cb      	bne.n	800536a <quorem+0x94>
 80053d2:	3c01      	subs	r4, #1
 80053d4:	e7c6      	b.n	8005364 <quorem+0x8e>
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	3b04      	subs	r3, #4
 80053da:	2a00      	cmp	r2, #0
 80053dc:	d1ef      	bne.n	80053be <quorem+0xe8>
 80053de:	3c01      	subs	r4, #1
 80053e0:	e7ea      	b.n	80053b8 <quorem+0xe2>
 80053e2:	2000      	movs	r0, #0
 80053e4:	e7ee      	b.n	80053c4 <quorem+0xee>
	...

080053e8 <_dtoa_r>:
 80053e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ec:	69c7      	ldr	r7, [r0, #28]
 80053ee:	b099      	sub	sp, #100	@ 0x64
 80053f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053f4:	ec55 4b10 	vmov	r4, r5, d0
 80053f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80053fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80053fc:	4683      	mov	fp, r0
 80053fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005400:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005402:	b97f      	cbnz	r7, 8005424 <_dtoa_r+0x3c>
 8005404:	2010      	movs	r0, #16
 8005406:	f000 fdfd 	bl	8006004 <malloc>
 800540a:	4602      	mov	r2, r0
 800540c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005410:	b920      	cbnz	r0, 800541c <_dtoa_r+0x34>
 8005412:	4ba7      	ldr	r3, [pc, #668]	@ (80056b0 <_dtoa_r+0x2c8>)
 8005414:	21ef      	movs	r1, #239	@ 0xef
 8005416:	48a7      	ldr	r0, [pc, #668]	@ (80056b4 <_dtoa_r+0x2cc>)
 8005418:	f001 fcbc 	bl	8006d94 <__assert_func>
 800541c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005420:	6007      	str	r7, [r0, #0]
 8005422:	60c7      	str	r7, [r0, #12]
 8005424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	b159      	cbz	r1, 8005444 <_dtoa_r+0x5c>
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	604a      	str	r2, [r1, #4]
 8005430:	2301      	movs	r3, #1
 8005432:	4093      	lsls	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
 8005436:	4658      	mov	r0, fp
 8005438:	f000 feda 	bl	80061f0 <_Bfree>
 800543c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	1e2b      	subs	r3, r5, #0
 8005446:	bfb9      	ittee	lt
 8005448:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800544c:	9303      	strlt	r3, [sp, #12]
 800544e:	2300      	movge	r3, #0
 8005450:	6033      	strge	r3, [r6, #0]
 8005452:	9f03      	ldr	r7, [sp, #12]
 8005454:	4b98      	ldr	r3, [pc, #608]	@ (80056b8 <_dtoa_r+0x2d0>)
 8005456:	bfbc      	itt	lt
 8005458:	2201      	movlt	r2, #1
 800545a:	6032      	strlt	r2, [r6, #0]
 800545c:	43bb      	bics	r3, r7
 800545e:	d112      	bne.n	8005486 <_dtoa_r+0x9e>
 8005460:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005462:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800546c:	4323      	orrs	r3, r4
 800546e:	f000 854d 	beq.w	8005f0c <_dtoa_r+0xb24>
 8005472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005474:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80056cc <_dtoa_r+0x2e4>
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 854f 	beq.w	8005f1c <_dtoa_r+0xb34>
 800547e:	f10a 0303 	add.w	r3, sl, #3
 8005482:	f000 bd49 	b.w	8005f18 <_dtoa_r+0xb30>
 8005486:	ed9d 7b02 	vldr	d7, [sp, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	ec51 0b17 	vmov	r0, r1, d7
 8005490:	2300      	movs	r3, #0
 8005492:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005496:	f7fb fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800549a:	4680      	mov	r8, r0
 800549c:	b158      	cbz	r0, 80054b6 <_dtoa_r+0xce>
 800549e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054a0:	2301      	movs	r3, #1
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80054a6:	b113      	cbz	r3, 80054ae <_dtoa_r+0xc6>
 80054a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80054aa:	4b84      	ldr	r3, [pc, #528]	@ (80056bc <_dtoa_r+0x2d4>)
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80056d0 <_dtoa_r+0x2e8>
 80054b2:	f000 bd33 	b.w	8005f1c <_dtoa_r+0xb34>
 80054b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80054ba:	aa16      	add	r2, sp, #88	@ 0x58
 80054bc:	a917      	add	r1, sp, #92	@ 0x5c
 80054be:	4658      	mov	r0, fp
 80054c0:	f001 f980 	bl	80067c4 <__d2b>
 80054c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054c8:	4681      	mov	r9, r0
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d077      	beq.n	80055be <_dtoa_r+0x1d6>
 80054ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054e8:	4619      	mov	r1, r3
 80054ea:	2200      	movs	r2, #0
 80054ec:	4b74      	ldr	r3, [pc, #464]	@ (80056c0 <_dtoa_r+0x2d8>)
 80054ee:	f7fa fecb 	bl	8000288 <__aeabi_dsub>
 80054f2:	a369      	add	r3, pc, #420	@ (adr r3, 8005698 <_dtoa_r+0x2b0>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	a368      	add	r3, pc, #416	@ (adr r3, 80056a0 <_dtoa_r+0x2b8>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fec3 	bl	800028c <__adddf3>
 8005506:	4604      	mov	r4, r0
 8005508:	4630      	mov	r0, r6
 800550a:	460d      	mov	r5, r1
 800550c:	f7fb f80a 	bl	8000524 <__aeabi_i2d>
 8005510:	a365      	add	r3, pc, #404	@ (adr r3, 80056a8 <_dtoa_r+0x2c0>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4604      	mov	r4, r0
 8005528:	460d      	mov	r5, r1
 800552a:	f7fb fb15 	bl	8000b58 <__aeabi_d2iz>
 800552e:	2200      	movs	r2, #0
 8005530:	4607      	mov	r7, r0
 8005532:	2300      	movs	r3, #0
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	f7fb fad0 	bl	8000adc <__aeabi_dcmplt>
 800553c:	b140      	cbz	r0, 8005550 <_dtoa_r+0x168>
 800553e:	4638      	mov	r0, r7
 8005540:	f7fa fff0 	bl	8000524 <__aeabi_i2d>
 8005544:	4622      	mov	r2, r4
 8005546:	462b      	mov	r3, r5
 8005548:	f7fb fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800554c:	b900      	cbnz	r0, 8005550 <_dtoa_r+0x168>
 800554e:	3f01      	subs	r7, #1
 8005550:	2f16      	cmp	r7, #22
 8005552:	d851      	bhi.n	80055f8 <_dtoa_r+0x210>
 8005554:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <_dtoa_r+0x2dc>)
 8005556:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005562:	f7fb fabb 	bl	8000adc <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d048      	beq.n	80055fc <_dtoa_r+0x214>
 800556a:	3f01      	subs	r7, #1
 800556c:	2300      	movs	r3, #0
 800556e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005570:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005572:	1b9b      	subs	r3, r3, r6
 8005574:	1e5a      	subs	r2, r3, #1
 8005576:	bf44      	itt	mi
 8005578:	f1c3 0801 	rsbmi	r8, r3, #1
 800557c:	2300      	movmi	r3, #0
 800557e:	9208      	str	r2, [sp, #32]
 8005580:	bf54      	ite	pl
 8005582:	f04f 0800 	movpl.w	r8, #0
 8005586:	9308      	strmi	r3, [sp, #32]
 8005588:	2f00      	cmp	r7, #0
 800558a:	db39      	blt.n	8005600 <_dtoa_r+0x218>
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005590:	443b      	add	r3, r7
 8005592:	9308      	str	r3, [sp, #32]
 8005594:	2300      	movs	r3, #0
 8005596:	930a      	str	r3, [sp, #40]	@ 0x28
 8005598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559a:	2b09      	cmp	r3, #9
 800559c:	d864      	bhi.n	8005668 <_dtoa_r+0x280>
 800559e:	2b05      	cmp	r3, #5
 80055a0:	bfc4      	itt	gt
 80055a2:	3b04      	subgt	r3, #4
 80055a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80055a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a8:	f1a3 0302 	sub.w	r3, r3, #2
 80055ac:	bfcc      	ite	gt
 80055ae:	2400      	movgt	r4, #0
 80055b0:	2401      	movle	r4, #1
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d863      	bhi.n	800567e <_dtoa_r+0x296>
 80055b6:	e8df f003 	tbb	[pc, r3]
 80055ba:	372a      	.short	0x372a
 80055bc:	5535      	.short	0x5535
 80055be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80055c2:	441e      	add	r6, r3
 80055c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	bfc1      	itttt	gt
 80055cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055d0:	409f      	lslgt	r7, r3
 80055d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055da:	bfd6      	itet	le
 80055dc:	f1c3 0320 	rsble	r3, r3, #32
 80055e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80055e4:	fa04 f003 	lslle.w	r0, r4, r3
 80055e8:	f7fa ff8c 	bl	8000504 <__aeabi_ui2d>
 80055ec:	2201      	movs	r2, #1
 80055ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055f2:	3e01      	subs	r6, #1
 80055f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80055f6:	e777      	b.n	80054e8 <_dtoa_r+0x100>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e7b8      	b.n	800556e <_dtoa_r+0x186>
 80055fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80055fe:	e7b7      	b.n	8005570 <_dtoa_r+0x188>
 8005600:	427b      	negs	r3, r7
 8005602:	930a      	str	r3, [sp, #40]	@ 0x28
 8005604:	2300      	movs	r3, #0
 8005606:	eba8 0807 	sub.w	r8, r8, r7
 800560a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800560c:	e7c4      	b.n	8005598 <_dtoa_r+0x1b0>
 800560e:	2300      	movs	r3, #0
 8005610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc35      	bgt.n	8005684 <_dtoa_r+0x29c>
 8005618:	2301      	movs	r3, #1
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	461a      	mov	r2, r3
 8005620:	920e      	str	r2, [sp, #56]	@ 0x38
 8005622:	e00b      	b.n	800563c <_dtoa_r+0x254>
 8005624:	2301      	movs	r3, #1
 8005626:	e7f3      	b.n	8005610 <_dtoa_r+0x228>
 8005628:	2300      	movs	r3, #0
 800562a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800562c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	bfb8      	it	lt
 800563a:	2301      	movlt	r3, #1
 800563c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005640:	2100      	movs	r1, #0
 8005642:	2204      	movs	r2, #4
 8005644:	f102 0514 	add.w	r5, r2, #20
 8005648:	429d      	cmp	r5, r3
 800564a:	d91f      	bls.n	800568c <_dtoa_r+0x2a4>
 800564c:	6041      	str	r1, [r0, #4]
 800564e:	4658      	mov	r0, fp
 8005650:	f000 fd8e 	bl	8006170 <_Balloc>
 8005654:	4682      	mov	sl, r0
 8005656:	2800      	cmp	r0, #0
 8005658:	d13c      	bne.n	80056d4 <_dtoa_r+0x2ec>
 800565a:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <_dtoa_r+0x2e0>)
 800565c:	4602      	mov	r2, r0
 800565e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005662:	e6d8      	b.n	8005416 <_dtoa_r+0x2e>
 8005664:	2301      	movs	r3, #1
 8005666:	e7e0      	b.n	800562a <_dtoa_r+0x242>
 8005668:	2401      	movs	r4, #1
 800566a:	2300      	movs	r3, #0
 800566c:	9309      	str	r3, [sp, #36]	@ 0x24
 800566e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005670:	f04f 33ff 	mov.w	r3, #4294967295
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	2200      	movs	r2, #0
 800567a:	2312      	movs	r3, #18
 800567c:	e7d0      	b.n	8005620 <_dtoa_r+0x238>
 800567e:	2301      	movs	r3, #1
 8005680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005682:	e7f5      	b.n	8005670 <_dtoa_r+0x288>
 8005684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	9307      	str	r3, [sp, #28]
 800568a:	e7d7      	b.n	800563c <_dtoa_r+0x254>
 800568c:	3101      	adds	r1, #1
 800568e:	0052      	lsls	r2, r2, #1
 8005690:	e7d8      	b.n	8005644 <_dtoa_r+0x25c>
 8005692:	bf00      	nop
 8005694:	f3af 8000 	nop.w
 8005698:	636f4361 	.word	0x636f4361
 800569c:	3fd287a7 	.word	0x3fd287a7
 80056a0:	8b60c8b3 	.word	0x8b60c8b3
 80056a4:	3fc68a28 	.word	0x3fc68a28
 80056a8:	509f79fb 	.word	0x509f79fb
 80056ac:	3fd34413 	.word	0x3fd34413
 80056b0:	08007001 	.word	0x08007001
 80056b4:	08007018 	.word	0x08007018
 80056b8:	7ff00000 	.word	0x7ff00000
 80056bc:	08006fd1 	.word	0x08006fd1
 80056c0:	3ff80000 	.word	0x3ff80000
 80056c4:	08007110 	.word	0x08007110
 80056c8:	08007070 	.word	0x08007070
 80056cc:	08006ffd 	.word	0x08006ffd
 80056d0:	08006fd0 	.word	0x08006fd0
 80056d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	2b0e      	cmp	r3, #14
 80056de:	f200 80a4 	bhi.w	800582a <_dtoa_r+0x442>
 80056e2:	2c00      	cmp	r4, #0
 80056e4:	f000 80a1 	beq.w	800582a <_dtoa_r+0x442>
 80056e8:	2f00      	cmp	r7, #0
 80056ea:	dd33      	ble.n	8005754 <_dtoa_r+0x36c>
 80056ec:	4bad      	ldr	r3, [pc, #692]	@ (80059a4 <_dtoa_r+0x5bc>)
 80056ee:	f007 020f 	and.w	r2, r7, #15
 80056f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f6:	ed93 7b00 	vldr	d7, [r3]
 80056fa:	05f8      	lsls	r0, r7, #23
 80056fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005700:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005704:	d516      	bpl.n	8005734 <_dtoa_r+0x34c>
 8005706:	4ba8      	ldr	r3, [pc, #672]	@ (80059a8 <_dtoa_r+0x5c0>)
 8005708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800570c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005710:	f7fb f89c 	bl	800084c <__aeabi_ddiv>
 8005714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005718:	f004 040f 	and.w	r4, r4, #15
 800571c:	2603      	movs	r6, #3
 800571e:	4da2      	ldr	r5, [pc, #648]	@ (80059a8 <_dtoa_r+0x5c0>)
 8005720:	b954      	cbnz	r4, 8005738 <_dtoa_r+0x350>
 8005722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572a:	f7fb f88f 	bl	800084c <__aeabi_ddiv>
 800572e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005732:	e028      	b.n	8005786 <_dtoa_r+0x39e>
 8005734:	2602      	movs	r6, #2
 8005736:	e7f2      	b.n	800571e <_dtoa_r+0x336>
 8005738:	07e1      	lsls	r1, r4, #31
 800573a:	d508      	bpl.n	800574e <_dtoa_r+0x366>
 800573c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005740:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005744:	f7fa ff58 	bl	80005f8 <__aeabi_dmul>
 8005748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800574c:	3601      	adds	r6, #1
 800574e:	1064      	asrs	r4, r4, #1
 8005750:	3508      	adds	r5, #8
 8005752:	e7e5      	b.n	8005720 <_dtoa_r+0x338>
 8005754:	f000 80d2 	beq.w	80058fc <_dtoa_r+0x514>
 8005758:	427c      	negs	r4, r7
 800575a:	4b92      	ldr	r3, [pc, #584]	@ (80059a4 <_dtoa_r+0x5bc>)
 800575c:	4d92      	ldr	r5, [pc, #584]	@ (80059a8 <_dtoa_r+0x5c0>)
 800575e:	f004 020f 	and.w	r2, r4, #15
 8005762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800576e:	f7fa ff43 	bl	80005f8 <__aeabi_dmul>
 8005772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005776:	1124      	asrs	r4, r4, #4
 8005778:	2300      	movs	r3, #0
 800577a:	2602      	movs	r6, #2
 800577c:	2c00      	cmp	r4, #0
 800577e:	f040 80b2 	bne.w	80058e6 <_dtoa_r+0x4fe>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1d3      	bne.n	800572e <_dtoa_r+0x346>
 8005786:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005788:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80b7 	beq.w	8005900 <_dtoa_r+0x518>
 8005792:	4b86      	ldr	r3, [pc, #536]	@ (80059ac <_dtoa_r+0x5c4>)
 8005794:	2200      	movs	r2, #0
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fb f99f 	bl	8000adc <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f000 80ae 	beq.w	8005900 <_dtoa_r+0x518>
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80aa 	beq.w	8005900 <_dtoa_r+0x518>
 80057ac:	9b00      	ldr	r3, [sp, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dd37      	ble.n	8005822 <_dtoa_r+0x43a>
 80057b2:	1e7b      	subs	r3, r7, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	4620      	mov	r0, r4
 80057b8:	4b7d      	ldr	r3, [pc, #500]	@ (80059b0 <_dtoa_r+0x5c8>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	4629      	mov	r1, r5
 80057be:	f7fa ff1b 	bl	80005f8 <__aeabi_dmul>
 80057c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c6:	9c00      	ldr	r4, [sp, #0]
 80057c8:	3601      	adds	r6, #1
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7fa feaa 	bl	8000524 <__aeabi_i2d>
 80057d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057d4:	f7fa ff10 	bl	80005f8 <__aeabi_dmul>
 80057d8:	4b76      	ldr	r3, [pc, #472]	@ (80059b4 <_dtoa_r+0x5cc>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f7fa fd56 	bl	800028c <__adddf3>
 80057e0:	4605      	mov	r5, r0
 80057e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	f040 808d 	bne.w	8005906 <_dtoa_r+0x51e>
 80057ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057f0:	4b71      	ldr	r3, [pc, #452]	@ (80059b8 <_dtoa_r+0x5d0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	f7fa fd48 	bl	8000288 <__aeabi_dsub>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005800:	462a      	mov	r2, r5
 8005802:	4633      	mov	r3, r6
 8005804:	f7fb f988 	bl	8000b18 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	f040 828b 	bne.w	8005d24 <_dtoa_r+0x93c>
 800580e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005812:	462a      	mov	r2, r5
 8005814:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005818:	f7fb f960 	bl	8000adc <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f040 8128 	bne.w	8005a72 <_dtoa_r+0x68a>
 8005822:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005826:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800582a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800582c:	2b00      	cmp	r3, #0
 800582e:	f2c0 815a 	blt.w	8005ae6 <_dtoa_r+0x6fe>
 8005832:	2f0e      	cmp	r7, #14
 8005834:	f300 8157 	bgt.w	8005ae6 <_dtoa_r+0x6fe>
 8005838:	4b5a      	ldr	r3, [pc, #360]	@ (80059a4 <_dtoa_r+0x5bc>)
 800583a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800583e:	ed93 7b00 	vldr	d7, [r3]
 8005842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	ed8d 7b00 	vstr	d7, [sp]
 800584a:	da03      	bge.n	8005854 <_dtoa_r+0x46c>
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f340 8101 	ble.w	8005a56 <_dtoa_r+0x66e>
 8005854:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005858:	4656      	mov	r6, sl
 800585a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fa fff3 	bl	800084c <__aeabi_ddiv>
 8005866:	f7fb f977 	bl	8000b58 <__aeabi_d2iz>
 800586a:	4680      	mov	r8, r0
 800586c:	f7fa fe5a 	bl	8000524 <__aeabi_i2d>
 8005870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005874:	f7fa fec0 	bl	80005f8 <__aeabi_dmul>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005884:	f7fa fd00 	bl	8000288 <__aeabi_dsub>
 8005888:	f806 4b01 	strb.w	r4, [r6], #1
 800588c:	9d07      	ldr	r5, [sp, #28]
 800588e:	eba6 040a 	sub.w	r4, r6, sl
 8005892:	42a5      	cmp	r5, r4
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	f040 8117 	bne.w	8005aca <_dtoa_r+0x6e2>
 800589c:	f7fa fcf6 	bl	800028c <__adddf3>
 80058a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058a4:	4604      	mov	r4, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	f7fb f936 	bl	8000b18 <__aeabi_dcmpgt>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f040 80f9 	bne.w	8005aa4 <_dtoa_r+0x6bc>
 80058b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80058be:	b118      	cbz	r0, 80058c8 <_dtoa_r+0x4e0>
 80058c0:	f018 0f01 	tst.w	r8, #1
 80058c4:	f040 80ee 	bne.w	8005aa4 <_dtoa_r+0x6bc>
 80058c8:	4649      	mov	r1, r9
 80058ca:	4658      	mov	r0, fp
 80058cc:	f000 fc90 	bl	80061f0 <_Bfree>
 80058d0:	2300      	movs	r3, #0
 80058d2:	7033      	strb	r3, [r6, #0]
 80058d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058d6:	3701      	adds	r7, #1
 80058d8:	601f      	str	r7, [r3, #0]
 80058da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 831d 	beq.w	8005f1c <_dtoa_r+0xb34>
 80058e2:	601e      	str	r6, [r3, #0]
 80058e4:	e31a      	b.n	8005f1c <_dtoa_r+0xb34>
 80058e6:	07e2      	lsls	r2, r4, #31
 80058e8:	d505      	bpl.n	80058f6 <_dtoa_r+0x50e>
 80058ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058ee:	f7fa fe83 	bl	80005f8 <__aeabi_dmul>
 80058f2:	3601      	adds	r6, #1
 80058f4:	2301      	movs	r3, #1
 80058f6:	1064      	asrs	r4, r4, #1
 80058f8:	3508      	adds	r5, #8
 80058fa:	e73f      	b.n	800577c <_dtoa_r+0x394>
 80058fc:	2602      	movs	r6, #2
 80058fe:	e742      	b.n	8005786 <_dtoa_r+0x39e>
 8005900:	9c07      	ldr	r4, [sp, #28]
 8005902:	9704      	str	r7, [sp, #16]
 8005904:	e761      	b.n	80057ca <_dtoa_r+0x3e2>
 8005906:	4b27      	ldr	r3, [pc, #156]	@ (80059a4 <_dtoa_r+0x5bc>)
 8005908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800590a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800590e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005912:	4454      	add	r4, sl
 8005914:	2900      	cmp	r1, #0
 8005916:	d053      	beq.n	80059c0 <_dtoa_r+0x5d8>
 8005918:	4928      	ldr	r1, [pc, #160]	@ (80059bc <_dtoa_r+0x5d4>)
 800591a:	2000      	movs	r0, #0
 800591c:	f7fa ff96 	bl	800084c <__aeabi_ddiv>
 8005920:	4633      	mov	r3, r6
 8005922:	462a      	mov	r2, r5
 8005924:	f7fa fcb0 	bl	8000288 <__aeabi_dsub>
 8005928:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800592c:	4656      	mov	r6, sl
 800592e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005932:	f7fb f911 	bl	8000b58 <__aeabi_d2iz>
 8005936:	4605      	mov	r5, r0
 8005938:	f7fa fdf4 	bl	8000524 <__aeabi_i2d>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005944:	f7fa fca0 	bl	8000288 <__aeabi_dsub>
 8005948:	3530      	adds	r5, #48	@ 0x30
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005952:	f806 5b01 	strb.w	r5, [r6], #1
 8005956:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800595a:	f7fb f8bf 	bl	8000adc <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	d171      	bne.n	8005a46 <_dtoa_r+0x65e>
 8005962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005966:	4911      	ldr	r1, [pc, #68]	@ (80059ac <_dtoa_r+0x5c4>)
 8005968:	2000      	movs	r0, #0
 800596a:	f7fa fc8d 	bl	8000288 <__aeabi_dsub>
 800596e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005972:	f7fb f8b3 	bl	8000adc <__aeabi_dcmplt>
 8005976:	2800      	cmp	r0, #0
 8005978:	f040 8095 	bne.w	8005aa6 <_dtoa_r+0x6be>
 800597c:	42a6      	cmp	r6, r4
 800597e:	f43f af50 	beq.w	8005822 <_dtoa_r+0x43a>
 8005982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <_dtoa_r+0x5c8>)
 8005988:	2200      	movs	r2, #0
 800598a:	f7fa fe35 	bl	80005f8 <__aeabi_dmul>
 800598e:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <_dtoa_r+0x5c8>)
 8005990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005994:	2200      	movs	r2, #0
 8005996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599a:	f7fa fe2d 	bl	80005f8 <__aeabi_dmul>
 800599e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a2:	e7c4      	b.n	800592e <_dtoa_r+0x546>
 80059a4:	08007110 	.word	0x08007110
 80059a8:	080070e8 	.word	0x080070e8
 80059ac:	3ff00000 	.word	0x3ff00000
 80059b0:	40240000 	.word	0x40240000
 80059b4:	401c0000 	.word	0x401c0000
 80059b8:	40140000 	.word	0x40140000
 80059bc:	3fe00000 	.word	0x3fe00000
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_dmul>
 80059c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80059ce:	4656      	mov	r6, sl
 80059d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059d4:	f7fb f8c0 	bl	8000b58 <__aeabi_d2iz>
 80059d8:	4605      	mov	r5, r0
 80059da:	f7fa fda3 	bl	8000524 <__aeabi_i2d>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e6:	f7fa fc4f 	bl	8000288 <__aeabi_dsub>
 80059ea:	3530      	adds	r5, #48	@ 0x30
 80059ec:	f806 5b01 	strb.w	r5, [r6], #1
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	d124      	bne.n	8005a4a <_dtoa_r+0x662>
 8005a00:	4bac      	ldr	r3, [pc, #688]	@ (8005cb4 <_dtoa_r+0x8cc>)
 8005a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a06:	f7fa fc41 	bl	800028c <__adddf3>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fb f881 	bl	8000b18 <__aeabi_dcmpgt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d145      	bne.n	8005aa6 <_dtoa_r+0x6be>
 8005a1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a1e:	49a5      	ldr	r1, [pc, #660]	@ (8005cb4 <_dtoa_r+0x8cc>)
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7fa fc31 	bl	8000288 <__aeabi_dsub>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	f7fb f855 	bl	8000adc <__aeabi_dcmplt>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f43f aef5 	beq.w	8005822 <_dtoa_r+0x43a>
 8005a38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005a3a:	1e73      	subs	r3, r6, #1
 8005a3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a42:	2b30      	cmp	r3, #48	@ 0x30
 8005a44:	d0f8      	beq.n	8005a38 <_dtoa_r+0x650>
 8005a46:	9f04      	ldr	r7, [sp, #16]
 8005a48:	e73e      	b.n	80058c8 <_dtoa_r+0x4e0>
 8005a4a:	4b9b      	ldr	r3, [pc, #620]	@ (8005cb8 <_dtoa_r+0x8d0>)
 8005a4c:	f7fa fdd4 	bl	80005f8 <__aeabi_dmul>
 8005a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a54:	e7bc      	b.n	80059d0 <_dtoa_r+0x5e8>
 8005a56:	d10c      	bne.n	8005a72 <_dtoa_r+0x68a>
 8005a58:	4b98      	ldr	r3, [pc, #608]	@ (8005cbc <_dtoa_r+0x8d4>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a60:	f7fa fdca 	bl	80005f8 <__aeabi_dmul>
 8005a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a68:	f7fb f84c 	bl	8000b04 <__aeabi_dcmpge>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f000 8157 	beq.w	8005d20 <_dtoa_r+0x938>
 8005a72:	2400      	movs	r4, #0
 8005a74:	4625      	mov	r5, r4
 8005a76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	4656      	mov	r6, sl
 8005a7e:	2700      	movs	r7, #0
 8005a80:	4621      	mov	r1, r4
 8005a82:	4658      	mov	r0, fp
 8005a84:	f000 fbb4 	bl	80061f0 <_Bfree>
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	d0dc      	beq.n	8005a46 <_dtoa_r+0x65e>
 8005a8c:	b12f      	cbz	r7, 8005a9a <_dtoa_r+0x6b2>
 8005a8e:	42af      	cmp	r7, r5
 8005a90:	d003      	beq.n	8005a9a <_dtoa_r+0x6b2>
 8005a92:	4639      	mov	r1, r7
 8005a94:	4658      	mov	r0, fp
 8005a96:	f000 fbab 	bl	80061f0 <_Bfree>
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 fba7 	bl	80061f0 <_Bfree>
 8005aa2:	e7d0      	b.n	8005a46 <_dtoa_r+0x65e>
 8005aa4:	9704      	str	r7, [sp, #16]
 8005aa6:	4633      	mov	r3, r6
 8005aa8:	461e      	mov	r6, r3
 8005aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aae:	2a39      	cmp	r2, #57	@ 0x39
 8005ab0:	d107      	bne.n	8005ac2 <_dtoa_r+0x6da>
 8005ab2:	459a      	cmp	sl, r3
 8005ab4:	d1f8      	bne.n	8005aa8 <_dtoa_r+0x6c0>
 8005ab6:	9a04      	ldr	r2, [sp, #16]
 8005ab8:	3201      	adds	r2, #1
 8005aba:	9204      	str	r2, [sp, #16]
 8005abc:	2230      	movs	r2, #48	@ 0x30
 8005abe:	f88a 2000 	strb.w	r2, [sl]
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	3201      	adds	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e7bd      	b.n	8005a46 <_dtoa_r+0x65e>
 8005aca:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb8 <_dtoa_r+0x8d0>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	f7fa fd93 	bl	80005f8 <__aeabi_dmul>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460d      	mov	r5, r1
 8005ada:	f7fa fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f aebb 	beq.w	800585a <_dtoa_r+0x472>
 8005ae4:	e6f0      	b.n	80058c8 <_dtoa_r+0x4e0>
 8005ae6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	f000 80db 	beq.w	8005ca4 <_dtoa_r+0x8bc>
 8005aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af0:	2a01      	cmp	r2, #1
 8005af2:	f300 80bf 	bgt.w	8005c74 <_dtoa_r+0x88c>
 8005af6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	f000 80b7 	beq.w	8005c6c <_dtoa_r+0x884>
 8005afe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b04:	4646      	mov	r6, r8
 8005b06:	9a08      	ldr	r2, [sp, #32]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	441a      	add	r2, r3
 8005b0c:	4658      	mov	r0, fp
 8005b0e:	4498      	add	r8, r3
 8005b10:	9208      	str	r2, [sp, #32]
 8005b12:	f000 fc21 	bl	8006358 <__i2b>
 8005b16:	4605      	mov	r5, r0
 8005b18:	b15e      	cbz	r6, 8005b32 <_dtoa_r+0x74a>
 8005b1a:	9b08      	ldr	r3, [sp, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dd08      	ble.n	8005b32 <_dtoa_r+0x74a>
 8005b20:	42b3      	cmp	r3, r6
 8005b22:	9a08      	ldr	r2, [sp, #32]
 8005b24:	bfa8      	it	ge
 8005b26:	4633      	movge	r3, r6
 8005b28:	eba8 0803 	sub.w	r8, r8, r3
 8005b2c:	1af6      	subs	r6, r6, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	9308      	str	r3, [sp, #32]
 8005b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b34:	b1f3      	cbz	r3, 8005b74 <_dtoa_r+0x78c>
 8005b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80b7 	beq.w	8005cac <_dtoa_r+0x8c4>
 8005b3e:	b18c      	cbz	r4, 8005b64 <_dtoa_r+0x77c>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4622      	mov	r2, r4
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 fcc7 	bl	80064d8 <__pow5mult>
 8005b4a:	464a      	mov	r2, r9
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4605      	mov	r5, r0
 8005b50:	4658      	mov	r0, fp
 8005b52:	f000 fc17 	bl	8006384 <__multiply>
 8005b56:	4649      	mov	r1, r9
 8005b58:	9004      	str	r0, [sp, #16]
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 fb48 	bl	80061f0 <_Bfree>
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	4699      	mov	r9, r3
 8005b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b66:	1b1a      	subs	r2, r3, r4
 8005b68:	d004      	beq.n	8005b74 <_dtoa_r+0x78c>
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f000 fcb3 	bl	80064d8 <__pow5mult>
 8005b72:	4681      	mov	r9, r0
 8005b74:	2101      	movs	r1, #1
 8005b76:	4658      	mov	r0, fp
 8005b78:	f000 fbee 	bl	8006358 <__i2b>
 8005b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b7e:	4604      	mov	r4, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 81cf 	beq.w	8005f24 <_dtoa_r+0xb3c>
 8005b86:	461a      	mov	r2, r3
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4658      	mov	r0, fp
 8005b8c:	f000 fca4 	bl	80064d8 <__pow5mult>
 8005b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	4604      	mov	r4, r0
 8005b96:	f300 8095 	bgt.w	8005cc4 <_dtoa_r+0x8dc>
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8087 	bne.w	8005cb0 <_dtoa_r+0x8c8>
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f040 8089 	bne.w	8005cc0 <_dtoa_r+0x8d8>
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bb4:	0d1b      	lsrs	r3, r3, #20
 8005bb6:	051b      	lsls	r3, r3, #20
 8005bb8:	b12b      	cbz	r3, 8005bc6 <_dtoa_r+0x7de>
 8005bba:	9b08      	ldr	r3, [sp, #32]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	9308      	str	r3, [sp, #32]
 8005bc0:	f108 0801 	add.w	r8, r8, #1
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 81b0 	beq.w	8005f30 <_dtoa_r+0xb48>
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bd6:	6918      	ldr	r0, [r3, #16]
 8005bd8:	f000 fb72 	bl	80062c0 <__hi0bits>
 8005bdc:	f1c0 0020 	rsb	r0, r0, #32
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	4418      	add	r0, r3
 8005be4:	f010 001f 	ands.w	r0, r0, #31
 8005be8:	d077      	beq.n	8005cda <_dtoa_r+0x8f2>
 8005bea:	f1c0 0320 	rsb	r3, r0, #32
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	dd6b      	ble.n	8005cca <_dtoa_r+0x8e2>
 8005bf2:	9b08      	ldr	r3, [sp, #32]
 8005bf4:	f1c0 001c 	rsb	r0, r0, #28
 8005bf8:	4403      	add	r3, r0
 8005bfa:	4480      	add	r8, r0
 8005bfc:	4406      	add	r6, r0
 8005bfe:	9308      	str	r3, [sp, #32]
 8005c00:	f1b8 0f00 	cmp.w	r8, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x82a>
 8005c06:	4649      	mov	r1, r9
 8005c08:	4642      	mov	r2, r8
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f000 fcbe 	bl	800658c <__lshift>
 8005c10:	4681      	mov	r9, r0
 8005c12:	9b08      	ldr	r3, [sp, #32]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd05      	ble.n	8005c24 <_dtoa_r+0x83c>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4658      	mov	r0, fp
 8005c1e:	f000 fcb5 	bl	800658c <__lshift>
 8005c22:	4604      	mov	r4, r0
 8005c24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d059      	beq.n	8005cde <_dtoa_r+0x8f6>
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f000 fd19 	bl	8006664 <__mcmp>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	da53      	bge.n	8005cde <_dtoa_r+0x8f6>
 8005c36:	1e7b      	subs	r3, r7, #1
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	220a      	movs	r2, #10
 8005c40:	4658      	mov	r0, fp
 8005c42:	f000 faf7 	bl	8006234 <__multadd>
 8005c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c48:	4681      	mov	r9, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8172 	beq.w	8005f34 <_dtoa_r+0xb4c>
 8005c50:	2300      	movs	r3, #0
 8005c52:	4629      	mov	r1, r5
 8005c54:	220a      	movs	r2, #10
 8005c56:	4658      	mov	r0, fp
 8005c58:	f000 faec 	bl	8006234 <__multadd>
 8005c5c:	9b00      	ldr	r3, [sp, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	4605      	mov	r5, r0
 8005c62:	dc67      	bgt.n	8005d34 <_dtoa_r+0x94c>
 8005c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	dc41      	bgt.n	8005cee <_dtoa_r+0x906>
 8005c6a:	e063      	b.n	8005d34 <_dtoa_r+0x94c>
 8005c6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c72:	e746      	b.n	8005b02 <_dtoa_r+0x71a>
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	1e5c      	subs	r4, r3, #1
 8005c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c7a:	42a3      	cmp	r3, r4
 8005c7c:	bfbf      	itttt	lt
 8005c7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c84:	1ae3      	sublt	r3, r4, r3
 8005c86:	bfb4      	ite	lt
 8005c88:	18d2      	addlt	r2, r2, r3
 8005c8a:	1b1c      	subge	r4, r3, r4
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	bfbc      	itt	lt
 8005c90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c92:	2400      	movlt	r4, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bfb5      	itete	lt
 8005c98:	eba8 0603 	sublt.w	r6, r8, r3
 8005c9c:	9b07      	ldrge	r3, [sp, #28]
 8005c9e:	2300      	movlt	r3, #0
 8005ca0:	4646      	movge	r6, r8
 8005ca2:	e730      	b.n	8005b06 <_dtoa_r+0x71e>
 8005ca4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ca6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ca8:	4646      	mov	r6, r8
 8005caa:	e735      	b.n	8005b18 <_dtoa_r+0x730>
 8005cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cae:	e75c      	b.n	8005b6a <_dtoa_r+0x782>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e788      	b.n	8005bc6 <_dtoa_r+0x7de>
 8005cb4:	3fe00000 	.word	0x3fe00000
 8005cb8:	40240000 	.word	0x40240000
 8005cbc:	40140000 	.word	0x40140000
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	e780      	b.n	8005bc6 <_dtoa_r+0x7de>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc8:	e782      	b.n	8005bd0 <_dtoa_r+0x7e8>
 8005cca:	d099      	beq.n	8005c00 <_dtoa_r+0x818>
 8005ccc:	9a08      	ldr	r2, [sp, #32]
 8005cce:	331c      	adds	r3, #28
 8005cd0:	441a      	add	r2, r3
 8005cd2:	4498      	add	r8, r3
 8005cd4:	441e      	add	r6, r3
 8005cd6:	9208      	str	r2, [sp, #32]
 8005cd8:	e792      	b.n	8005c00 <_dtoa_r+0x818>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e7f6      	b.n	8005ccc <_dtoa_r+0x8e4>
 8005cde:	9b07      	ldr	r3, [sp, #28]
 8005ce0:	9704      	str	r7, [sp, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc20      	bgt.n	8005d28 <_dtoa_r+0x940>
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	dd1e      	ble.n	8005d2c <_dtoa_r+0x944>
 8005cee:	9b00      	ldr	r3, [sp, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f47f aec0 	bne.w	8005a76 <_dtoa_r+0x68e>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	4658      	mov	r0, fp
 8005cfc:	f000 fa9a 	bl	8006234 <__multadd>
 8005d00:	4601      	mov	r1, r0
 8005d02:	4604      	mov	r4, r0
 8005d04:	4648      	mov	r0, r9
 8005d06:	f000 fcad 	bl	8006664 <__mcmp>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f77f aeb3 	ble.w	8005a76 <_dtoa_r+0x68e>
 8005d10:	4656      	mov	r6, sl
 8005d12:	2331      	movs	r3, #49	@ 0x31
 8005d14:	f806 3b01 	strb.w	r3, [r6], #1
 8005d18:	9b04      	ldr	r3, [sp, #16]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	9304      	str	r3, [sp, #16]
 8005d1e:	e6ae      	b.n	8005a7e <_dtoa_r+0x696>
 8005d20:	9c07      	ldr	r4, [sp, #28]
 8005d22:	9704      	str	r7, [sp, #16]
 8005d24:	4625      	mov	r5, r4
 8005d26:	e7f3      	b.n	8005d10 <_dtoa_r+0x928>
 8005d28:	9b07      	ldr	r3, [sp, #28]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8104 	beq.w	8005f3c <_dtoa_r+0xb54>
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd05      	ble.n	8005d44 <_dtoa_r+0x95c>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4658      	mov	r0, fp
 8005d3e:	f000 fc25 	bl	800658c <__lshift>
 8005d42:	4605      	mov	r5, r0
 8005d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d05a      	beq.n	8005e00 <_dtoa_r+0xa18>
 8005d4a:	6869      	ldr	r1, [r5, #4]
 8005d4c:	4658      	mov	r0, fp
 8005d4e:	f000 fa0f 	bl	8006170 <_Balloc>
 8005d52:	4606      	mov	r6, r0
 8005d54:	b928      	cbnz	r0, 8005d62 <_dtoa_r+0x97a>
 8005d56:	4b84      	ldr	r3, [pc, #528]	@ (8005f68 <_dtoa_r+0xb80>)
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d5e:	f7ff bb5a 	b.w	8005416 <_dtoa_r+0x2e>
 8005d62:	692a      	ldr	r2, [r5, #16]
 8005d64:	3202      	adds	r2, #2
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	f105 010c 	add.w	r1, r5, #12
 8005d6c:	300c      	adds	r0, #12
 8005d6e:	f001 f803 	bl	8006d78 <memcpy>
 8005d72:	2201      	movs	r2, #1
 8005d74:	4631      	mov	r1, r6
 8005d76:	4658      	mov	r0, fp
 8005d78:	f000 fc08 	bl	800658c <__lshift>
 8005d7c:	f10a 0301 	add.w	r3, sl, #1
 8005d80:	9307      	str	r3, [sp, #28]
 8005d82:	9b00      	ldr	r3, [sp, #0]
 8005d84:	4453      	add	r3, sl
 8005d86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	462f      	mov	r7, r5
 8005d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d92:	4605      	mov	r5, r0
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	4621      	mov	r1, r4
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	4648      	mov	r0, r9
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	f7ff fa9a 	bl	80052d6 <quorem>
 8005da2:	4639      	mov	r1, r7
 8005da4:	9002      	str	r0, [sp, #8]
 8005da6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005daa:	4648      	mov	r0, r9
 8005dac:	f000 fc5a 	bl	8006664 <__mcmp>
 8005db0:	462a      	mov	r2, r5
 8005db2:	9008      	str	r0, [sp, #32]
 8005db4:	4621      	mov	r1, r4
 8005db6:	4658      	mov	r0, fp
 8005db8:	f000 fc70 	bl	800669c <__mdiff>
 8005dbc:	68c2      	ldr	r2, [r0, #12]
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	bb02      	cbnz	r2, 8005e04 <_dtoa_r+0xa1c>
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4648      	mov	r0, r9
 8005dc6:	f000 fc4d 	bl	8006664 <__mcmp>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4658      	mov	r0, fp
 8005dd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dd2:	f000 fa0d 	bl	80061f0 <_Bfree>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dda:	9e07      	ldr	r6, [sp, #28]
 8005ddc:	ea43 0102 	orr.w	r1, r3, r2
 8005de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005de2:	4319      	orrs	r1, r3
 8005de4:	d110      	bne.n	8005e08 <_dtoa_r+0xa20>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dea:	d029      	beq.n	8005e40 <_dtoa_r+0xa58>
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd02      	ble.n	8005df8 <_dtoa_r+0xa10>
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005df8:	9b00      	ldr	r3, [sp, #0]
 8005dfa:	f883 8000 	strb.w	r8, [r3]
 8005dfe:	e63f      	b.n	8005a80 <_dtoa_r+0x698>
 8005e00:	4628      	mov	r0, r5
 8005e02:	e7bb      	b.n	8005d7c <_dtoa_r+0x994>
 8005e04:	2201      	movs	r2, #1
 8005e06:	e7e1      	b.n	8005dcc <_dtoa_r+0x9e4>
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	db04      	blt.n	8005e18 <_dtoa_r+0xa30>
 8005e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e10:	430b      	orrs	r3, r1
 8005e12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e14:	430b      	orrs	r3, r1
 8005e16:	d120      	bne.n	8005e5a <_dtoa_r+0xa72>
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	dded      	ble.n	8005df8 <_dtoa_r+0xa10>
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4658      	mov	r0, fp
 8005e22:	f000 fbb3 	bl	800658c <__lshift>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4681      	mov	r9, r0
 8005e2a:	f000 fc1b 	bl	8006664 <__mcmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	dc03      	bgt.n	8005e3a <_dtoa_r+0xa52>
 8005e32:	d1e1      	bne.n	8005df8 <_dtoa_r+0xa10>
 8005e34:	f018 0f01 	tst.w	r8, #1
 8005e38:	d0de      	beq.n	8005df8 <_dtoa_r+0xa10>
 8005e3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e3e:	d1d8      	bne.n	8005df2 <_dtoa_r+0xa0a>
 8005e40:	9a00      	ldr	r2, [sp, #0]
 8005e42:	2339      	movs	r3, #57	@ 0x39
 8005e44:	7013      	strb	r3, [r2, #0]
 8005e46:	4633      	mov	r3, r6
 8005e48:	461e      	mov	r6, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e50:	2a39      	cmp	r2, #57	@ 0x39
 8005e52:	d052      	beq.n	8005efa <_dtoa_r+0xb12>
 8005e54:	3201      	adds	r2, #1
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e612      	b.n	8005a80 <_dtoa_r+0x698>
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	dd07      	ble.n	8005e6e <_dtoa_r+0xa86>
 8005e5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e62:	d0ed      	beq.n	8005e40 <_dtoa_r+0xa58>
 8005e64:	9a00      	ldr	r2, [sp, #0]
 8005e66:	f108 0301 	add.w	r3, r8, #1
 8005e6a:	7013      	strb	r3, [r2, #0]
 8005e6c:	e608      	b.n	8005a80 <_dtoa_r+0x698>
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	9a07      	ldr	r2, [sp, #28]
 8005e72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d028      	beq.n	8005ece <_dtoa_r+0xae6>
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	2300      	movs	r3, #0
 8005e80:	220a      	movs	r2, #10
 8005e82:	4658      	mov	r0, fp
 8005e84:	f000 f9d6 	bl	8006234 <__multadd>
 8005e88:	42af      	cmp	r7, r5
 8005e8a:	4681      	mov	r9, r0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	f04f 020a 	mov.w	r2, #10
 8005e94:	4639      	mov	r1, r7
 8005e96:	4658      	mov	r0, fp
 8005e98:	d107      	bne.n	8005eaa <_dtoa_r+0xac2>
 8005e9a:	f000 f9cb 	bl	8006234 <__multadd>
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	9b07      	ldr	r3, [sp, #28]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	e774      	b.n	8005d94 <_dtoa_r+0x9ac>
 8005eaa:	f000 f9c3 	bl	8006234 <__multadd>
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	f000 f9bc 	bl	8006234 <__multadd>
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	e7f0      	b.n	8005ea2 <_dtoa_r+0xaba>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfcc      	ite	gt
 8005ec6:	461e      	movgt	r6, r3
 8005ec8:	2601      	movle	r6, #1
 8005eca:	4456      	add	r6, sl
 8005ecc:	2700      	movs	r7, #0
 8005ece:	4649      	mov	r1, r9
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	4658      	mov	r0, fp
 8005ed4:	f000 fb5a 	bl	800658c <__lshift>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4681      	mov	r9, r0
 8005edc:	f000 fbc2 	bl	8006664 <__mcmp>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	dcb0      	bgt.n	8005e46 <_dtoa_r+0xa5e>
 8005ee4:	d102      	bne.n	8005eec <_dtoa_r+0xb04>
 8005ee6:	f018 0f01 	tst.w	r8, #1
 8005eea:	d1ac      	bne.n	8005e46 <_dtoa_r+0xa5e>
 8005eec:	4633      	mov	r3, r6
 8005eee:	461e      	mov	r6, r3
 8005ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ef4:	2a30      	cmp	r2, #48	@ 0x30
 8005ef6:	d0fa      	beq.n	8005eee <_dtoa_r+0xb06>
 8005ef8:	e5c2      	b.n	8005a80 <_dtoa_r+0x698>
 8005efa:	459a      	cmp	sl, r3
 8005efc:	d1a4      	bne.n	8005e48 <_dtoa_r+0xa60>
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	2331      	movs	r3, #49	@ 0x31
 8005f06:	f88a 3000 	strb.w	r3, [sl]
 8005f0a:	e5b9      	b.n	8005a80 <_dtoa_r+0x698>
 8005f0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f6c <_dtoa_r+0xb84>
 8005f12:	b11b      	cbz	r3, 8005f1c <_dtoa_r+0xb34>
 8005f14:	f10a 0308 	add.w	r3, sl, #8
 8005f18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	b019      	add	sp, #100	@ 0x64
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	f77f ae37 	ble.w	8005b9a <_dtoa_r+0x7b2>
 8005f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f30:	2001      	movs	r0, #1
 8005f32:	e655      	b.n	8005be0 <_dtoa_r+0x7f8>
 8005f34:	9b00      	ldr	r3, [sp, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f77f aed6 	ble.w	8005ce8 <_dtoa_r+0x900>
 8005f3c:	4656      	mov	r6, sl
 8005f3e:	4621      	mov	r1, r4
 8005f40:	4648      	mov	r0, r9
 8005f42:	f7ff f9c8 	bl	80052d6 <quorem>
 8005f46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f4a:	f806 8b01 	strb.w	r8, [r6], #1
 8005f4e:	9b00      	ldr	r3, [sp, #0]
 8005f50:	eba6 020a 	sub.w	r2, r6, sl
 8005f54:	4293      	cmp	r3, r2
 8005f56:	ddb3      	ble.n	8005ec0 <_dtoa_r+0xad8>
 8005f58:	4649      	mov	r1, r9
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	220a      	movs	r2, #10
 8005f5e:	4658      	mov	r0, fp
 8005f60:	f000 f968 	bl	8006234 <__multadd>
 8005f64:	4681      	mov	r9, r0
 8005f66:	e7ea      	b.n	8005f3e <_dtoa_r+0xb56>
 8005f68:	08007070 	.word	0x08007070
 8005f6c:	08006ff4 	.word	0x08006ff4

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d041      	beq.n	8005ffc <_free_r+0x8c>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 f8e8 	bl	8006158 <__malloc_lock>
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <_free_r+0x90>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	b933      	cbnz	r3, 8005f9c <_free_r+0x2c>
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f98:	f000 b8e4 	b.w	8006164 <__malloc_unlock>
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d908      	bls.n	8005fb2 <_free_r+0x42>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	e7ed      	b.n	8005f8e <_free_r+0x1e>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x4c>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x42>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1850      	adds	r0, r2, r1
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x6c>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	1850      	adds	r0, r2, r1
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1e0      	bne.n	8005f92 <_free_r+0x22>
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4408      	add	r0, r1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	e7da      	b.n	8005f92 <_free_r+0x22>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x74>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	e7d6      	b.n	8005f92 <_free_r+0x22>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	1821      	adds	r1, r4, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7ca      	b.n	8005f92 <_free_r+0x22>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	20000440 	.word	0x20000440

08006004 <malloc>:
 8006004:	4b02      	ldr	r3, [pc, #8]	@ (8006010 <malloc+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f000 b825 	b.w	8006058 <_malloc_r>
 800600e:	bf00      	nop
 8006010:	20000018 	.word	0x20000018

08006014 <sbrk_aligned>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	4e0f      	ldr	r6, [pc, #60]	@ (8006054 <sbrk_aligned+0x40>)
 8006018:	460c      	mov	r4, r1
 800601a:	6831      	ldr	r1, [r6, #0]
 800601c:	4605      	mov	r5, r0
 800601e:	b911      	cbnz	r1, 8006026 <sbrk_aligned+0x12>
 8006020:	f000 fe9a 	bl	8006d58 <_sbrk_r>
 8006024:	6030      	str	r0, [r6, #0]
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 fe95 	bl	8006d58 <_sbrk_r>
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d103      	bne.n	800603a <sbrk_aligned+0x26>
 8006032:	f04f 34ff 	mov.w	r4, #4294967295
 8006036:	4620      	mov	r0, r4
 8006038:	bd70      	pop	{r4, r5, r6, pc}
 800603a:	1cc4      	adds	r4, r0, #3
 800603c:	f024 0403 	bic.w	r4, r4, #3
 8006040:	42a0      	cmp	r0, r4
 8006042:	d0f8      	beq.n	8006036 <sbrk_aligned+0x22>
 8006044:	1a21      	subs	r1, r4, r0
 8006046:	4628      	mov	r0, r5
 8006048:	f000 fe86 	bl	8006d58 <_sbrk_r>
 800604c:	3001      	adds	r0, #1
 800604e:	d1f2      	bne.n	8006036 <sbrk_aligned+0x22>
 8006050:	e7ef      	b.n	8006032 <sbrk_aligned+0x1e>
 8006052:	bf00      	nop
 8006054:	2000043c 	.word	0x2000043c

08006058 <_malloc_r>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	1ccd      	adds	r5, r1, #3
 800605e:	f025 0503 	bic.w	r5, r5, #3
 8006062:	3508      	adds	r5, #8
 8006064:	2d0c      	cmp	r5, #12
 8006066:	bf38      	it	cc
 8006068:	250c      	movcc	r5, #12
 800606a:	2d00      	cmp	r5, #0
 800606c:	4606      	mov	r6, r0
 800606e:	db01      	blt.n	8006074 <_malloc_r+0x1c>
 8006070:	42a9      	cmp	r1, r5
 8006072:	d904      	bls.n	800607e <_malloc_r+0x26>
 8006074:	230c      	movs	r3, #12
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	2000      	movs	r0, #0
 800607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800607e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006154 <_malloc_r+0xfc>
 8006082:	f000 f869 	bl	8006158 <__malloc_lock>
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	461c      	mov	r4, r3
 800608c:	bb44      	cbnz	r4, 80060e0 <_malloc_r+0x88>
 800608e:	4629      	mov	r1, r5
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ffbf 	bl	8006014 <sbrk_aligned>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	4604      	mov	r4, r0
 800609a:	d158      	bne.n	800614e <_malloc_r+0xf6>
 800609c:	f8d8 4000 	ldr.w	r4, [r8]
 80060a0:	4627      	mov	r7, r4
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	d143      	bne.n	800612e <_malloc_r+0xd6>
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d04b      	beq.n	8006142 <_malloc_r+0xea>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	4639      	mov	r1, r7
 80060ae:	4630      	mov	r0, r6
 80060b0:	eb04 0903 	add.w	r9, r4, r3
 80060b4:	f000 fe50 	bl	8006d58 <_sbrk_r>
 80060b8:	4581      	cmp	r9, r0
 80060ba:	d142      	bne.n	8006142 <_malloc_r+0xea>
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	1a6d      	subs	r5, r5, r1
 80060c0:	4629      	mov	r1, r5
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7ff ffa6 	bl	8006014 <sbrk_aligned>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d03a      	beq.n	8006142 <_malloc_r+0xea>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	442b      	add	r3, r5
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	f8d8 3000 	ldr.w	r3, [r8]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	bb62      	cbnz	r2, 8006134 <_malloc_r+0xdc>
 80060da:	f8c8 7000 	str.w	r7, [r8]
 80060de:	e00f      	b.n	8006100 <_malloc_r+0xa8>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	1b52      	subs	r2, r2, r5
 80060e4:	d420      	bmi.n	8006128 <_malloc_r+0xd0>
 80060e6:	2a0b      	cmp	r2, #11
 80060e8:	d917      	bls.n	800611a <_malloc_r+0xc2>
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	6025      	str	r5, [r4, #0]
 80060f0:	bf18      	it	ne
 80060f2:	6059      	strne	r1, [r3, #4]
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	bf08      	it	eq
 80060f8:	f8c8 1000 	streq.w	r1, [r8]
 80060fc:	5162      	str	r2, [r4, r5]
 80060fe:	604b      	str	r3, [r1, #4]
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f82f 	bl	8006164 <__malloc_unlock>
 8006106:	f104 000b 	add.w	r0, r4, #11
 800610a:	1d23      	adds	r3, r4, #4
 800610c:	f020 0007 	bic.w	r0, r0, #7
 8006110:	1ac2      	subs	r2, r0, r3
 8006112:	bf1c      	itt	ne
 8006114:	1a1b      	subne	r3, r3, r0
 8006116:	50a3      	strne	r3, [r4, r2]
 8006118:	e7af      	b.n	800607a <_malloc_r+0x22>
 800611a:	6862      	ldr	r2, [r4, #4]
 800611c:	42a3      	cmp	r3, r4
 800611e:	bf0c      	ite	eq
 8006120:	f8c8 2000 	streq.w	r2, [r8]
 8006124:	605a      	strne	r2, [r3, #4]
 8006126:	e7eb      	b.n	8006100 <_malloc_r+0xa8>
 8006128:	4623      	mov	r3, r4
 800612a:	6864      	ldr	r4, [r4, #4]
 800612c:	e7ae      	b.n	800608c <_malloc_r+0x34>
 800612e:	463c      	mov	r4, r7
 8006130:	687f      	ldr	r7, [r7, #4]
 8006132:	e7b6      	b.n	80060a2 <_malloc_r+0x4a>
 8006134:	461a      	mov	r2, r3
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	42a3      	cmp	r3, r4
 800613a:	d1fb      	bne.n	8006134 <_malloc_r+0xdc>
 800613c:	2300      	movs	r3, #0
 800613e:	6053      	str	r3, [r2, #4]
 8006140:	e7de      	b.n	8006100 <_malloc_r+0xa8>
 8006142:	230c      	movs	r3, #12
 8006144:	6033      	str	r3, [r6, #0]
 8006146:	4630      	mov	r0, r6
 8006148:	f000 f80c 	bl	8006164 <__malloc_unlock>
 800614c:	e794      	b.n	8006078 <_malloc_r+0x20>
 800614e:	6005      	str	r5, [r0, #0]
 8006150:	e7d6      	b.n	8006100 <_malloc_r+0xa8>
 8006152:	bf00      	nop
 8006154:	20000440 	.word	0x20000440

08006158 <__malloc_lock>:
 8006158:	4801      	ldr	r0, [pc, #4]	@ (8006160 <__malloc_lock+0x8>)
 800615a:	f7ff b8ba 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20000438 	.word	0x20000438

08006164 <__malloc_unlock>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__malloc_unlock+0x8>)
 8006166:	f7ff b8b5 	b.w	80052d4 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20000438 	.word	0x20000438

08006170 <_Balloc>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	69c6      	ldr	r6, [r0, #28]
 8006174:	4604      	mov	r4, r0
 8006176:	460d      	mov	r5, r1
 8006178:	b976      	cbnz	r6, 8006198 <_Balloc+0x28>
 800617a:	2010      	movs	r0, #16
 800617c:	f7ff ff42 	bl	8006004 <malloc>
 8006180:	4602      	mov	r2, r0
 8006182:	61e0      	str	r0, [r4, #28]
 8006184:	b920      	cbnz	r0, 8006190 <_Balloc+0x20>
 8006186:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <_Balloc+0x78>)
 8006188:	4818      	ldr	r0, [pc, #96]	@ (80061ec <_Balloc+0x7c>)
 800618a:	216b      	movs	r1, #107	@ 0x6b
 800618c:	f000 fe02 	bl	8006d94 <__assert_func>
 8006190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006194:	6006      	str	r6, [r0, #0]
 8006196:	60c6      	str	r6, [r0, #12]
 8006198:	69e6      	ldr	r6, [r4, #28]
 800619a:	68f3      	ldr	r3, [r6, #12]
 800619c:	b183      	cbz	r3, 80061c0 <_Balloc+0x50>
 800619e:	69e3      	ldr	r3, [r4, #28]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061a6:	b9b8      	cbnz	r0, 80061d8 <_Balloc+0x68>
 80061a8:	2101      	movs	r1, #1
 80061aa:	fa01 f605 	lsl.w	r6, r1, r5
 80061ae:	1d72      	adds	r2, r6, #5
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fe0c 	bl	8006dd0 <_calloc_r>
 80061b8:	b160      	cbz	r0, 80061d4 <_Balloc+0x64>
 80061ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061be:	e00e      	b.n	80061de <_Balloc+0x6e>
 80061c0:	2221      	movs	r2, #33	@ 0x21
 80061c2:	2104      	movs	r1, #4
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fe03 	bl	8006dd0 <_calloc_r>
 80061ca:	69e3      	ldr	r3, [r4, #28]
 80061cc:	60f0      	str	r0, [r6, #12]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e4      	bne.n	800619e <_Balloc+0x2e>
 80061d4:	2000      	movs	r0, #0
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	6802      	ldr	r2, [r0, #0]
 80061da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061de:	2300      	movs	r3, #0
 80061e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061e4:	e7f7      	b.n	80061d6 <_Balloc+0x66>
 80061e6:	bf00      	nop
 80061e8:	08007001 	.word	0x08007001
 80061ec:	08007081 	.word	0x08007081

080061f0 <_Bfree>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	69c6      	ldr	r6, [r0, #28]
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b976      	cbnz	r6, 8006218 <_Bfree+0x28>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ff02 	bl	8006004 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	61e8      	str	r0, [r5, #28]
 8006204:	b920      	cbnz	r0, 8006210 <_Bfree+0x20>
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <_Bfree+0x3c>)
 8006208:	4809      	ldr	r0, [pc, #36]	@ (8006230 <_Bfree+0x40>)
 800620a:	218f      	movs	r1, #143	@ 0x8f
 800620c:	f000 fdc2 	bl	8006d94 <__assert_func>
 8006210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006214:	6006      	str	r6, [r0, #0]
 8006216:	60c6      	str	r6, [r0, #12]
 8006218:	b13c      	cbz	r4, 800622a <_Bfree+0x3a>
 800621a:	69eb      	ldr	r3, [r5, #28]
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006224:	6021      	str	r1, [r4, #0]
 8006226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	08007001 	.word	0x08007001
 8006230:	08007081 	.word	0x08007081

08006234 <__multadd>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	690d      	ldr	r5, [r1, #16]
 800623a:	4607      	mov	r7, r0
 800623c:	460c      	mov	r4, r1
 800623e:	461e      	mov	r6, r3
 8006240:	f101 0c14 	add.w	ip, r1, #20
 8006244:	2000      	movs	r0, #0
 8006246:	f8dc 3000 	ldr.w	r3, [ip]
 800624a:	b299      	uxth	r1, r3
 800624c:	fb02 6101 	mla	r1, r2, r1, r6
 8006250:	0c1e      	lsrs	r6, r3, #16
 8006252:	0c0b      	lsrs	r3, r1, #16
 8006254:	fb02 3306 	mla	r3, r2, r6, r3
 8006258:	b289      	uxth	r1, r1
 800625a:	3001      	adds	r0, #1
 800625c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006260:	4285      	cmp	r5, r0
 8006262:	f84c 1b04 	str.w	r1, [ip], #4
 8006266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800626a:	dcec      	bgt.n	8006246 <__multadd+0x12>
 800626c:	b30e      	cbz	r6, 80062b2 <__multadd+0x7e>
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	42ab      	cmp	r3, r5
 8006272:	dc19      	bgt.n	80062a8 <__multadd+0x74>
 8006274:	6861      	ldr	r1, [r4, #4]
 8006276:	4638      	mov	r0, r7
 8006278:	3101      	adds	r1, #1
 800627a:	f7ff ff79 	bl	8006170 <_Balloc>
 800627e:	4680      	mov	r8, r0
 8006280:	b928      	cbnz	r0, 800628e <__multadd+0x5a>
 8006282:	4602      	mov	r2, r0
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <__multadd+0x84>)
 8006286:	480d      	ldr	r0, [pc, #52]	@ (80062bc <__multadd+0x88>)
 8006288:	21ba      	movs	r1, #186	@ 0xba
 800628a:	f000 fd83 	bl	8006d94 <__assert_func>
 800628e:	6922      	ldr	r2, [r4, #16]
 8006290:	3202      	adds	r2, #2
 8006292:	f104 010c 	add.w	r1, r4, #12
 8006296:	0092      	lsls	r2, r2, #2
 8006298:	300c      	adds	r0, #12
 800629a:	f000 fd6d 	bl	8006d78 <memcpy>
 800629e:	4621      	mov	r1, r4
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <_Bfree>
 80062a6:	4644      	mov	r4, r8
 80062a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062ac:	3501      	adds	r5, #1
 80062ae:	615e      	str	r6, [r3, #20]
 80062b0:	6125      	str	r5, [r4, #16]
 80062b2:	4620      	mov	r0, r4
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	08007070 	.word	0x08007070
 80062bc:	08007081 	.word	0x08007081

080062c0 <__hi0bits>:
 80062c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062c4:	4603      	mov	r3, r0
 80062c6:	bf36      	itet	cc
 80062c8:	0403      	lslcc	r3, r0, #16
 80062ca:	2000      	movcs	r0, #0
 80062cc:	2010      	movcc	r0, #16
 80062ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d2:	bf3c      	itt	cc
 80062d4:	021b      	lslcc	r3, r3, #8
 80062d6:	3008      	addcc	r0, #8
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062dc:	bf3c      	itt	cc
 80062de:	011b      	lslcc	r3, r3, #4
 80062e0:	3004      	addcc	r0, #4
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	bf3c      	itt	cc
 80062e8:	009b      	lslcc	r3, r3, #2
 80062ea:	3002      	addcc	r0, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	db05      	blt.n	80062fc <__hi0bits+0x3c>
 80062f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062f4:	f100 0001 	add.w	r0, r0, #1
 80062f8:	bf08      	it	eq
 80062fa:	2020      	moveq	r0, #32
 80062fc:	4770      	bx	lr

080062fe <__lo0bits>:
 80062fe:	6803      	ldr	r3, [r0, #0]
 8006300:	4602      	mov	r2, r0
 8006302:	f013 0007 	ands.w	r0, r3, #7
 8006306:	d00b      	beq.n	8006320 <__lo0bits+0x22>
 8006308:	07d9      	lsls	r1, r3, #31
 800630a:	d421      	bmi.n	8006350 <__lo0bits+0x52>
 800630c:	0798      	lsls	r0, r3, #30
 800630e:	bf49      	itett	mi
 8006310:	085b      	lsrmi	r3, r3, #1
 8006312:	089b      	lsrpl	r3, r3, #2
 8006314:	2001      	movmi	r0, #1
 8006316:	6013      	strmi	r3, [r2, #0]
 8006318:	bf5c      	itt	pl
 800631a:	6013      	strpl	r3, [r2, #0]
 800631c:	2002      	movpl	r0, #2
 800631e:	4770      	bx	lr
 8006320:	b299      	uxth	r1, r3
 8006322:	b909      	cbnz	r1, 8006328 <__lo0bits+0x2a>
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	2010      	movs	r0, #16
 8006328:	b2d9      	uxtb	r1, r3
 800632a:	b909      	cbnz	r1, 8006330 <__lo0bits+0x32>
 800632c:	3008      	adds	r0, #8
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	0719      	lsls	r1, r3, #28
 8006332:	bf04      	itt	eq
 8006334:	091b      	lsreq	r3, r3, #4
 8006336:	3004      	addeq	r0, #4
 8006338:	0799      	lsls	r1, r3, #30
 800633a:	bf04      	itt	eq
 800633c:	089b      	lsreq	r3, r3, #2
 800633e:	3002      	addeq	r0, #2
 8006340:	07d9      	lsls	r1, r3, #31
 8006342:	d403      	bmi.n	800634c <__lo0bits+0x4e>
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	f100 0001 	add.w	r0, r0, #1
 800634a:	d003      	beq.n	8006354 <__lo0bits+0x56>
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4770      	bx	lr
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr
 8006354:	2020      	movs	r0, #32
 8006356:	4770      	bx	lr

08006358 <__i2b>:
 8006358:	b510      	push	{r4, lr}
 800635a:	460c      	mov	r4, r1
 800635c:	2101      	movs	r1, #1
 800635e:	f7ff ff07 	bl	8006170 <_Balloc>
 8006362:	4602      	mov	r2, r0
 8006364:	b928      	cbnz	r0, 8006372 <__i2b+0x1a>
 8006366:	4b05      	ldr	r3, [pc, #20]	@ (800637c <__i2b+0x24>)
 8006368:	4805      	ldr	r0, [pc, #20]	@ (8006380 <__i2b+0x28>)
 800636a:	f240 1145 	movw	r1, #325	@ 0x145
 800636e:	f000 fd11 	bl	8006d94 <__assert_func>
 8006372:	2301      	movs	r3, #1
 8006374:	6144      	str	r4, [r0, #20]
 8006376:	6103      	str	r3, [r0, #16]
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	08007070 	.word	0x08007070
 8006380:	08007081 	.word	0x08007081

08006384 <__multiply>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	4614      	mov	r4, r2
 800638a:	690a      	ldr	r2, [r1, #16]
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	bfa8      	it	ge
 8006392:	4623      	movge	r3, r4
 8006394:	460f      	mov	r7, r1
 8006396:	bfa4      	itt	ge
 8006398:	460c      	movge	r4, r1
 800639a:	461f      	movge	r7, r3
 800639c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80063a4:	68a3      	ldr	r3, [r4, #8]
 80063a6:	6861      	ldr	r1, [r4, #4]
 80063a8:	eb0a 0609 	add.w	r6, sl, r9
 80063ac:	42b3      	cmp	r3, r6
 80063ae:	b085      	sub	sp, #20
 80063b0:	bfb8      	it	lt
 80063b2:	3101      	addlt	r1, #1
 80063b4:	f7ff fedc 	bl	8006170 <_Balloc>
 80063b8:	b930      	cbnz	r0, 80063c8 <__multiply+0x44>
 80063ba:	4602      	mov	r2, r0
 80063bc:	4b44      	ldr	r3, [pc, #272]	@ (80064d0 <__multiply+0x14c>)
 80063be:	4845      	ldr	r0, [pc, #276]	@ (80064d4 <__multiply+0x150>)
 80063c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063c4:	f000 fce6 	bl	8006d94 <__assert_func>
 80063c8:	f100 0514 	add.w	r5, r0, #20
 80063cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063d0:	462b      	mov	r3, r5
 80063d2:	2200      	movs	r2, #0
 80063d4:	4543      	cmp	r3, r8
 80063d6:	d321      	bcc.n	800641c <__multiply+0x98>
 80063d8:	f107 0114 	add.w	r1, r7, #20
 80063dc:	f104 0214 	add.w	r2, r4, #20
 80063e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80063e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80063e8:	9302      	str	r3, [sp, #8]
 80063ea:	1b13      	subs	r3, r2, r4
 80063ec:	3b15      	subs	r3, #21
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	3304      	adds	r3, #4
 80063f4:	f104 0715 	add.w	r7, r4, #21
 80063f8:	42ba      	cmp	r2, r7
 80063fa:	bf38      	it	cc
 80063fc:	2304      	movcc	r3, #4
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	9b02      	ldr	r3, [sp, #8]
 8006402:	9103      	str	r1, [sp, #12]
 8006404:	428b      	cmp	r3, r1
 8006406:	d80c      	bhi.n	8006422 <__multiply+0x9e>
 8006408:	2e00      	cmp	r6, #0
 800640a:	dd03      	ble.n	8006414 <__multiply+0x90>
 800640c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006410:	2b00      	cmp	r3, #0
 8006412:	d05b      	beq.n	80064cc <__multiply+0x148>
 8006414:	6106      	str	r6, [r0, #16]
 8006416:	b005      	add	sp, #20
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	f843 2b04 	str.w	r2, [r3], #4
 8006420:	e7d8      	b.n	80063d4 <__multiply+0x50>
 8006422:	f8b1 a000 	ldrh.w	sl, [r1]
 8006426:	f1ba 0f00 	cmp.w	sl, #0
 800642a:	d024      	beq.n	8006476 <__multiply+0xf2>
 800642c:	f104 0e14 	add.w	lr, r4, #20
 8006430:	46a9      	mov	r9, r5
 8006432:	f04f 0c00 	mov.w	ip, #0
 8006436:	f85e 7b04 	ldr.w	r7, [lr], #4
 800643a:	f8d9 3000 	ldr.w	r3, [r9]
 800643e:	fa1f fb87 	uxth.w	fp, r7
 8006442:	b29b      	uxth	r3, r3
 8006444:	fb0a 330b 	mla	r3, sl, fp, r3
 8006448:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800644c:	f8d9 7000 	ldr.w	r7, [r9]
 8006450:	4463      	add	r3, ip
 8006452:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006456:	fb0a c70b 	mla	r7, sl, fp, ip
 800645a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006464:	4572      	cmp	r2, lr
 8006466:	f849 3b04 	str.w	r3, [r9], #4
 800646a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800646e:	d8e2      	bhi.n	8006436 <__multiply+0xb2>
 8006470:	9b01      	ldr	r3, [sp, #4]
 8006472:	f845 c003 	str.w	ip, [r5, r3]
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800647c:	3104      	adds	r1, #4
 800647e:	f1b9 0f00 	cmp.w	r9, #0
 8006482:	d021      	beq.n	80064c8 <__multiply+0x144>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	f104 0c14 	add.w	ip, r4, #20
 800648a:	46ae      	mov	lr, r5
 800648c:	f04f 0a00 	mov.w	sl, #0
 8006490:	f8bc b000 	ldrh.w	fp, [ip]
 8006494:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006498:	fb09 770b 	mla	r7, r9, fp, r7
 800649c:	4457      	add	r7, sl
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064a4:	f84e 3b04 	str.w	r3, [lr], #4
 80064a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064b0:	f8be 3000 	ldrh.w	r3, [lr]
 80064b4:	fb09 330a 	mla	r3, r9, sl, r3
 80064b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80064bc:	4562      	cmp	r2, ip
 80064be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064c2:	d8e5      	bhi.n	8006490 <__multiply+0x10c>
 80064c4:	9f01      	ldr	r7, [sp, #4]
 80064c6:	51eb      	str	r3, [r5, r7]
 80064c8:	3504      	adds	r5, #4
 80064ca:	e799      	b.n	8006400 <__multiply+0x7c>
 80064cc:	3e01      	subs	r6, #1
 80064ce:	e79b      	b.n	8006408 <__multiply+0x84>
 80064d0:	08007070 	.word	0x08007070
 80064d4:	08007081 	.word	0x08007081

080064d8 <__pow5mult>:
 80064d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064dc:	4615      	mov	r5, r2
 80064de:	f012 0203 	ands.w	r2, r2, #3
 80064e2:	4607      	mov	r7, r0
 80064e4:	460e      	mov	r6, r1
 80064e6:	d007      	beq.n	80064f8 <__pow5mult+0x20>
 80064e8:	4c25      	ldr	r4, [pc, #148]	@ (8006580 <__pow5mult+0xa8>)
 80064ea:	3a01      	subs	r2, #1
 80064ec:	2300      	movs	r3, #0
 80064ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064f2:	f7ff fe9f 	bl	8006234 <__multadd>
 80064f6:	4606      	mov	r6, r0
 80064f8:	10ad      	asrs	r5, r5, #2
 80064fa:	d03d      	beq.n	8006578 <__pow5mult+0xa0>
 80064fc:	69fc      	ldr	r4, [r7, #28]
 80064fe:	b97c      	cbnz	r4, 8006520 <__pow5mult+0x48>
 8006500:	2010      	movs	r0, #16
 8006502:	f7ff fd7f 	bl	8006004 <malloc>
 8006506:	4602      	mov	r2, r0
 8006508:	61f8      	str	r0, [r7, #28]
 800650a:	b928      	cbnz	r0, 8006518 <__pow5mult+0x40>
 800650c:	4b1d      	ldr	r3, [pc, #116]	@ (8006584 <__pow5mult+0xac>)
 800650e:	481e      	ldr	r0, [pc, #120]	@ (8006588 <__pow5mult+0xb0>)
 8006510:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006514:	f000 fc3e 	bl	8006d94 <__assert_func>
 8006518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800651c:	6004      	str	r4, [r0, #0]
 800651e:	60c4      	str	r4, [r0, #12]
 8006520:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006528:	b94c      	cbnz	r4, 800653e <__pow5mult+0x66>
 800652a:	f240 2171 	movw	r1, #625	@ 0x271
 800652e:	4638      	mov	r0, r7
 8006530:	f7ff ff12 	bl	8006358 <__i2b>
 8006534:	2300      	movs	r3, #0
 8006536:	f8c8 0008 	str.w	r0, [r8, #8]
 800653a:	4604      	mov	r4, r0
 800653c:	6003      	str	r3, [r0, #0]
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	07eb      	lsls	r3, r5, #31
 8006544:	d50a      	bpl.n	800655c <__pow5mult+0x84>
 8006546:	4631      	mov	r1, r6
 8006548:	4622      	mov	r2, r4
 800654a:	4638      	mov	r0, r7
 800654c:	f7ff ff1a 	bl	8006384 <__multiply>
 8006550:	4631      	mov	r1, r6
 8006552:	4680      	mov	r8, r0
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff fe4b 	bl	80061f0 <_Bfree>
 800655a:	4646      	mov	r6, r8
 800655c:	106d      	asrs	r5, r5, #1
 800655e:	d00b      	beq.n	8006578 <__pow5mult+0xa0>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	b938      	cbnz	r0, 8006574 <__pow5mult+0x9c>
 8006564:	4622      	mov	r2, r4
 8006566:	4621      	mov	r1, r4
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff ff0b 	bl	8006384 <__multiply>
 800656e:	6020      	str	r0, [r4, #0]
 8006570:	f8c0 9000 	str.w	r9, [r0]
 8006574:	4604      	mov	r4, r0
 8006576:	e7e4      	b.n	8006542 <__pow5mult+0x6a>
 8006578:	4630      	mov	r0, r6
 800657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657e:	bf00      	nop
 8006580:	080070dc 	.word	0x080070dc
 8006584:	08007001 	.word	0x08007001
 8006588:	08007081 	.word	0x08007081

0800658c <__lshift>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	460c      	mov	r4, r1
 8006592:	6849      	ldr	r1, [r1, #4]
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	4607      	mov	r7, r0
 800659e:	4691      	mov	r9, r2
 80065a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065a4:	f108 0601 	add.w	r6, r8, #1
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	db0b      	blt.n	80065c4 <__lshift+0x38>
 80065ac:	4638      	mov	r0, r7
 80065ae:	f7ff fddf 	bl	8006170 <_Balloc>
 80065b2:	4605      	mov	r5, r0
 80065b4:	b948      	cbnz	r0, 80065ca <__lshift+0x3e>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b28      	ldr	r3, [pc, #160]	@ (800665c <__lshift+0xd0>)
 80065ba:	4829      	ldr	r0, [pc, #164]	@ (8006660 <__lshift+0xd4>)
 80065bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065c0:	f000 fbe8 	bl	8006d94 <__assert_func>
 80065c4:	3101      	adds	r1, #1
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	e7ee      	b.n	80065a8 <__lshift+0x1c>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f100 0114 	add.w	r1, r0, #20
 80065d0:	f100 0210 	add.w	r2, r0, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	4553      	cmp	r3, sl
 80065d8:	db33      	blt.n	8006642 <__lshift+0xb6>
 80065da:	6920      	ldr	r0, [r4, #16]
 80065dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065e0:	f104 0314 	add.w	r3, r4, #20
 80065e4:	f019 091f 	ands.w	r9, r9, #31
 80065e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065f0:	d02b      	beq.n	800664a <__lshift+0xbe>
 80065f2:	f1c9 0e20 	rsb	lr, r9, #32
 80065f6:	468a      	mov	sl, r1
 80065f8:	2200      	movs	r2, #0
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006600:	4310      	orrs	r0, r2
 8006602:	f84a 0b04 	str.w	r0, [sl], #4
 8006606:	f853 2b04 	ldr.w	r2, [r3], #4
 800660a:	459c      	cmp	ip, r3
 800660c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006610:	d8f3      	bhi.n	80065fa <__lshift+0x6e>
 8006612:	ebac 0304 	sub.w	r3, ip, r4
 8006616:	3b15      	subs	r3, #21
 8006618:	f023 0303 	bic.w	r3, r3, #3
 800661c:	3304      	adds	r3, #4
 800661e:	f104 0015 	add.w	r0, r4, #21
 8006622:	4584      	cmp	ip, r0
 8006624:	bf38      	it	cc
 8006626:	2304      	movcc	r3, #4
 8006628:	50ca      	str	r2, [r1, r3]
 800662a:	b10a      	cbz	r2, 8006630 <__lshift+0xa4>
 800662c:	f108 0602 	add.w	r6, r8, #2
 8006630:	3e01      	subs	r6, #1
 8006632:	4638      	mov	r0, r7
 8006634:	612e      	str	r6, [r5, #16]
 8006636:	4621      	mov	r1, r4
 8006638:	f7ff fdda 	bl	80061f0 <_Bfree>
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006642:	f842 0f04 	str.w	r0, [r2, #4]!
 8006646:	3301      	adds	r3, #1
 8006648:	e7c5      	b.n	80065d6 <__lshift+0x4a>
 800664a:	3904      	subs	r1, #4
 800664c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006650:	f841 2f04 	str.w	r2, [r1, #4]!
 8006654:	459c      	cmp	ip, r3
 8006656:	d8f9      	bhi.n	800664c <__lshift+0xc0>
 8006658:	e7ea      	b.n	8006630 <__lshift+0xa4>
 800665a:	bf00      	nop
 800665c:	08007070 	.word	0x08007070
 8006660:	08007081 	.word	0x08007081

08006664 <__mcmp>:
 8006664:	690a      	ldr	r2, [r1, #16]
 8006666:	4603      	mov	r3, r0
 8006668:	6900      	ldr	r0, [r0, #16]
 800666a:	1a80      	subs	r0, r0, r2
 800666c:	b530      	push	{r4, r5, lr}
 800666e:	d10e      	bne.n	800668e <__mcmp+0x2a>
 8006670:	3314      	adds	r3, #20
 8006672:	3114      	adds	r1, #20
 8006674:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006678:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800667c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006684:	4295      	cmp	r5, r2
 8006686:	d003      	beq.n	8006690 <__mcmp+0x2c>
 8006688:	d205      	bcs.n	8006696 <__mcmp+0x32>
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	bd30      	pop	{r4, r5, pc}
 8006690:	42a3      	cmp	r3, r4
 8006692:	d3f3      	bcc.n	800667c <__mcmp+0x18>
 8006694:	e7fb      	b.n	800668e <__mcmp+0x2a>
 8006696:	2001      	movs	r0, #1
 8006698:	e7f9      	b.n	800668e <__mcmp+0x2a>
	...

0800669c <__mdiff>:
 800669c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	4689      	mov	r9, r1
 80066a2:	4606      	mov	r6, r0
 80066a4:	4611      	mov	r1, r2
 80066a6:	4648      	mov	r0, r9
 80066a8:	4614      	mov	r4, r2
 80066aa:	f7ff ffdb 	bl	8006664 <__mcmp>
 80066ae:	1e05      	subs	r5, r0, #0
 80066b0:	d112      	bne.n	80066d8 <__mdiff+0x3c>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff fd5b 	bl	8006170 <_Balloc>
 80066ba:	4602      	mov	r2, r0
 80066bc:	b928      	cbnz	r0, 80066ca <__mdiff+0x2e>
 80066be:	4b3f      	ldr	r3, [pc, #252]	@ (80067bc <__mdiff+0x120>)
 80066c0:	f240 2137 	movw	r1, #567	@ 0x237
 80066c4:	483e      	ldr	r0, [pc, #248]	@ (80067c0 <__mdiff+0x124>)
 80066c6:	f000 fb65 	bl	8006d94 <__assert_func>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066d0:	4610      	mov	r0, r2
 80066d2:	b003      	add	sp, #12
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	bfbc      	itt	lt
 80066da:	464b      	movlt	r3, r9
 80066dc:	46a1      	movlt	r9, r4
 80066de:	4630      	mov	r0, r6
 80066e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066e4:	bfba      	itte	lt
 80066e6:	461c      	movlt	r4, r3
 80066e8:	2501      	movlt	r5, #1
 80066ea:	2500      	movge	r5, #0
 80066ec:	f7ff fd40 	bl	8006170 <_Balloc>
 80066f0:	4602      	mov	r2, r0
 80066f2:	b918      	cbnz	r0, 80066fc <__mdiff+0x60>
 80066f4:	4b31      	ldr	r3, [pc, #196]	@ (80067bc <__mdiff+0x120>)
 80066f6:	f240 2145 	movw	r1, #581	@ 0x245
 80066fa:	e7e3      	b.n	80066c4 <__mdiff+0x28>
 80066fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006700:	6926      	ldr	r6, [r4, #16]
 8006702:	60c5      	str	r5, [r0, #12]
 8006704:	f109 0310 	add.w	r3, r9, #16
 8006708:	f109 0514 	add.w	r5, r9, #20
 800670c:	f104 0e14 	add.w	lr, r4, #20
 8006710:	f100 0b14 	add.w	fp, r0, #20
 8006714:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006718:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	46d9      	mov	r9, fp
 8006720:	f04f 0c00 	mov.w	ip, #0
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	f85e 0b04 	ldr.w	r0, [lr], #4
 800672a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	fa1f f38a 	uxth.w	r3, sl
 8006734:	4619      	mov	r1, r3
 8006736:	b283      	uxth	r3, r0
 8006738:	1acb      	subs	r3, r1, r3
 800673a:	0c00      	lsrs	r0, r0, #16
 800673c:	4463      	add	r3, ip
 800673e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006742:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800674c:	4576      	cmp	r6, lr
 800674e:	f849 3b04 	str.w	r3, [r9], #4
 8006752:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006756:	d8e5      	bhi.n	8006724 <__mdiff+0x88>
 8006758:	1b33      	subs	r3, r6, r4
 800675a:	3b15      	subs	r3, #21
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	3415      	adds	r4, #21
 8006762:	3304      	adds	r3, #4
 8006764:	42a6      	cmp	r6, r4
 8006766:	bf38      	it	cc
 8006768:	2304      	movcc	r3, #4
 800676a:	441d      	add	r5, r3
 800676c:	445b      	add	r3, fp
 800676e:	461e      	mov	r6, r3
 8006770:	462c      	mov	r4, r5
 8006772:	4544      	cmp	r4, r8
 8006774:	d30e      	bcc.n	8006794 <__mdiff+0xf8>
 8006776:	f108 0103 	add.w	r1, r8, #3
 800677a:	1b49      	subs	r1, r1, r5
 800677c:	f021 0103 	bic.w	r1, r1, #3
 8006780:	3d03      	subs	r5, #3
 8006782:	45a8      	cmp	r8, r5
 8006784:	bf38      	it	cc
 8006786:	2100      	movcc	r1, #0
 8006788:	440b      	add	r3, r1
 800678a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800678e:	b191      	cbz	r1, 80067b6 <__mdiff+0x11a>
 8006790:	6117      	str	r7, [r2, #16]
 8006792:	e79d      	b.n	80066d0 <__mdiff+0x34>
 8006794:	f854 1b04 	ldr.w	r1, [r4], #4
 8006798:	46e6      	mov	lr, ip
 800679a:	0c08      	lsrs	r0, r1, #16
 800679c:	fa1c fc81 	uxtah	ip, ip, r1
 80067a0:	4471      	add	r1, lr
 80067a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80067a6:	b289      	uxth	r1, r1
 80067a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80067ac:	f846 1b04 	str.w	r1, [r6], #4
 80067b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067b4:	e7dd      	b.n	8006772 <__mdiff+0xd6>
 80067b6:	3f01      	subs	r7, #1
 80067b8:	e7e7      	b.n	800678a <__mdiff+0xee>
 80067ba:	bf00      	nop
 80067bc:	08007070 	.word	0x08007070
 80067c0:	08007081 	.word	0x08007081

080067c4 <__d2b>:
 80067c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067c8:	460f      	mov	r7, r1
 80067ca:	2101      	movs	r1, #1
 80067cc:	ec59 8b10 	vmov	r8, r9, d0
 80067d0:	4616      	mov	r6, r2
 80067d2:	f7ff fccd 	bl	8006170 <_Balloc>
 80067d6:	4604      	mov	r4, r0
 80067d8:	b930      	cbnz	r0, 80067e8 <__d2b+0x24>
 80067da:	4602      	mov	r2, r0
 80067dc:	4b23      	ldr	r3, [pc, #140]	@ (800686c <__d2b+0xa8>)
 80067de:	4824      	ldr	r0, [pc, #144]	@ (8006870 <__d2b+0xac>)
 80067e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80067e4:	f000 fad6 	bl	8006d94 <__assert_func>
 80067e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067f0:	b10d      	cbz	r5, 80067f6 <__d2b+0x32>
 80067f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	f1b8 0300 	subs.w	r3, r8, #0
 80067fc:	d023      	beq.n	8006846 <__d2b+0x82>
 80067fe:	4668      	mov	r0, sp
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f7ff fd7c 	bl	80062fe <__lo0bits>
 8006806:	e9dd 1200 	ldrd	r1, r2, [sp]
 800680a:	b1d0      	cbz	r0, 8006842 <__d2b+0x7e>
 800680c:	f1c0 0320 	rsb	r3, r0, #32
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	430b      	orrs	r3, r1
 8006816:	40c2      	lsrs	r2, r0
 8006818:	6163      	str	r3, [r4, #20]
 800681a:	9201      	str	r2, [sp, #4]
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	61a3      	str	r3, [r4, #24]
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf0c      	ite	eq
 8006824:	2201      	moveq	r2, #1
 8006826:	2202      	movne	r2, #2
 8006828:	6122      	str	r2, [r4, #16]
 800682a:	b1a5      	cbz	r5, 8006856 <__d2b+0x92>
 800682c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006830:	4405      	add	r5, r0
 8006832:	603d      	str	r5, [r7, #0]
 8006834:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	4620      	mov	r0, r4
 800683c:	b003      	add	sp, #12
 800683e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006842:	6161      	str	r1, [r4, #20]
 8006844:	e7ea      	b.n	800681c <__d2b+0x58>
 8006846:	a801      	add	r0, sp, #4
 8006848:	f7ff fd59 	bl	80062fe <__lo0bits>
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	6163      	str	r3, [r4, #20]
 8006850:	3020      	adds	r0, #32
 8006852:	2201      	movs	r2, #1
 8006854:	e7e8      	b.n	8006828 <__d2b+0x64>
 8006856:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800685a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800685e:	6038      	str	r0, [r7, #0]
 8006860:	6918      	ldr	r0, [r3, #16]
 8006862:	f7ff fd2d 	bl	80062c0 <__hi0bits>
 8006866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800686a:	e7e5      	b.n	8006838 <__d2b+0x74>
 800686c:	08007070 	.word	0x08007070
 8006870:	08007081 	.word	0x08007081

08006874 <__sfputc_r>:
 8006874:	6893      	ldr	r3, [r2, #8]
 8006876:	3b01      	subs	r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	b410      	push	{r4}
 800687c:	6093      	str	r3, [r2, #8]
 800687e:	da08      	bge.n	8006892 <__sfputc_r+0x1e>
 8006880:	6994      	ldr	r4, [r2, #24]
 8006882:	42a3      	cmp	r3, r4
 8006884:	db01      	blt.n	800688a <__sfputc_r+0x16>
 8006886:	290a      	cmp	r1, #10
 8006888:	d103      	bne.n	8006892 <__sfputc_r+0x1e>
 800688a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688e:	f7fe bc0e 	b.w	80050ae <__swbuf_r>
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	1c58      	adds	r0, r3, #1
 8006896:	6010      	str	r0, [r2, #0]
 8006898:	7019      	strb	r1, [r3, #0]
 800689a:	4608      	mov	r0, r1
 800689c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <__sfputs_r>:
 80068a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	4614      	mov	r4, r2
 80068aa:	18d5      	adds	r5, r2, r3
 80068ac:	42ac      	cmp	r4, r5
 80068ae:	d101      	bne.n	80068b4 <__sfputs_r+0x12>
 80068b0:	2000      	movs	r0, #0
 80068b2:	e007      	b.n	80068c4 <__sfputs_r+0x22>
 80068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b8:	463a      	mov	r2, r7
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff ffda 	bl	8006874 <__sfputc_r>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d1f3      	bne.n	80068ac <__sfputs_r+0xa>
 80068c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068c8 <_vfiprintf_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	460d      	mov	r5, r1
 80068ce:	b09d      	sub	sp, #116	@ 0x74
 80068d0:	4614      	mov	r4, r2
 80068d2:	4698      	mov	r8, r3
 80068d4:	4606      	mov	r6, r0
 80068d6:	b118      	cbz	r0, 80068e0 <_vfiprintf_r+0x18>
 80068d8:	6a03      	ldr	r3, [r0, #32]
 80068da:	b90b      	cbnz	r3, 80068e0 <_vfiprintf_r+0x18>
 80068dc:	f7fe fafe 	bl	8004edc <__sinit>
 80068e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	d405      	bmi.n	80068f2 <_vfiprintf_r+0x2a>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	059a      	lsls	r2, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_vfiprintf_r+0x2a>
 80068ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068ee:	f7fe fcf0 	bl	80052d2 <__retarget_lock_acquire_recursive>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	071b      	lsls	r3, r3, #28
 80068f6:	d501      	bpl.n	80068fc <_vfiprintf_r+0x34>
 80068f8:	692b      	ldr	r3, [r5, #16]
 80068fa:	b99b      	cbnz	r3, 8006924 <_vfiprintf_r+0x5c>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4630      	mov	r0, r6
 8006900:	f7fe fc14 	bl	800512c <__swsetup_r>
 8006904:	b170      	cbz	r0, 8006924 <_vfiprintf_r+0x5c>
 8006906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006908:	07dc      	lsls	r4, r3, #31
 800690a:	d504      	bpl.n	8006916 <_vfiprintf_r+0x4e>
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	b01d      	add	sp, #116	@ 0x74
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	0598      	lsls	r0, r3, #22
 800691a:	d4f7      	bmi.n	800690c <_vfiprintf_r+0x44>
 800691c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800691e:	f7fe fcd9 	bl	80052d4 <__retarget_lock_release_recursive>
 8006922:	e7f3      	b.n	800690c <_vfiprintf_r+0x44>
 8006924:	2300      	movs	r3, #0
 8006926:	9309      	str	r3, [sp, #36]	@ 0x24
 8006928:	2320      	movs	r3, #32
 800692a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800692e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006932:	2330      	movs	r3, #48	@ 0x30
 8006934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ae4 <_vfiprintf_r+0x21c>
 8006938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800693c:	f04f 0901 	mov.w	r9, #1
 8006940:	4623      	mov	r3, r4
 8006942:	469a      	mov	sl, r3
 8006944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006948:	b10a      	cbz	r2, 800694e <_vfiprintf_r+0x86>
 800694a:	2a25      	cmp	r2, #37	@ 0x25
 800694c:	d1f9      	bne.n	8006942 <_vfiprintf_r+0x7a>
 800694e:	ebba 0b04 	subs.w	fp, sl, r4
 8006952:	d00b      	beq.n	800696c <_vfiprintf_r+0xa4>
 8006954:	465b      	mov	r3, fp
 8006956:	4622      	mov	r2, r4
 8006958:	4629      	mov	r1, r5
 800695a:	4630      	mov	r0, r6
 800695c:	f7ff ffa1 	bl	80068a2 <__sfputs_r>
 8006960:	3001      	adds	r0, #1
 8006962:	f000 80a7 	beq.w	8006ab4 <_vfiprintf_r+0x1ec>
 8006966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006968:	445a      	add	r2, fp
 800696a:	9209      	str	r2, [sp, #36]	@ 0x24
 800696c:	f89a 3000 	ldrb.w	r3, [sl]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 809f 	beq.w	8006ab4 <_vfiprintf_r+0x1ec>
 8006976:	2300      	movs	r3, #0
 8006978:	f04f 32ff 	mov.w	r2, #4294967295
 800697c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006980:	f10a 0a01 	add.w	sl, sl, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	9307      	str	r3, [sp, #28]
 8006988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800698c:	931a      	str	r3, [sp, #104]	@ 0x68
 800698e:	4654      	mov	r4, sl
 8006990:	2205      	movs	r2, #5
 8006992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006996:	4853      	ldr	r0, [pc, #332]	@ (8006ae4 <_vfiprintf_r+0x21c>)
 8006998:	f7f9 fc1a 	bl	80001d0 <memchr>
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	b9d8      	cbnz	r0, 80069d8 <_vfiprintf_r+0x110>
 80069a0:	06d1      	lsls	r1, r2, #27
 80069a2:	bf44      	itt	mi
 80069a4:	2320      	movmi	r3, #32
 80069a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069aa:	0713      	lsls	r3, r2, #28
 80069ac:	bf44      	itt	mi
 80069ae:	232b      	movmi	r3, #43	@ 0x2b
 80069b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ba:	d015      	beq.n	80069e8 <_vfiprintf_r+0x120>
 80069bc:	9a07      	ldr	r2, [sp, #28]
 80069be:	4654      	mov	r4, sl
 80069c0:	2000      	movs	r0, #0
 80069c2:	f04f 0c0a 	mov.w	ip, #10
 80069c6:	4621      	mov	r1, r4
 80069c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069cc:	3b30      	subs	r3, #48	@ 0x30
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	d94b      	bls.n	8006a6a <_vfiprintf_r+0x1a2>
 80069d2:	b1b0      	cbz	r0, 8006a02 <_vfiprintf_r+0x13a>
 80069d4:	9207      	str	r2, [sp, #28]
 80069d6:	e014      	b.n	8006a02 <_vfiprintf_r+0x13a>
 80069d8:	eba0 0308 	sub.w	r3, r0, r8
 80069dc:	fa09 f303 	lsl.w	r3, r9, r3
 80069e0:	4313      	orrs	r3, r2
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	46a2      	mov	sl, r4
 80069e6:	e7d2      	b.n	800698e <_vfiprintf_r+0xc6>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	1d19      	adds	r1, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	9103      	str	r1, [sp, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bfbb      	ittet	lt
 80069f4:	425b      	neglt	r3, r3
 80069f6:	f042 0202 	orrlt.w	r2, r2, #2
 80069fa:	9307      	strge	r3, [sp, #28]
 80069fc:	9307      	strlt	r3, [sp, #28]
 80069fe:	bfb8      	it	lt
 8006a00:	9204      	strlt	r2, [sp, #16]
 8006a02:	7823      	ldrb	r3, [r4, #0]
 8006a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a06:	d10a      	bne.n	8006a1e <_vfiprintf_r+0x156>
 8006a08:	7863      	ldrb	r3, [r4, #1]
 8006a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a0c:	d132      	bne.n	8006a74 <_vfiprintf_r+0x1ac>
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	9203      	str	r2, [sp, #12]
 8006a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a1a:	3402      	adds	r4, #2
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006af4 <_vfiprintf_r+0x22c>
 8006a22:	7821      	ldrb	r1, [r4, #0]
 8006a24:	2203      	movs	r2, #3
 8006a26:	4650      	mov	r0, sl
 8006a28:	f7f9 fbd2 	bl	80001d0 <memchr>
 8006a2c:	b138      	cbz	r0, 8006a3e <_vfiprintf_r+0x176>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	eba0 000a 	sub.w	r0, r0, sl
 8006a34:	2240      	movs	r2, #64	@ 0x40
 8006a36:	4082      	lsls	r2, r0
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a42:	4829      	ldr	r0, [pc, #164]	@ (8006ae8 <_vfiprintf_r+0x220>)
 8006a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a48:	2206      	movs	r2, #6
 8006a4a:	f7f9 fbc1 	bl	80001d0 <memchr>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d03f      	beq.n	8006ad2 <_vfiprintf_r+0x20a>
 8006a52:	4b26      	ldr	r3, [pc, #152]	@ (8006aec <_vfiprintf_r+0x224>)
 8006a54:	bb1b      	cbnz	r3, 8006a9e <_vfiprintf_r+0x1d6>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	3307      	adds	r3, #7
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	3308      	adds	r3, #8
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a64:	443b      	add	r3, r7
 8006a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a68:	e76a      	b.n	8006940 <_vfiprintf_r+0x78>
 8006a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a6e:	460c      	mov	r4, r1
 8006a70:	2001      	movs	r0, #1
 8006a72:	e7a8      	b.n	80069c6 <_vfiprintf_r+0xfe>
 8006a74:	2300      	movs	r3, #0
 8006a76:	3401      	adds	r4, #1
 8006a78:	9305      	str	r3, [sp, #20]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f04f 0c0a 	mov.w	ip, #10
 8006a80:	4620      	mov	r0, r4
 8006a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a86:	3a30      	subs	r2, #48	@ 0x30
 8006a88:	2a09      	cmp	r2, #9
 8006a8a:	d903      	bls.n	8006a94 <_vfiprintf_r+0x1cc>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0c6      	beq.n	8006a1e <_vfiprintf_r+0x156>
 8006a90:	9105      	str	r1, [sp, #20]
 8006a92:	e7c4      	b.n	8006a1e <_vfiprintf_r+0x156>
 8006a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a98:	4604      	mov	r4, r0
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e7f0      	b.n	8006a80 <_vfiprintf_r+0x1b8>
 8006a9e:	ab03      	add	r3, sp, #12
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	462a      	mov	r2, r5
 8006aa4:	4b12      	ldr	r3, [pc, #72]	@ (8006af0 <_vfiprintf_r+0x228>)
 8006aa6:	a904      	add	r1, sp, #16
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7fd fdd3 	bl	8004654 <_printf_float>
 8006aae:	4607      	mov	r7, r0
 8006ab0:	1c78      	adds	r0, r7, #1
 8006ab2:	d1d6      	bne.n	8006a62 <_vfiprintf_r+0x19a>
 8006ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ab6:	07d9      	lsls	r1, r3, #31
 8006ab8:	d405      	bmi.n	8006ac6 <_vfiprintf_r+0x1fe>
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	059a      	lsls	r2, r3, #22
 8006abe:	d402      	bmi.n	8006ac6 <_vfiprintf_r+0x1fe>
 8006ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ac2:	f7fe fc07 	bl	80052d4 <__retarget_lock_release_recursive>
 8006ac6:	89ab      	ldrh	r3, [r5, #12]
 8006ac8:	065b      	lsls	r3, r3, #25
 8006aca:	f53f af1f 	bmi.w	800690c <_vfiprintf_r+0x44>
 8006ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ad0:	e71e      	b.n	8006910 <_vfiprintf_r+0x48>
 8006ad2:	ab03      	add	r3, sp, #12
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <_vfiprintf_r+0x228>)
 8006ada:	a904      	add	r1, sp, #16
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7fe f851 	bl	8004b84 <_printf_i>
 8006ae2:	e7e4      	b.n	8006aae <_vfiprintf_r+0x1e6>
 8006ae4:	080071d8 	.word	0x080071d8
 8006ae8:	080071e2 	.word	0x080071e2
 8006aec:	08004655 	.word	0x08004655
 8006af0:	080068a3 	.word	0x080068a3
 8006af4:	080071de 	.word	0x080071de

08006af8 <__sflush_r>:
 8006af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b00:	0716      	lsls	r6, r2, #28
 8006b02:	4605      	mov	r5, r0
 8006b04:	460c      	mov	r4, r1
 8006b06:	d454      	bmi.n	8006bb2 <__sflush_r+0xba>
 8006b08:	684b      	ldr	r3, [r1, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	dc02      	bgt.n	8006b14 <__sflush_r+0x1c>
 8006b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dd48      	ble.n	8006ba6 <__sflush_r+0xae>
 8006b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b16:	2e00      	cmp	r6, #0
 8006b18:	d045      	beq.n	8006ba6 <__sflush_r+0xae>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b20:	682f      	ldr	r7, [r5, #0]
 8006b22:	6a21      	ldr	r1, [r4, #32]
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	d030      	beq.n	8006b8a <__sflush_r+0x92>
 8006b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	0759      	lsls	r1, r3, #29
 8006b2e:	d505      	bpl.n	8006b3c <__sflush_r+0x44>
 8006b30:	6863      	ldr	r3, [r4, #4]
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b36:	b10b      	cbz	r3, 8006b3c <__sflush_r+0x44>
 8006b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b3a:	1ad2      	subs	r2, r2, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b0      	blx	r6
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	d106      	bne.n	8006b5a <__sflush_r+0x62>
 8006b4c:	6829      	ldr	r1, [r5, #0]
 8006b4e:	291d      	cmp	r1, #29
 8006b50:	d82b      	bhi.n	8006baa <__sflush_r+0xb2>
 8006b52:	4a2a      	ldr	r2, [pc, #168]	@ (8006bfc <__sflush_r+0x104>)
 8006b54:	410a      	asrs	r2, r1
 8006b56:	07d6      	lsls	r6, r2, #31
 8006b58:	d427      	bmi.n	8006baa <__sflush_r+0xb2>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6062      	str	r2, [r4, #4]
 8006b5e:	04d9      	lsls	r1, r3, #19
 8006b60:	6922      	ldr	r2, [r4, #16]
 8006b62:	6022      	str	r2, [r4, #0]
 8006b64:	d504      	bpl.n	8006b70 <__sflush_r+0x78>
 8006b66:	1c42      	adds	r2, r0, #1
 8006b68:	d101      	bne.n	8006b6e <__sflush_r+0x76>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	b903      	cbnz	r3, 8006b70 <__sflush_r+0x78>
 8006b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b72:	602f      	str	r7, [r5, #0]
 8006b74:	b1b9      	cbz	r1, 8006ba6 <__sflush_r+0xae>
 8006b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d002      	beq.n	8006b84 <__sflush_r+0x8c>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7ff f9f6 	bl	8005f70 <_free_r>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b88:	e00d      	b.n	8006ba6 <__sflush_r+0xae>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	4602      	mov	r2, r0
 8006b92:	1c50      	adds	r0, r2, #1
 8006b94:	d1c9      	bne.n	8006b2a <__sflush_r+0x32>
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0c6      	beq.n	8006b2a <__sflush_r+0x32>
 8006b9c:	2b1d      	cmp	r3, #29
 8006b9e:	d001      	beq.n	8006ba4 <__sflush_r+0xac>
 8006ba0:	2b16      	cmp	r3, #22
 8006ba2:	d11e      	bne.n	8006be2 <__sflush_r+0xea>
 8006ba4:	602f      	str	r7, [r5, #0]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e022      	b.n	8006bf0 <__sflush_r+0xf8>
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	b21b      	sxth	r3, r3
 8006bb0:	e01b      	b.n	8006bea <__sflush_r+0xf2>
 8006bb2:	690f      	ldr	r7, [r1, #16]
 8006bb4:	2f00      	cmp	r7, #0
 8006bb6:	d0f6      	beq.n	8006ba6 <__sflush_r+0xae>
 8006bb8:	0793      	lsls	r3, r2, #30
 8006bba:	680e      	ldr	r6, [r1, #0]
 8006bbc:	bf08      	it	eq
 8006bbe:	694b      	ldreq	r3, [r1, #20]
 8006bc0:	600f      	str	r7, [r1, #0]
 8006bc2:	bf18      	it	ne
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	eba6 0807 	sub.w	r8, r6, r7
 8006bca:	608b      	str	r3, [r1, #8]
 8006bcc:	f1b8 0f00 	cmp.w	r8, #0
 8006bd0:	dde9      	ble.n	8006ba6 <__sflush_r+0xae>
 8006bd2:	6a21      	ldr	r1, [r4, #32]
 8006bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bd6:	4643      	mov	r3, r8
 8006bd8:	463a      	mov	r2, r7
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b0      	blx	r6
 8006bde:	2800      	cmp	r0, #0
 8006be0:	dc08      	bgt.n	8006bf4 <__sflush_r+0xfc>
 8006be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	4407      	add	r7, r0
 8006bf6:	eba8 0800 	sub.w	r8, r8, r0
 8006bfa:	e7e7      	b.n	8006bcc <__sflush_r+0xd4>
 8006bfc:	dfbffffe 	.word	0xdfbffffe

08006c00 <_fflush_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	690b      	ldr	r3, [r1, #16]
 8006c04:	4605      	mov	r5, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b913      	cbnz	r3, 8006c10 <_fflush_r+0x10>
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	b118      	cbz	r0, 8006c1a <_fflush_r+0x1a>
 8006c12:	6a03      	ldr	r3, [r0, #32]
 8006c14:	b90b      	cbnz	r3, 8006c1a <_fflush_r+0x1a>
 8006c16:	f7fe f961 	bl	8004edc <__sinit>
 8006c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f3      	beq.n	8006c0a <_fflush_r+0xa>
 8006c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c24:	07d0      	lsls	r0, r2, #31
 8006c26:	d404      	bmi.n	8006c32 <_fflush_r+0x32>
 8006c28:	0599      	lsls	r1, r3, #22
 8006c2a:	d402      	bmi.n	8006c32 <_fflush_r+0x32>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2e:	f7fe fb50 	bl	80052d2 <__retarget_lock_acquire_recursive>
 8006c32:	4628      	mov	r0, r5
 8006c34:	4621      	mov	r1, r4
 8006c36:	f7ff ff5f 	bl	8006af8 <__sflush_r>
 8006c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c3c:	07da      	lsls	r2, r3, #31
 8006c3e:	4605      	mov	r5, r0
 8006c40:	d4e4      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	d4e1      	bmi.n	8006c0c <_fflush_r+0xc>
 8006c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4a:	f7fe fb43 	bl	80052d4 <__retarget_lock_release_recursive>
 8006c4e:	e7dd      	b.n	8006c0c <_fflush_r+0xc>

08006c50 <__swhatbuf_r>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	b096      	sub	sp, #88	@ 0x58
 8006c5c:	4615      	mov	r5, r2
 8006c5e:	461e      	mov	r6, r3
 8006c60:	da0d      	bge.n	8006c7e <__swhatbuf_r+0x2e>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	bf14      	ite	ne
 8006c6e:	2340      	movne	r3, #64	@ 0x40
 8006c70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c74:	2000      	movs	r0, #0
 8006c76:	6031      	str	r1, [r6, #0]
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	b016      	add	sp, #88	@ 0x58
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	466a      	mov	r2, sp
 8006c80:	f000 f848 	bl	8006d14 <_fstat_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	dbec      	blt.n	8006c62 <__swhatbuf_r+0x12>
 8006c88:	9901      	ldr	r1, [sp, #4]
 8006c8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c92:	4259      	negs	r1, r3
 8006c94:	4159      	adcs	r1, r3
 8006c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c9a:	e7eb      	b.n	8006c74 <__swhatbuf_r+0x24>

08006c9c <__smakebuf_r>:
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca0:	079d      	lsls	r5, r3, #30
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d507      	bpl.n	8006cb8 <__smakebuf_r+0x1c>
 8006ca8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	b003      	add	sp, #12
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb8:	ab01      	add	r3, sp, #4
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f7ff ffc8 	bl	8006c50 <__swhatbuf_r>
 8006cc0:	9f00      	ldr	r7, [sp, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff f9c6 	bl	8006058 <_malloc_r>
 8006ccc:	b948      	cbnz	r0, 8006ce2 <__smakebuf_r+0x46>
 8006cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd2:	059a      	lsls	r2, r3, #22
 8006cd4:	d4ee      	bmi.n	8006cb4 <__smakebuf_r+0x18>
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	e7e2      	b.n	8006ca8 <__smakebuf_r+0xc>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	6020      	str	r0, [r4, #0]
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cf2:	b15b      	cbz	r3, 8006d0c <__smakebuf_r+0x70>
 8006cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f81d 	bl	8006d38 <_isatty_r>
 8006cfe:	b128      	cbz	r0, 8006d0c <__smakebuf_r+0x70>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	431d      	orrs	r5, r3
 8006d10:	81a5      	strh	r5, [r4, #12]
 8006d12:	e7cf      	b.n	8006cb4 <__smakebuf_r+0x18>

08006d14 <_fstat_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4d07      	ldr	r5, [pc, #28]	@ (8006d34 <_fstat_r+0x20>)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	f7fa fb3b 	bl	800139c <_fstat>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	d102      	bne.n	8006d30 <_fstat_r+0x1c>
 8006d2a:	682b      	ldr	r3, [r5, #0]
 8006d2c:	b103      	cbz	r3, 8006d30 <_fstat_r+0x1c>
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	bd38      	pop	{r3, r4, r5, pc}
 8006d32:	bf00      	nop
 8006d34:	20000434 	.word	0x20000434

08006d38 <_isatty_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d06      	ldr	r5, [pc, #24]	@ (8006d54 <_isatty_r+0x1c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7fa fb3a 	bl	80013bc <_isatty>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_isatty_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_isatty_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20000434 	.word	0x20000434

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_sbrk_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fa fb42 	bl	80013ec <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000434 	.word	0x20000434

08006d78 <memcpy>:
 8006d78:	440a      	add	r2, r1
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d80:	d100      	bne.n	8006d84 <memcpy+0xc>
 8006d82:	4770      	bx	lr
 8006d84:	b510      	push	{r4, lr}
 8006d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	d1f9      	bne.n	8006d86 <memcpy+0xe>
 8006d92:	bd10      	pop	{r4, pc}

08006d94 <__assert_func>:
 8006d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d96:	4614      	mov	r4, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <__assert_func+0x2c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4605      	mov	r5, r0
 8006da0:	68d8      	ldr	r0, [r3, #12]
 8006da2:	b954      	cbnz	r4, 8006dba <__assert_func+0x26>
 8006da4:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <__assert_func+0x30>)
 8006da6:	461c      	mov	r4, r3
 8006da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dac:	9100      	str	r1, [sp, #0]
 8006dae:	462b      	mov	r3, r5
 8006db0:	4905      	ldr	r1, [pc, #20]	@ (8006dc8 <__assert_func+0x34>)
 8006db2:	f000 f841 	bl	8006e38 <fiprintf>
 8006db6:	f000 f851 	bl	8006e5c <abort>
 8006dba:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <__assert_func+0x38>)
 8006dbc:	e7f4      	b.n	8006da8 <__assert_func+0x14>
 8006dbe:	bf00      	nop
 8006dc0:	20000018 	.word	0x20000018
 8006dc4:	0800722e 	.word	0x0800722e
 8006dc8:	08007200 	.word	0x08007200
 8006dcc:	080071f3 	.word	0x080071f3

08006dd0 <_calloc_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8006dd6:	b93c      	cbnz	r4, 8006de8 <_calloc_r+0x18>
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7ff f93d 	bl	8006058 <_malloc_r>
 8006dde:	4606      	mov	r6, r0
 8006de0:	b928      	cbnz	r0, 8006dee <_calloc_r+0x1e>
 8006de2:	2600      	movs	r6, #0
 8006de4:	4630      	mov	r0, r6
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	220c      	movs	r2, #12
 8006dea:	6002      	str	r2, [r0, #0]
 8006dec:	e7f9      	b.n	8006de2 <_calloc_r+0x12>
 8006dee:	462a      	mov	r2, r5
 8006df0:	4621      	mov	r1, r4
 8006df2:	f7fe f9f1 	bl	80051d8 <memset>
 8006df6:	e7f5      	b.n	8006de4 <_calloc_r+0x14>

08006df8 <__ascii_mbtowc>:
 8006df8:	b082      	sub	sp, #8
 8006dfa:	b901      	cbnz	r1, 8006dfe <__ascii_mbtowc+0x6>
 8006dfc:	a901      	add	r1, sp, #4
 8006dfe:	b142      	cbz	r2, 8006e12 <__ascii_mbtowc+0x1a>
 8006e00:	b14b      	cbz	r3, 8006e16 <__ascii_mbtowc+0x1e>
 8006e02:	7813      	ldrb	r3, [r2, #0]
 8006e04:	600b      	str	r3, [r1, #0]
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	1e10      	subs	r0, r2, #0
 8006e0a:	bf18      	it	ne
 8006e0c:	2001      	movne	r0, #1
 8006e0e:	b002      	add	sp, #8
 8006e10:	4770      	bx	lr
 8006e12:	4610      	mov	r0, r2
 8006e14:	e7fb      	b.n	8006e0e <__ascii_mbtowc+0x16>
 8006e16:	f06f 0001 	mvn.w	r0, #1
 8006e1a:	e7f8      	b.n	8006e0e <__ascii_mbtowc+0x16>

08006e1c <__ascii_wctomb>:
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	b141      	cbz	r1, 8006e34 <__ascii_wctomb+0x18>
 8006e22:	2aff      	cmp	r2, #255	@ 0xff
 8006e24:	d904      	bls.n	8006e30 <__ascii_wctomb+0x14>
 8006e26:	228a      	movs	r2, #138	@ 0x8a
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	4770      	bx	lr
 8006e30:	700a      	strb	r2, [r1, #0]
 8006e32:	2001      	movs	r0, #1
 8006e34:	4770      	bx	lr
	...

08006e38 <fiprintf>:
 8006e38:	b40e      	push	{r1, r2, r3}
 8006e3a:	b503      	push	{r0, r1, lr}
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	4805      	ldr	r0, [pc, #20]	@ (8006e58 <fiprintf+0x20>)
 8006e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e46:	6800      	ldr	r0, [r0, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	f7ff fd3d 	bl	80068c8 <_vfiprintf_r>
 8006e4e:	b002      	add	sp, #8
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	20000018 	.word	0x20000018

08006e5c <abort>:
 8006e5c:	b508      	push	{r3, lr}
 8006e5e:	2006      	movs	r0, #6
 8006e60:	f000 f82c 	bl	8006ebc <raise>
 8006e64:	2001      	movs	r0, #1
 8006e66:	f7fa fa65 	bl	8001334 <_exit>

08006e6a <_raise_r>:
 8006e6a:	291f      	cmp	r1, #31
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	d904      	bls.n	8006e7e <_raise_r+0x14>
 8006e74:	2316      	movs	r3, #22
 8006e76:	6003      	str	r3, [r0, #0]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
 8006e7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e80:	b112      	cbz	r2, 8006e88 <_raise_r+0x1e>
 8006e82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e86:	b94b      	cbnz	r3, 8006e9c <_raise_r+0x32>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f831 	bl	8006ef0 <_getpid_r>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	4601      	mov	r1, r0
 8006e92:	4628      	mov	r0, r5
 8006e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e98:	f000 b818 	b.w	8006ecc <_kill_r>
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d00a      	beq.n	8006eb6 <_raise_r+0x4c>
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	d103      	bne.n	8006eac <_raise_r+0x42>
 8006ea4:	2316      	movs	r3, #22
 8006ea6:	6003      	str	r3, [r0, #0]
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	e7e7      	b.n	8006e7c <_raise_r+0x12>
 8006eac:	2100      	movs	r1, #0
 8006eae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4798      	blx	r3
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	e7e0      	b.n	8006e7c <_raise_r+0x12>
	...

08006ebc <raise>:
 8006ebc:	4b02      	ldr	r3, [pc, #8]	@ (8006ec8 <raise+0xc>)
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	f7ff bfd2 	b.w	8006e6a <_raise_r>
 8006ec6:	bf00      	nop
 8006ec8:	20000018 	.word	0x20000018

08006ecc <_kill_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	@ (8006eec <_kill_r+0x20>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	f7fa fa1b 	bl	8001314 <_kill>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d102      	bne.n	8006ee8 <_kill_r+0x1c>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b103      	cbz	r3, 8006ee8 <_kill_r+0x1c>
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	bf00      	nop
 8006eec:	20000434 	.word	0x20000434

08006ef0 <_getpid_r>:
 8006ef0:	f7fa ba08 	b.w	8001304 <_getpid>

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
