
Uart_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08007958  08007958  00008958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d68  08007d68  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d68  08007d68  00008d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d70  08007d70  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d70  08007d70  00008d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007d78  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000002c4  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d618  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002207  00000000  00000000  0001681c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00018a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097f  00000000  00000000  00019680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022298  00000000  00000000  00019fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa3f  00000000  00000000  0003c297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd19c  00000000  00000000  0004bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118e72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044ec  00000000  00000000  00118eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  0011d3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007940 	.word	0x08007940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007940 	.word	0x08007940

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b9a0 	b.w	8000f80 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f83c 	bl	8000cc4 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff33 	bl	8000acc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fca9 	bl	80005e8 <__aeabi_dmul>
 8000c96:	f7ff ff57 	bl	8000b48 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc2a 	bl	80004f4 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fca0 	bl	80005e8 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fae2 	bl	8000278 <__aeabi_dsub>
 8000cb4:	f7ff ff48 	bl	8000b48 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9d08      	ldr	r5, [sp, #32]
 8000cca:	460c      	mov	r4, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14e      	bne.n	8000d6e <__udivmoddi4+0xaa>
 8000cd0:	4694      	mov	ip, r2
 8000cd2:	458c      	cmp	ip, r1
 8000cd4:	4686      	mov	lr, r0
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	d962      	bls.n	8000da2 <__udivmoddi4+0xde>
 8000cdc:	b14a      	cbz	r2, 8000cf2 <__udivmoddi4+0x2e>
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	4091      	lsls	r1, r2
 8000ce4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	4319      	orrs	r1, r3
 8000cee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f f68c 	uxth.w	r6, ip
 8000cfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb07 1114 	mls	r1, r7, r4, r1
 8000d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0a:	fb04 f106 	mul.w	r1, r4, r6
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x64>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1a:	f080 8112 	bcs.w	8000f42 <__udivmoddi4+0x27e>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 810f 	bls.w	8000f42 <__udivmoddi4+0x27e>
 8000d24:	3c02      	subs	r4, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a59      	subs	r1, r3, r1
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d32:	fb07 1110 	mls	r1, r7, r0, r1
 8000d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3a:	fb00 f606 	mul.w	r6, r0, r6
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x94>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4a:	f080 80fc 	bcs.w	8000f46 <__udivmoddi4+0x282>
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	f240 80f9 	bls.w	8000f46 <__udivmoddi4+0x282>
 8000d54:	4463      	add	r3, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	1b9b      	subs	r3, r3, r6
 8000d5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa6>
 8000d62:	40d3      	lsrs	r3, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xba>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb4>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x150>
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xcc>
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	f0c0 80f0 	bcc.w	8000f70 <__udivmoddi4+0x2ac>
 8000d90:	1a86      	subs	r6, r0, r2
 8000d92:	eb64 0303 	sbc.w	r3, r4, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	2d00      	cmp	r5, #0
 8000d9a:	d0e6      	beq.n	8000d6a <__udivmoddi4+0xa6>
 8000d9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000da0:	e7e3      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x204>
 8000da8:	eba1 040c 	sub.w	r4, r1, ip
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa1f f78c 	uxth.w	r7, ip
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb07 f006 	mul.w	r0, r7, r6
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x11c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x11a>
 8000dd8:	4298      	cmp	r0, r3
 8000dda:	f200 80cd 	bhi.w	8000f78 <__udivmoddi4+0x2b4>
 8000dde:	4626      	mov	r6, r4
 8000de0:	1a1c      	subs	r4, r3, r0
 8000de2:	fa1f f38e 	uxth.w	r3, lr
 8000de6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dea:	fb08 4410 	mls	r4, r8, r0, r4
 8000dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df2:	fb00 f707 	mul.w	r7, r0, r7
 8000df6:	429f      	cmp	r7, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x148>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x146>
 8000e04:	429f      	cmp	r7, r3
 8000e06:	f200 80b0 	bhi.w	8000f6a <__udivmoddi4+0x2a6>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	1bdb      	subs	r3, r3, r7
 8000e0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x9c>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e24:	fa04 f301 	lsl.w	r3, r4, r1
 8000e28:	ea43 030c 	orr.w	r3, r3, ip
 8000e2c:	40f4      	lsrs	r4, r6
 8000e2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e32:	0c38      	lsrs	r0, r7, #16
 8000e34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e38:	fbb4 fef0 	udiv	lr, r4, r0
 8000e3c:	fa1f fc87 	uxth.w	ip, r7
 8000e40:	fb00 441e 	mls	r4, r0, lr, r4
 8000e44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e48:	fb0e f90c 	mul.w	r9, lr, ip
 8000e4c:	45a1      	cmp	r9, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x1a6>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5a:	f080 8084 	bcs.w	8000f66 <__udivmoddi4+0x2a2>
 8000e5e:	45a1      	cmp	r9, r4
 8000e60:	f240 8081 	bls.w	8000f66 <__udivmoddi4+0x2a2>
 8000e64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	eba4 0409 	sub.w	r4, r4, r9
 8000e6e:	fa1f f983 	uxth.w	r9, r3
 8000e72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e76:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1d2>
 8000e86:	193c      	adds	r4, r7, r4
 8000e88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e8c:	d267      	bcs.n	8000f5e <__udivmoddi4+0x29a>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d965      	bls.n	8000f5e <__udivmoddi4+0x29a>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ea2:	429c      	cmp	r4, r3
 8000ea4:	46ce      	mov	lr, r9
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	d351      	bcc.n	8000f4e <__udivmoddi4+0x28a>
 8000eaa:	d04e      	beq.n	8000f4a <__udivmoddi4+0x286>
 8000eac:	b155      	cbz	r5, 8000ec4 <__udivmoddi4+0x200>
 8000eae:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	40cb      	lsrs	r3, r1
 8000ebc:	431e      	orrs	r6, r3
 8000ebe:	40cc      	lsrs	r4, r1
 8000ec0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e750      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed8:	4094      	lsls	r4, r2
 8000eda:	430c      	orrs	r4, r1
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee4:	fa1f f78c 	uxth.w	r7, ip
 8000ee8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eec:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef0:	0c23      	lsrs	r3, r4, #16
 8000ef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef6:	fb00 f107 	mul.w	r1, r0, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x24c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f06:	d22c      	bcs.n	8000f62 <__udivmoddi4+0x29e>
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d92a      	bls.n	8000f62 <__udivmoddi4+0x29e>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f18:	fb08 3311 	mls	r3, r8, r1, r3
 8000f1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f20:	fb01 f307 	mul.w	r3, r1, r7
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x276>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f30:	d213      	bcs.n	8000f5a <__udivmoddi4+0x296>
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	d911      	bls.n	8000f5a <__udivmoddi4+0x296>
 8000f36:	3902      	subs	r1, #2
 8000f38:	4464      	add	r4, ip
 8000f3a:	1ae4      	subs	r4, r4, r3
 8000f3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f40:	e739      	b.n	8000db6 <__udivmoddi4+0xf2>
 8000f42:	4604      	mov	r4, r0
 8000f44:	e6f0      	b.n	8000d28 <__udivmoddi4+0x64>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e706      	b.n	8000d58 <__udivmoddi4+0x94>
 8000f4a:	45c8      	cmp	r8, r9
 8000f4c:	d2ae      	bcs.n	8000eac <__udivmoddi4+0x1e8>
 8000f4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	e7a8      	b.n	8000eac <__udivmoddi4+0x1e8>
 8000f5a:	4631      	mov	r1, r6
 8000f5c:	e7ed      	b.n	8000f3a <__udivmoddi4+0x276>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e799      	b.n	8000e96 <__udivmoddi4+0x1d2>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e7d4      	b.n	8000f10 <__udivmoddi4+0x24c>
 8000f66:	46d6      	mov	lr, sl
 8000f68:	e77f      	b.n	8000e6a <__udivmoddi4+0x1a6>
 8000f6a:	4463      	add	r3, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e74d      	b.n	8000e0c <__udivmoddi4+0x148>
 8000f70:	4606      	mov	r6, r0
 8000f72:	4623      	mov	r3, r4
 8000f74:	4608      	mov	r0, r1
 8000f76:	e70f      	b.n	8000d98 <__udivmoddi4+0xd4>
 8000f78:	3e02      	subs	r6, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	e730      	b.n	8000de0 <__udivmoddi4+0x11c>
 8000f7e:	bf00      	nop

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200c      	movs	r0, #12
 8000fac:	f000 ff35 	bl	8001e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f000 ff4e 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b27      	ldr	r3, [pc, #156]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a26      	ldr	r2, [pc, #152]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b20      	ldr	r3, [pc, #128]	@ (800107c <MX_GPIO_Init+0xb8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_GPIO_Init+0xb8>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a11      	ldr	r2, [pc, #68]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_GPIO_Init+0xb8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Pin|Orange_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <MX_GPIO_Init+0xbc>)
 8001052:	f001 fcb7 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Green_Pin|Orange_Pin|Red_Pin|Blue_Pin;
 8001056:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_GPIO_Init+0xbc>)
 8001070:	f001 fb0c 	bl	800268c <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	@ 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020c00 	.word	0x40020c00

08001084 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800108c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001090:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800109c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80010a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010ac:	e000      	b.n	80010b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f9      	beq.n	80010ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010ba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010c4:	687b      	ldr	r3, [r7, #4]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <ROM_checksum>:
#include <cstdint>
#include <cstring>
#endif

int8_t ROM_checksum(int32_t *data)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	int32_t tmp = (data[0]+data[1]+data[2]+data[3]+data[4]+data[5])& 0x000000FF;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	441a      	add	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3308      	adds	r3, #8
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	441a      	add	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	330c      	adds	r3, #12
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	441a      	add	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3310      	adds	r3, #16
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	441a      	add	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3314      	adds	r3, #20
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	60fb      	str	r3, [r7, #12]
	int8_t tmp2 = (int8_t)tmp;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	72fb      	strb	r3, [r7, #11]
	return tmp2;
 800110e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <encodeBuffer>:
encodeBuffer(int16_t *rar, int16_t *lar,
		int32_t *rec, int32_t *lec,
		int8_t *free, int8_t *e1234567,
		int8_t *volt, float *amp,
		uint8_t *buffer )
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b08c      	sub	sp, #48	@ 0x30
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	603b      	str	r3, [r7, #0]
	// Copy the integer values into the buffer (assuming little-endian system)
	buffer[0] = (uint8_t)(   *(rar) & 0xFF );
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001136:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)( ( *(rar) >> 8 )  & 0xFF );
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	121b      	asrs	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001144:	3301      	adds	r3, #1
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	701a      	strb	r2, [r3, #0]

	buffer[2] = (uint8_t)(   *(lar) & 0xFF );
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001152:	3302      	adds	r3, #2
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)( ( *(lar) >> 8 )  & 0xFF );
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	121b      	asrs	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001164:	3303      	adds	r3, #3
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

	buffer[4] = (uint8_t)(   *(rec) & 0xFF );
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001170:	3304      	adds	r3, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
	buffer[5] = (uint8_t)( ( *(rec) >> 8 )  & 0xFF );
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	121a      	asrs	r2, r3, #8
 800117c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800117e:	3305      	adds	r3, #5
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
	buffer[6] = (uint8_t)( ( *(rec) >> 16 ) & 0xFF );
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	141a      	asrs	r2, r3, #16
 800118a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800118c:	3306      	adds	r3, #6
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	buffer[7] = (uint8_t)( ( *(rec) >> 24 ) & 0xFF );
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	161a      	asrs	r2, r3, #24
 8001198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800119a:	3307      	adds	r3, #7
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]

	buffer[8]  = (uint8_t)(  *(lec) & 0xFF );
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011a6:	3308      	adds	r3, #8
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]
	buffer[9]  = (uint8_t)(( *(lec) >> 8 )  & 0xFF );
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	121a      	asrs	r2, r3, #8
 80011b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011b4:	3309      	adds	r3, #9
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
	buffer[10] = (uint8_t)(( *(lec) >> 16 ) & 0xFF );
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	141a      	asrs	r2, r3, #16
 80011c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011c2:	330a      	adds	r3, #10
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]
	buffer[11] = (uint8_t)(( *(lec) >> 24 ) & 0xFF );
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	161a      	asrs	r2, r3, #24
 80011ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d0:	330b      	adds	r3, #11
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]

	/* rdr နဲ့ ldr ကို pc က ဖမ်းစရာမလို */
	buffer[12] = (uint8_t)0xff; buffer[13] = (uint8_t)0xff;
 80011d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d8:	330c      	adds	r3, #12
 80011da:	22ff      	movs	r2, #255	@ 0xff
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011e0:	330d      	adds	r3, #13
 80011e2:	22ff      	movs	r2, #255	@ 0xff
 80011e4:	701a      	strb	r2, [r3, #0]
	buffer[14] = (uint8_t)0xff; buffer[15] = (uint8_t)0xff;
 80011e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011e8:	330e      	adds	r3, #14
 80011ea:	22ff      	movs	r2, #255	@ 0xff
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011f0:	330f      	adds	r3, #15
 80011f2:	22ff      	movs	r2, #255	@ 0xff
 80011f4:	701a      	strb	r2, [r3, #0]

	buffer[16] = (uint8_t)*(free) ;
 80011f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f8:	f993 2000 	ldrsb.w	r2, [r3]
 80011fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011fe:	3310      	adds	r3, #16
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]

	buffer[17] = (uint8_t)*(e1234567);
 8001204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001206:	f993 2000 	ldrsb.w	r2, [r3]
 800120a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800120c:	3311      	adds	r3, #17
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

	buffer[18] = (uint8_t)*(volt);
 8001212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001214:	f993 2000 	ldrsb.w	r2, [r3]
 8001218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800121a:	3312      	adds	r3, #18
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	701a      	strb	r2, [r3, #0]

	// float to byte array
	uint8_t byte_arr[4];
	memcpy(byte_arr, amp, 4);
 8001220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
	buffer[19] = byte_arr[0];
 8001226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001228:	3313      	adds	r3, #19
 800122a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800122e:	701a      	strb	r2, [r3, #0]
	buffer[20] = byte_arr[1];
 8001230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001232:	3314      	adds	r3, #20
 8001234:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001238:	701a      	strb	r2, [r3, #0]
	buffer[21] = byte_arr[2];
 800123a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800123c:	3315      	adds	r3, #21
 800123e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001242:	701a      	strb	r2, [r3, #0]
	buffer[22] = byte_arr[3];
 8001244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001246:	3316      	adds	r3, #22
 8001248:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800124c:	701a      	strb	r2, [r3, #0]

	/* CALCULATE CHECKSUM */
		int32_t data[6]; //24bytes
		data[0] = buffer[0] +(buffer[1] <<8)+(buffer[2] <<16)+(buffer[3] <<24);
 800124e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001256:	3301      	adds	r3, #1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	441a      	add	r2, r3
 800125e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001260:	3302      	adds	r3, #2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	441a      	add	r2, r3
 8001268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800126a:	3303      	adds	r3, #3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	061b      	lsls	r3, r3, #24
 8001270:	4413      	add	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
		data[1] = buffer[4] +(buffer[5] <<8)+(buffer[6] <<16)+(buffer[7] <<24);
 8001274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001276:	3304      	adds	r3, #4
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800127e:	3305      	adds	r3, #5
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	441a      	add	r2, r3
 8001286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001288:	3306      	adds	r3, #6
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	441a      	add	r2, r3
 8001290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001292:	3307      	adds	r3, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	061b      	lsls	r3, r3, #24
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
		data[2] = buffer[8] +(buffer[9] <<8)+(buffer[10]<<16)+(buffer[11]<<24);
 800129c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800129e:	3308      	adds	r3, #8
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012a6:	3309      	adds	r3, #9
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	441a      	add	r2, r3
 80012ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012b0:	330a      	adds	r3, #10
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	441a      	add	r2, r3
 80012b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ba:	330b      	adds	r3, #11
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	4413      	add	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
		data[3] = buffer[12]+(buffer[13]<<8)+(buffer[14]<<16)+(buffer[15]<<24);
 80012c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012c6:	330c      	adds	r3, #12
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ce:	330d      	adds	r3, #13
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	441a      	add	r2, r3
 80012d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012d8:	330e      	adds	r3, #14
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	441a      	add	r2, r3
 80012e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012e2:	330f      	adds	r3, #15
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	061b      	lsls	r3, r3, #24
 80012e8:	4413      	add	r3, r2
 80012ea:	61fb      	str	r3, [r7, #28]
		data[4] = buffer[16]+(buffer[17]<<8)+(buffer[18]<<16)+(buffer[19]<<24);
 80012ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ee:	3310      	adds	r3, #16
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012f6:	3311      	adds	r3, #17
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	441a      	add	r2, r3
 80012fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001300:	3312      	adds	r3, #18
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	441a      	add	r2, r3
 8001308:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800130a:	3313      	adds	r3, #19
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	061b      	lsls	r3, r3, #24
 8001310:	4413      	add	r3, r2
 8001312:	623b      	str	r3, [r7, #32]
		data[5] = buffer[20]+(buffer[21]<<8)+(buffer[22]<<16)+(0x0000    <<24);
 8001314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001316:	3314      	adds	r3, #20
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800131e:	3315      	adds	r3, #21
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	441a      	add	r2, r3
 8001326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001328:	3316      	adds	r3, #22
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	4413      	add	r3, r2
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
		int8_t checksum_= ROM_checksum(data);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fecb 	bl	80010d2 <ROM_checksum>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	buffer[23] = (uint8_t)checksum_;
 8001342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001344:	3317      	adds	r3, #23
 8001346:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800134a:	701a      	strb	r2, [r3, #0]

	buffer[24] = (uint8_t)13; //"\r";
 800134c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800134e:	3318      	adds	r3, #24
 8001350:	220d      	movs	r2, #13
 8001352:	701a      	strb	r2, [r3, #0]
	buffer[25] = (uint8_t)10; //"\n";
 8001354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001356:	3319      	adds	r3, #25
 8001358:	220a      	movs	r2, #10
 800135a:	701a      	strb	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	3730      	adds	r7, #48	@ 0x30
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	@ 0x50
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	char *pend; char *pend1; char *pend2; char *pend3;char *pend4;
	char *pend5; char *pend6; char *pend7;char *pend8;char *pend9;
	int16_t rar =  strtol(rx_data, &pend, 10);
 800136c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001370:	220a      	movs	r2, #10
 8001372:	4619      	mov	r1, r3
 8001374:	4840      	ldr	r0, [pc, #256]	@ (8001478 <HAL_UART_RxCpltCallback+0x114>)
 8001376:	f004 fad9 	bl	800592c <strtol>
 800137a:	4603      	mov	r3, r0
 800137c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t lar =  strtol(pend , &pend1, 10);
 8001380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001382:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001386:	220a      	movs	r2, #10
 8001388:	4618      	mov	r0, r3
 800138a:	f004 facf 	bl	800592c <strtol>
 800138e:	4603      	mov	r3, r0
 8001390:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int32_t rec =  strtol(pend1, &pend2, 10);
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800139a:	220a      	movs	r2, #10
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fac5 	bl	800592c <strtol>
 80013a2:	64b8      	str	r0, [r7, #72]	@ 0x48
	int32_t lec =  strtol(pend2, &pend3, 10);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	f107 0120 	add.w	r1, r7, #32
 80013aa:	220a      	movs	r2, #10
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fabd 	bl	800592c <strtol>
 80013b2:	6478      	str	r0, [r7, #68]	@ 0x44
	int16_t rdr =  strtol(pend3, &pend4, 10);
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	f107 011c 	add.w	r1, r7, #28
 80013ba:	220a      	movs	r2, #10
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fab5 	bl	800592c <strtol>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	int16_t ldr =  strtol(pend4, &pend5, 10);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f107 0118 	add.w	r1, r7, #24
 80013ce:	220a      	movs	r2, #10
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 faab 	bl	800592c <strtol>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	int16_t free=  strtol(pend5, &pend6, 10);
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f107 0114 	add.w	r1, r7, #20
 80013e2:	220a      	movs	r2, #10
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 faa1 	bl	800592c <strtol>
 80013ea:	4603      	mov	r3, r0
 80013ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	int16_t e123=  strtol(pend6, &pend7, 10);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f107 0110 	add.w	r1, r7, #16
 80013f4:	220a      	movs	r2, #10
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fa98 	bl	800592c <strtol>
 80013fc:	4603      	mov	r3, r0
 80013fe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	int16_t volt= (strtol(pend7, &pend8, 10)); //  & 0xff;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f107 010c 	add.w	r1, r7, #12
 8001406:	220a      	movs	r2, #10
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fa8f 	bl	800592c <strtol>
 800140e:	4603      	mov	r3, r0
 8001410:	877b      	strh	r3, [r7, #58]	@ 0x3a
	float  amp  =  strtof(pend8, &pend9);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f107 0208 	add.w	r2, r7, #8
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f004 f9a8 	bl	8005770 <strtof>
 8001420:	ee07 0a90 	vmov	s15, r0
 8001424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001428:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	int8_t checksum=(strtol(pend9, NULL, 10)) & 0xff;  //
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	220a      	movs	r2, #10
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fa7a 	bl	800592c <strtol>
 8001438:	4603      	mov	r3, r0
 800143a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	//printf("%s \r\n",rx_data);
	printf("rar: %d\r\n", rar);
 800143e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8001442:	4619      	mov	r1, r3
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <HAL_UART_RxCpltCallback+0x118>)
 8001446:	f004 fb3d 	bl	8005ac4 <iprintf>
	printf("lar: %d\r\n", lar);
 800144a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	@ (8001480 <HAL_UART_RxCpltCallback+0x11c>)
 8001452:	f004 fb37 	bl	8005ac4 <iprintf>
	printf("rec: %d\r\n", rec);
 8001456:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001458:	480a      	ldr	r0, [pc, #40]	@ (8001484 <HAL_UART_RxCpltCallback+0x120>)
 800145a:	f004 fb33 	bl	8005ac4 <iprintf>
	printf("lec: %d\r\n", lec);
 800145e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <HAL_UART_RxCpltCallback+0x124>)
 8001462:	f004 fb2f 	bl	8005ac4 <iprintf>

	HAL_UART_Receive_DMA(&huart3,rx_data,26);
 8001466:	221a      	movs	r2, #26
 8001468:	4903      	ldr	r1, [pc, #12]	@ (8001478 <HAL_UART_RxCpltCallback+0x114>)
 800146a:	4808      	ldr	r0, [pc, #32]	@ (800148c <HAL_UART_RxCpltCallback+0x128>)
 800146c:	f002 faca 	bl	8003a04 <HAL_UART_Receive_DMA>
}
 8001470:	bf00      	nop
 8001472:	3750      	adds	r7, #80	@ 0x50
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001f0 	.word	0x200001f0
 800147c:	08007958 	.word	0x08007958
 8001480:	08007964 	.word	0x08007964
 8001484:	08007970 	.word	0x08007970
 8001488:	0800797c 	.word	0x0800797c
 800148c:	200002a0 	.word	0x200002a0

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 fb74 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 f818 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f7ff fd92 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a0:	f7ff fd70 	bl	8000f84 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014a4:	f000 fa84 	bl	80019b0 <MX_USART3_UART_Init>
  MX_TIM9_Init();
 80014a8:	f000 fa20 	bl	80018ec <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3,rx_data,42);
 80014ac:	222a      	movs	r2, #42	@ 0x2a
 80014ae:	4904      	ldr	r1, [pc, #16]	@ (80014c0 <main+0x30>)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <main+0x34>)
 80014b2:	f002 faa7 	bl	8003a04 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim9);
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <main+0x38>)
 80014b8:	f001 ffa0 	bl	80033fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <main+0x2c>
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	200002a0 	.word	0x200002a0
 80014c8:	20000258 	.word	0x20000258

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	@ 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb47 	bl	8005b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <SystemClock_Config+0xcc>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <SystemClock_Config+0xd0>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2310      	movs	r3, #16
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800153c:	2308      	movs	r3, #8
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001540:	23a8      	movs	r3, #168	@ 0xa8
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001548:	2307      	movs	r3, #7
 800154a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fa6b 	bl	8002a2c <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800155c:	f000 f8aa 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2105      	movs	r1, #5
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fccc 	bl	8002f1c <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158a:	f000 f893 	bl	80016b4 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	@ 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <_write>:

/* USER CODE BEGIN 4 */
// printf debug function အသုံးပြုနိုင်ရန်
int _write(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;

  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e009      	b.n	80015c6 <_write+0x26>
  {
   ITM_SendChar(*ptr++);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	60ba      	str	r2, [r7, #8]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd62 	bl	8001084 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf1      	blt.n	80015b2 <_write+0x12>
  }
  return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <TIM1_BRK_TIM9_IRQHandler>:
//Program တစ်ခုလုံးတွက် Timer9 Interrupt
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	if(TIM9->SR & TIM_SR_UIF)
 80015de:	4b25      	ldr	r3, [pc, #148]	@ (8001674 <TIM1_BRK_TIM9_IRQHandler+0x9c>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <TIM1_BRK_TIM9_IRQHandler+0x94>
			/*char tx_data[100]; // Buffer to hold the string representation of the integer
			sprintf(tx_data, "%d %d %ld %ld %d \r\n", t1, t2, t3, t4, t5); // Convert integer to string
			HAL_UART_Transmit_IT(&huart3, tx_data, 50);
			printf("hello\n");
			printf("TR_Data: %s\r\n",tx_data);*/
		transmit_data.right_actual_rpm = -3452;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 80015ec:	f24f 2284 	movw	r2, #62084	@ 0xf284
 80015f0:	801a      	strh	r2, [r3, #0]
		transmit_data.left_actual_rpm = 4353;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 80015f4:	f241 1201 	movw	r2, #4353	@ 0x1101
 80015f8:	805a      	strh	r2, [r3, #2]
		transmit_data.right_encoder_count = -4536762;
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 80015fc:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <TIM1_BRK_TIM9_IRQHandler+0xa4>)
 80015fe:	605a      	str	r2, [r3, #4]
		transmit_data.left_encoder_count = 4875743;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001602:	4a1f      	ldr	r2, [pc, #124]	@ (8001680 <TIM1_BRK_TIM9_IRQHandler+0xa8>)
 8001604:	609a      	str	r2, [r3, #8]
		transmit_data.free = 4;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001608:	2204      	movs	r2, #4
 800160a:	741a      	strb	r2, [r3, #16]
		transmit_data.e1234567 = 8;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 800160e:	2208      	movs	r2, #8
 8001610:	745a      	strb	r2, [r3, #17]
			encodeBuffer(&transmit_data.right_actual_rpm, &transmit_data.left_actual_rpm,
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001614:	9304      	str	r3, [sp, #16]
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <TIM1_BRK_TIM9_IRQHandler+0xb0>)
 8001618:	9303      	str	r3, [sp, #12]
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <TIM1_BRK_TIM9_IRQHandler+0xc4>)
 800162a:	491d      	ldr	r1, [pc, #116]	@ (80016a0 <TIM1_BRK_TIM9_IRQHandler+0xc8>)
 800162c:	4812      	ldr	r0, [pc, #72]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 800162e:	f7ff fd76 	bl	800111e <encodeBuffer>
					&transmit_data.right_encoder_count, &transmit_data.left_encoder_count,
					&transmit_data.free, &transmit_data.e1234567,
					&transmit_data.volt, &transmit_data.ampere,
					transmit_data.buffer );

			HAL_UART_Transmit_IT(&huart3,transmit_data.buffer,26);
 8001632:	221a      	movs	r2, #26
 8001634:	4913      	ldr	r1, [pc, #76]	@ (8001684 <TIM1_BRK_TIM9_IRQHandler+0xac>)
 8001636:	481b      	ldr	r0, [pc, #108]	@ (80016a4 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001638:	f002 f9ae 	bl	8003998 <HAL_UART_Transmit_IT>
			HAL_UART_Receive_DMA(&huart3,rx_data,42);
 800163c:	222a      	movs	r2, #42	@ 0x2a
 800163e:	491a      	ldr	r1, [pc, #104]	@ (80016a8 <TIM1_BRK_TIM9_IRQHandler+0xd0>)
 8001640:	4818      	ldr	r0, [pc, #96]	@ (80016a4 <TIM1_BRK_TIM9_IRQHandler+0xcc>)
 8001642:	f002 f9df 	bl	8003a04 <HAL_UART_Receive_DMA>
			printf("%d\r\n",transmit_data.right_actual_rpm);
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	4619      	mov	r1, r3
 800164e:	4817      	ldr	r0, [pc, #92]	@ (80016ac <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 8001650:	f004 fa38 	bl	8005ac4 <iprintf>
			printf("%d\r\n",transmit_data.left_actual_rpm);
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <TIM1_BRK_TIM9_IRQHandler+0xa0>)
 8001656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800165a:	4619      	mov	r1, r3
 800165c:	4813      	ldr	r0, [pc, #76]	@ (80016ac <TIM1_BRK_TIM9_IRQHandler+0xd4>)
 800165e:	f004 fa31 	bl	8005ac4 <iprintf>
			HAL_GPIO_TogglePin(GPIOD,Green_Pin);
 8001662:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001666:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <TIM1_BRK_TIM9_IRQHandler+0xd8>)
 8001668:	f001 f9c5 	bl	80029f6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim9);
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40014000 	.word	0x40014000
 8001678:	2000021c 	.word	0x2000021c
 800167c:	ffbac646 	.word	0xffbac646
 8001680:	004a65df 	.word	0x004a65df
 8001684:	20000236 	.word	0x20000236
 8001688:	20000230 	.word	0x20000230
 800168c:	2000022e 	.word	0x2000022e
 8001690:	2000022d 	.word	0x2000022d
 8001694:	2000022c 	.word	0x2000022c
 8001698:	20000224 	.word	0x20000224
 800169c:	20000220 	.word	0x20000220
 80016a0:	2000021e 	.word	0x2000021e
 80016a4:	200002a0 	.word	0x200002a0
 80016a8:	200001f0 	.word	0x200001f0
 80016ac:	08007988 	.word	0x08007988
 80016b0:	40020c00 	.word	0x40020c00

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <HAL_MspInit+0x4c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_MspInit+0x4c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <HAL_MspInit+0x4c>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_MspInit+0x4c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016fe:	2007      	movs	r0, #7
 8001700:	f000 fb80 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 fa5d 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream1_IRQHandler+0x10>)
 8001776:	f000 fd1f 	bl	80021b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200002e8 	.word	0x200002e8

08001784 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <USART3_IRQHandler+0x10>)
 800178a:	f002 f961 	bl	8003a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002a0 	.word	0x200002a0

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b2:	f004 fa3d 	bl	8005c30 <__errno>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2216      	movs	r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017da:	bf00      	nop
 80017dc:	e7fd      	b.n	80017da <_exit+0x12>

080017de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e00a      	b.n	8001806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f0:	f3af 8000 	nop.w
 80017f4:	4601      	mov	r1, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	60ba      	str	r2, [r7, #8]
 80017fc:	b2ca      	uxtb	r2, r1
 80017fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	dbf0      	blt.n	80017f0 <_read+0x12>
  }

  return len;
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001840:	605a      	str	r2, [r3, #4]
  return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_isatty>:

int _isatty(int file)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f004 f9be 	bl	8005c30 <__errno>
 80018b4:	4603      	mov	r3, r0
 80018b6:	220c      	movs	r2, #12
 80018b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20020000 	.word	0x20020000
 80018e0:	00000400 	.word	0x00000400
 80018e4:	20000254 	.word	0x20000254
 80018e8:	20000498 	.word	0x20000498

080018ec <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001900:	4a16      	ldr	r2, [pc, #88]	@ (800195c <MX_TIM9_Init+0x70>)
 8001902:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001906:	22a7      	movs	r2, #167	@ 0xa7
 8001908:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <MX_TIM9_Init+0x6c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001912:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001916:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_TIM9_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001926:	f001 fd19 	bl	800335c <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001930:	f7ff fec0 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_TIM9_Init+0x6c>)
 8001940:	f001 fdcc 	bl	80034dc <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800194a:	f7ff feb3 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000258 	.word	0x20000258
 800195c:	40014000 	.word	0x40014000

08001960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_TIM_Base_MspInit+0x48>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d115      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <HAL_TIM_Base_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <HAL_TIM_Base_MspInit+0x4c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_TIM_Base_MspInit+0x4c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2018      	movs	r0, #24
 8001994:	f000 fa41 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001998:	2018      	movs	r0, #24
 800199a:	f000 fa5a 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40014000 	.word	0x40014000
 80019ac:	40023800 	.word	0x40023800

080019b0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_USART3_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_USART3_UART_Init+0x4c>)
 80019e8:	f001 ff86 	bl	80038f8 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f7ff fe5f 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002a0 	.word	0x200002a0
 8001a00:	40004800 	.word	0x40004800

08001a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a34      	ldr	r2, [pc, #208]	@ (8001af4 <HAL_UART_MspInit+0xf0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d162      	bne.n	8001aec <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a32      	ldr	r2, [pc, #200]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <HAL_UART_MspInit+0xf4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a70:	2307      	movs	r3, #7
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4820      	ldr	r0, [pc, #128]	@ (8001afc <HAL_UART_MspInit+0xf8>)
 8001a7c:	f000 fe06 	bl	800268c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001a82:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <HAL_UART_MspInit+0x100>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001a88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ac0:	480f      	ldr	r0, [pc, #60]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001ac2:	f000 f9e1 	bl	8001e88 <HAL_DMA_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001acc:	f7ff fdf2 	bl	80016b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <HAL_UART_MspInit+0xfc>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2027      	movs	r0, #39	@ 0x27
 8001ae2:	f000 f99a 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ae6:	2027      	movs	r0, #39	@ 0x27
 8001ae8:	f000 f9b3 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004800 	.word	0x40004800
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	200002e8 	.word	0x200002e8
 8001b04:	40026028 	.word	0x40026028

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b0c:	f000 f826 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f004 f881 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fca9 	bl	8001490 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b4c:	08007d78 	.word	0x08007d78
  ldr r2, =_sbss
 8001b50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b54:	20000498 	.word	0x20000498

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_Init+0x40>)
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_Init+0x40>)
 8001b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	@ (8001bc0 <HAL_Init+0x40>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f92b 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fd84 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f943 	bl	8001e6e <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f90b 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000348 	.word	0x20000348

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000348 	.word	0x20000348

08001c64 <__NVIC_SetPriorityGrouping>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	@ (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	@ 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	@ 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff3e 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff31 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e94:	f7ff feda 	bl	8001c4c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e099      	b.n	8001fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	e00f      	b.n	8001ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec6:	f7ff fec1 	bl	8001c4c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d908      	bls.n	8001ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e078      	b.n	8001fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e8      	bne.n	8001ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <HAL_DMA_Init+0x158>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f023 0307 	bic.w	r3, r3, #7
 8001f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d117      	bne.n	8001faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fb01 	bl	8002594 <DMA_CheckFifoParam>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	@ 0x40
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e016      	b.n	8001fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fab8 	bl	8002528 <DMA_CalcBaseAndBitshift>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	223f      	movs	r2, #63	@ 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	f010803f 	.word	0xf010803f

08001fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_DMA_Start_IT+0x26>
 8002006:	2302      	movs	r3, #2
 8002008:	e040      	b.n	800208c <HAL_DMA_Start_IT+0xa8>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d12f      	bne.n	800207e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fa4a 	bl	80024cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	223f      	movs	r2, #63	@ 0x3f
 800203e:	409a      	lsls	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0216 	orr.w	r2, r2, #22
 8002052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0208 	orr.w	r2, r2, #8
 800206a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e005      	b.n	800208a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020a2:	f7ff fdd3 	bl	8001c4c <HAL_GetTick>
 80020a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e052      	b.n	800216c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0216 	bic.w	r2, r2, #22
 80020d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_DMA_Abort+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0208 	bic.w	r2, r2, #8
 8002104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	e013      	b.n	8002140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002118:	f7ff fd98 	bl	8001c4c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d90c      	bls.n	8002140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2220      	movs	r2, #32
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2203      	movs	r2, #3
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e015      	b.n	800216c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e4      	bne.n	8002118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	223f      	movs	r2, #63	@ 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d004      	beq.n	8002192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00c      	b.n	80021ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2205      	movs	r2, #5
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002400 <HAL_DMA_IRQHandler+0x248>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002404 <HAL_DMA_IRQHandler+0x24c>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	2208      	movs	r2, #8
 80021e4:	409a      	lsls	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2208      	movs	r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2204      	movs	r2, #4
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d012      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2204      	movs	r2, #4
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2210      	movs	r2, #16
 8002296:	409a      	lsls	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2210      	movs	r2, #16
 80022b4:	409a      	lsls	r2, r3
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e01f      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e016      	b.n	8002328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d107      	bne.n	8002318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0208 	bic.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	2220      	movs	r2, #32
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 808f 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8087 	beq.w	8002458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	2220      	movs	r2, #32
 8002350:	409a      	lsls	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b05      	cmp	r3, #5
 8002360:	d136      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0216 	bic.w	r2, r2, #22
 8002370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_DMA_IRQHandler+0x1da>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0208 	bic.w	r2, r2, #8
 80023a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	223f      	movs	r2, #63	@ 0x3f
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d07e      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
        }
        return;
 80023ce:	e079      	b.n	80024c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01d      	beq.n	800241a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d031      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e02c      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e01e      	b.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10f      	bne.n	8002448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0210 	bic.w	r2, r2, #16
 8002436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2205      	movs	r2, #5
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3301      	adds	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	d307      	bcc.n	80024a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_DMA_IRQHandler+0x2cc>
 800249e:	e000      	b.n	80024a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
 80024c2:	e000      	b.n	80024c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024c4:	bf00      	nop
    }
  }
}
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	d108      	bne.n	800250c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800250a:	e007      	b.n	800251c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3b10      	subs	r3, #16
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <DMA_CalcBaseAndBitshift+0x64>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002542:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <DMA_CalcBaseAndBitshift+0x68>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d909      	bls.n	800256a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	@ 0x58
 8002568:	e007      	b.n	800257a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	aaaaaaab 	.word	0xaaaaaaab
 8002590:	080079a8 	.word	0x080079a8

08002594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d856      	bhi.n	8002662 <DMA_CheckFifoParam+0xce>
 80025b4:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <DMA_CheckFifoParam+0x28>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025df 	.word	0x080025df
 80025c4:	080025cd 	.word	0x080025cd
 80025c8:	08002663 	.word	0x08002663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d046      	beq.n	8002666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e043      	b.n	8002666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025e6:	d140      	bne.n	800266a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e03d      	b.n	800266a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f6:	d121      	bne.n	800263c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d837      	bhi.n	800266e <DMA_CheckFifoParam+0xda>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <DMA_CheckFifoParam+0x70>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261b 	.word	0x0800261b
 800260c:	08002615 	.word	0x08002615
 8002610:	0800262d 	.word	0x0800262d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
      break;
 8002618:	e030      	b.n	800267c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d025      	beq.n	8002672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262a:	e022      	b.n	8002672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002634:	d11f      	bne.n	8002676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800263a:	e01c      	b.n	8002676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d903      	bls.n	800264a <DMA_CheckFifoParam+0xb6>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d003      	beq.n	8002650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002648:	e018      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      break;
 800264e:	e015      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00e      	beq.n	800267a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e00b      	b.n	800267a <DMA_CheckFifoParam+0xe6>
      break;
 8002662:	bf00      	nop
 8002664:	e00a      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
 8002668:	e008      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
 800266c:	e006      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800266e:	bf00      	nop
 8002670:	e004      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;   
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
    }
  } 
  
  return status; 
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e16b      	b.n	8002980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 815a 	bne.w	800297a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d005      	beq.n	80026de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80b4 	beq.w	800297a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b60      	ldr	r3, [pc, #384]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	4a5f      	ldr	r2, [pc, #380]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44
 8002822:	4b5d      	ldr	r3, [pc, #372]	@ (8002998 <HAL_GPIO_Init+0x30c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282e:	4a5b      	ldr	r2, [pc, #364]	@ (800299c <HAL_GPIO_Init+0x310>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3302      	adds	r3, #2
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_GPIO_Init+0x314>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a51      	ldr	r2, [pc, #324]	@ (80029a4 <HAL_GPIO_Init+0x318>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x222>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a50      	ldr	r2, [pc, #320]	@ (80029a8 <HAL_GPIO_Init+0x31c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x21e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	@ (80029ac <HAL_GPIO_Init+0x320>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x21a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <HAL_GPIO_Init+0x324>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x216>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	@ (80029b4 <HAL_GPIO_Init+0x328>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x212>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	@ (80029b8 <HAL_GPIO_Init+0x32c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	@ (80029bc <HAL_GPIO_Init+0x330>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x20a>
 8002892:	2307      	movs	r3, #7
 8002894:	e00e      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 8002896:	2308      	movs	r3, #8
 8002898:	e00c      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289a:	2306      	movs	r3, #6
 800289c:	e00a      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 800289e:	2305      	movs	r3, #5
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x228>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	@ (800299c <HAL_GPIO_Init+0x310>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b3b      	ldr	r3, [pc, #236]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a32      	ldr	r2, [pc, #200]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1d      	ldr	r2, [pc, #116]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <HAL_GPIO_Init+0x334>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f ae90 	bls.w	80026a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40021c00 	.word	0x40021c00
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e0:	e003      	b.n	80029ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	619a      	str	r2, [r3, #24]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b085      	sub	sp, #20
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	041a      	lsls	r2, r3, #16
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	400b      	ands	r3, r1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	619a      	str	r2, [r3, #24]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e267      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d075      	beq.n	8002b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4a:	4b88      	ldr	r3, [pc, #544]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b85      	ldr	r3, [pc, #532]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b82      	ldr	r3, [pc, #520]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b7e      	ldr	r3, [pc, #504]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e242      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x74>
 8002a92:	4b76      	ldr	r3, [pc, #472]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a75      	ldr	r2, [pc, #468]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b70      	ldr	r3, [pc, #448]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6f      	ldr	r2, [pc, #444]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6c      	ldr	r2, [pc, #432]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xb0>
 8002ac4:	4b69      	ldr	r3, [pc, #420]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b66      	ldr	r3, [pc, #408]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f8b2 	bl	8001c4c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f8ae 	bl	8001c4c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e207      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5b      	ldr	r3, [pc, #364]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f89e 	bl	8001c4c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b14:	f7ff f89a 	bl	8001c4c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1f3      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b51      	ldr	r3, [pc, #324]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b42:	4b4a      	ldr	r3, [pc, #296]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b47      	ldr	r3, [pc, #284]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b44      	ldr	r3, [pc, #272]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b41      	ldr	r3, [pc, #260]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c7      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4937      	ldr	r1, [pc, #220]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b34      	ldr	r3, [pc, #208]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f853 	bl	8001c4c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f84f 	bl	8001c4c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a8      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4925      	ldr	r1, [pc, #148]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_OscConfig+0x244>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7ff f832 	bl	8001c4c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bec:	f7ff f82e 	bl	8001c4c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e187      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d036      	beq.n	8002c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7ff f812 	bl	8001c4c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff f80e 	bl	8001c4c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e167      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <HAL_RCC_OscConfig+0x240>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x200>
 8002c4a:	e01b      	b.n	8002c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4c:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_OscConfig+0x248>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe fffb 	bl	8001c4c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	e00e      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fff7 	bl	8001c4c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d907      	bls.n	8002c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e150      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	42470000 	.word	0x42470000
 8002c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ea      	bne.n	8002c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8097 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b81      	ldr	r3, [pc, #516]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	4a7c      	ldr	r2, [pc, #496]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b77      	ldr	r3, [pc, #476]	@ (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b74      	ldr	r3, [pc, #464]	@ (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a73      	ldr	r2, [pc, #460]	@ (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe ffb7 	bl	8001c4c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fe ffb3 	bl	8001c4c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e10c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea0 <HAL_RCC_OscConfig+0x474>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2ea>
 8002d08:	4b64      	ldr	r3, [pc, #400]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	4a63      	ldr	r2, [pc, #396]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x30c>
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	4a5e      	ldr	r2, [pc, #376]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x324>
 8002d38:	4b58      	ldr	r3, [pc, #352]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	4a57      	ldr	r2, [pc, #348]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d44:	4b55      	ldr	r3, [pc, #340]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a54      	ldr	r2, [pc, #336]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe ff78 	bl	8001c4c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe ff74 	bl	8001c4c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0cb      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	4b49      	ldr	r3, [pc, #292]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ee      	beq.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d84:	f7fe ff62 	bl	8001c4c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe ff5e 	bl	8001c4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e0b5      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	4b3e      	ldr	r3, [pc, #248]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	4a38      	ldr	r2, [pc, #224]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a1 	beq.w	8002f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dca:	4b34      	ldr	r3, [pc, #208]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d05c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d141      	bne.n	8002e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b31      	ldr	r3, [pc, #196]	@ (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe ff32 	bl	8001c4c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe ff2e 	bl	8001c4c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e087      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	3b01      	subs	r3, #1
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	491b      	ldr	r1, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe ff07 	bl	8001c4c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe ff03 	bl	8001c4c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e05c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x416>
 8002e60:	e054      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_OscConfig+0x478>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fef0 	bl	8001c4c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe feec 	bl	8001c4c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e045      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_OscConfig+0x470>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e038      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x4ec>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d028      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d11a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d111      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0cc      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b68      	ldr	r3, [pc, #416]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d044      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e067      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4934      	ldr	r1, [pc, #208]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fe fe1e 	bl	8001c4c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe fe1a 	bl	8001c4c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2b      	ldr	r3, [pc, #172]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	@ (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fd7e 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08007990 	.word	0x08007990
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b094      	sub	sp, #80	@ 0x50
 80030ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f4:	2300      	movs	r3, #0
 80030f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f8:	2300      	movs	r3, #0
 80030fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003100:	4b79      	ldr	r3, [pc, #484]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 800310c:	2b08      	cmp	r3, #8
 800310e:	f200 80e1 	bhi.w	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x34>
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x3a>
 800311a:	e0db      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003120:	e0db      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003122:	4b73      	ldr	r3, [pc, #460]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003124:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003126:	e0d8      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b6f      	ldr	r3, [pc, #444]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003130:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003132:	4b6d      	ldr	r3, [pc, #436]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b6a      	ldr	r3, [pc, #424]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30
 8003152:	2300      	movs	r3, #0
 8003154:	637b      	str	r3, [r7, #52]	@ 0x34
 8003156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	0159      	lsls	r1, r3, #5
 8003168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316c:	0150      	lsls	r0, r2, #5
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4621      	mov	r1, r4
 8003174:	1a51      	subs	r1, r2, r1
 8003176:	6139      	str	r1, [r7, #16]
 8003178:	4629      	mov	r1, r5
 800317a:	eb63 0301 	sbc.w	r3, r3, r1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800318c:	4659      	mov	r1, fp
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003196:	4651      	mov	r1, sl
 8003198:	018a      	lsls	r2, r1, #6
 800319a:	4651      	mov	r1, sl
 800319c:	ebb2 0801 	subs.w	r8, r2, r1
 80031a0:	4659      	mov	r1, fp
 80031a2:	eb63 0901 	sbc.w	r9, r3, r1
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ba:	4690      	mov	r8, r2
 80031bc:	4699      	mov	r9, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	eb18 0303 	adds.w	r3, r8, r3
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	462b      	mov	r3, r5
 80031c8:	eb49 0303 	adc.w	r3, r9, r3
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031da:	4629      	mov	r1, r5
 80031dc:	024b      	lsls	r3, r1, #9
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e4:	4621      	mov	r1, r4
 80031e6:	024a      	lsls	r2, r1, #9
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f8:	f7fd fd16 	bl	8000c28 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003204:	e058      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003206:	4b38      	ldr	r3, [pc, #224]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	099b      	lsrs	r3, r3, #6
 800320c:	2200      	movs	r2, #0
 800320e:	4618      	mov	r0, r3
 8003210:	4611      	mov	r1, r2
 8003212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
 800321c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	f04f 0000 	mov.w	r0, #0
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	0159      	lsls	r1, r3, #5
 800322e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003232:	0150      	lsls	r0, r2, #5
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4641      	mov	r1, r8
 800323a:	ebb2 0a01 	subs.w	sl, r2, r1
 800323e:	4649      	mov	r1, r9
 8003240:	eb63 0b01 	sbc.w	fp, r3, r1
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003258:	ebb2 040a 	subs.w	r4, r2, sl
 800325c:	eb63 050b 	sbc.w	r5, r3, fp
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	00eb      	lsls	r3, r5, #3
 800326a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326e:	00e2      	lsls	r2, r4, #3
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	4643      	mov	r3, r8
 8003276:	18e3      	adds	r3, r4, r3
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	464b      	mov	r3, r9
 800327c:	eb45 0303 	adc.w	r3, r5, r3
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328e:	4629      	mov	r1, r5
 8003290:	028b      	lsls	r3, r1, #10
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003298:	4621      	mov	r1, r4
 800329a:	028a      	lsls	r2, r1, #10
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	61fa      	str	r2, [r7, #28]
 80032a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ac:	f7fd fcbc 	bl	8000c28 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	3301      	adds	r3, #1
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80032c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x204>)
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3750      	adds	r7, #80	@ 0x50
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	007a1200 	.word	0x007a1200

080032f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCC_GetHCLKFreq+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003310:	f7ff fff0 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	0a9b      	lsrs	r3, r3, #10
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	4903      	ldr	r1, [pc, #12]	@ (8003330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	080079a0 	.word	0x080079a0

08003334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003338:	f7ff ffdc 	bl	80032f4 <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0b5b      	lsrs	r3, r3, #13
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	@ (8003358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	080079a0 	.word	0x080079a0

0800335c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e041      	b.n	80033f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fe faec 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f000 f966 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e04e      	b.n	80034b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343e:	d01d      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1f      	ldr	r2, [pc, #124]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1c      	ldr	r2, [pc, #112]	@ (80034cc <HAL_TIM_Base_Start_IT+0xd0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	@ (80034d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x80>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d111      	bne.n	80034a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d010      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	e007      	b.n	80034b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40000400 	.word	0x40000400
 80034c8:	40000800 	.word	0x40000800
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40010400 	.word	0x40010400
 80034d4:	40014000 	.word	0x40014000
 80034d8:	40001800 	.word	0x40001800

080034dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIM_ConfigClockSource+0x1c>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e0b4      	b.n	8003662 <HAL_TIM_ConfigClockSource+0x186>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800351e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003530:	d03e      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003536:	f200 8087 	bhi.w	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353e:	f000 8086 	beq.w	800364e <HAL_TIM_ConfigClockSource+0x172>
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003546:	d87f      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b70      	cmp	r3, #112	@ 0x70
 800354a:	d01a      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0xa6>
 800354c:	2b70      	cmp	r3, #112	@ 0x70
 800354e:	d87b      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b60      	cmp	r3, #96	@ 0x60
 8003552:	d050      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003554:	2b60      	cmp	r3, #96	@ 0x60
 8003556:	d877      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b50      	cmp	r3, #80	@ 0x50
 800355a:	d03c      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xfa>
 800355c:	2b50      	cmp	r3, #80	@ 0x50
 800355e:	d873      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d058      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x13a>
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d86f      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b30      	cmp	r3, #48	@ 0x30
 800356a:	d064      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b30      	cmp	r3, #48	@ 0x30
 800356e:	d86b      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b20      	cmp	r3, #32
 8003572:	d060      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b20      	cmp	r3, #32
 8003576:	d867      	bhi.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05c      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 800357c:	2b10      	cmp	r3, #16
 800357e:	d05a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	e062      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003592:	f000 f991 	bl	80038b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	609a      	str	r2, [r3, #8]
      break;
 80035ae:	e04f      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035c0:	f000 f97a 	bl	80038b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035d2:	609a      	str	r2, [r3, #8]
      break;
 80035d4:	e03c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 f8ee 	bl	80037c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2150      	movs	r1, #80	@ 0x50
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f947 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 80035f4:	e02c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003602:	461a      	mov	r2, r3
 8003604:	f000 f90d 	bl	8003822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2160      	movs	r1, #96	@ 0x60
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f937 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003614:	e01c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	461a      	mov	r2, r3
 8003624:	f000 f8ce 	bl	80037c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2140      	movs	r1, #64	@ 0x40
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f927 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003634:	e00c      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 f91e 	bl	8003882 <TIM_ITRx_SetConfig>
      break;
 8003646:	e003      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e000      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800364e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a46      	ldr	r2, [pc, #280]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a43      	ldr	r2, [pc, #268]	@ (800379c <TIM_Base_SetConfig+0x130>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a42      	ldr	r2, [pc, #264]	@ (80037a0 <TIM_Base_SetConfig+0x134>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a41      	ldr	r2, [pc, #260]	@ (80037a4 <TIM_Base_SetConfig+0x138>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a35      	ldr	r2, [pc, #212]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a32      	ldr	r2, [pc, #200]	@ (800379c <TIM_Base_SetConfig+0x130>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a31      	ldr	r2, [pc, #196]	@ (80037a0 <TIM_Base_SetConfig+0x134>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <TIM_Base_SetConfig+0x138>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2e      	ldr	r2, [pc, #184]	@ (80037ac <TIM_Base_SetConfig+0x140>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <TIM_Base_SetConfig+0x144>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <TIM_Base_SetConfig+0x148>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	@ (80037b8 <TIM_Base_SetConfig+0x14c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <TIM_Base_SetConfig+0x150>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	@ (80037c0 <TIM_Base_SetConfig+0x154>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <TIM_Base_SetConfig+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <TIM_Base_SetConfig+0x13c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40010400 	.word	0x40010400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	40001800 	.word	0x40001800
 80037bc:	40001c00 	.word	0x40001c00
 80037c0:	40002000 	.word	0x40002000

080037c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0201 	bic.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 030a 	bic.w	r3, r3, #10
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003822:	b480      	push	{r7}
 8003824:	b087      	sub	sp, #28
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 0210 	bic.w	r2, r3, #16
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800384c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800385e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	021a      	lsls	r2, r3, #8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	431a      	orrs	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e042      	b.n	8003990 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe f870 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fea1 	bl	8004684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d121      	bne.n	80039f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Transmit_IT+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01a      	b.n	80039f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2221      	movs	r2, #33	@ 0x21
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d112      	bne.n	8003a44 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_Receive_DMA+0x26>
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00b      	b.n	8003a46 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fbc2 	bl	80041c4 <UART_Start_Receive_DMA>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e000      	b.n	8003a46 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0ba      	sub	sp, #232	@ 0xe8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
 8003aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fd29 	bl	8004506 <UART_Receive_IT>
      return;
 8003ab4:	e25b      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80de 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80d1 	beq.w	8003c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d011      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
 8003b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d105      	bne.n	8003b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 81f2 	beq.w	8003f64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fcb4 	bl	8004506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba8:	2b40      	cmp	r3, #64	@ 0x40
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_UART_IRQHandler+0x17a>
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d04f      	beq.n	8003c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fbbc 	bl	8004348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b40      	cmp	r3, #64	@ 0x40
 8003bdc:	d141      	bne.n	8003c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3314      	adds	r3, #20
 8003c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1d9      	bne.n	8003bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	4a7e      	ldr	r2, [pc, #504]	@ (8003e30 <HAL_UART_IRQHandler+0x3e0>)
 8003c38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe fa98 	bl	8002174 <HAL_DMA_Abort_IT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e00e      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f99e 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	e00a      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f99a 	bl	8003f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e006      	b.n	8003c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f996 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c76:	e175      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	bf00      	nop
    return;
 8003c7a:	e173      	b.n	8003f64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 814f 	bne.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8148 	beq.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8141 	beq.w	8003f24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	f040 80b6 	bne.w	8003e34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8145 	beq.w	8003f68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	f080 813e 	bcs.w	8003f68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfe:	f000 8088 	beq.w	8003e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1d9      	bne.n	8003d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e1      	bne.n	8003d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003db0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003db4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003df4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003df6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe f941 	bl	8002094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8c1 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e2e:	e09b      	b.n	8003f68 <HAL_UART_IRQHandler+0x518>
 8003e30:	0800440f 	.word	0x0800440f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 808e 	beq.w	8003f6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8089 	beq.w	8003f6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e3      	bne.n	8003e5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e3      	bne.n	8003e92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0310 	bic.w	r3, r3, #16
 8003eee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	69b9      	ldr	r1, [r7, #24]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	617b      	str	r3, [r7, #20]
   return(result);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e3      	bne.n	8003ed8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f847 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f22:	e023      	b.n	8003f6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_UART_IRQHandler+0x4f4>
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa7a 	bl	8004436 <UART_Transmit_IT>
    return;
 8003f42:	e014      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <HAL_UART_IRQHandler+0x51e>
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 faba 	bl	80044d6 <UART_EndTransmit_IT>
    return;
 8003f62:	e004      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f64:	bf00      	nop
 8003f66:	e002      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f68:	bf00      	nop
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f6c:	bf00      	nop
  }
}
 8003f6e:	37e8      	adds	r7, #232	@ 0xe8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b09c      	sub	sp, #112	@ 0x70
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d172      	bne.n	80040ca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800400a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800400c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	667b      	str	r3, [r7, #100]	@ 0x64
 8004036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800403e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3314      	adds	r3, #20
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	623b      	str	r3, [r7, #32]
   return(result);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004068:	663b      	str	r3, [r7, #96]	@ 0x60
 800406a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004072:	633a      	str	r2, [r7, #48]	@ 0x30
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004088:	2220      	movs	r2, #32
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	2b01      	cmp	r3, #1
 8004094:	d119      	bne.n	80040ca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f023 0310 	bic.w	r3, r3, #16
 80040ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80040b6:	61fa      	str	r2, [r7, #28]
 80040b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	617b      	str	r3, [r7, #20]
   return(result);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d106      	bne.n	80040e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040dc:	4619      	mov	r1, r3
 80040de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80040e0:	f7ff ff66 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040e4:	e002      	b.n	80040ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80040e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80040e8:	f7fd f93c 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 80040ec:	bf00      	nop
 80040ee:	3770      	adds	r7, #112	@ 0x70
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	2b01      	cmp	r3, #1
 800410e:	d108      	bne.n	8004122 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff ff48 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004120:	e002      	b.n	8004128 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ff30 	bl	8003f88 <HAL_UART_RxHalfCpltCallback>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	2b80      	cmp	r3, #128	@ 0x80
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b21      	cmp	r3, #33	@ 0x21
 8004162:	d108      	bne.n	8004176 <UART_DMAError+0x46>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2200      	movs	r2, #0
 800416e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	f000 f8c1 	bl	80042f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004180:	2b40      	cmp	r3, #64	@ 0x40
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b22      	cmp	r3, #34	@ 0x22
 8004196:	d108      	bne.n	80041aa <UART_DMAError+0x7a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2200      	movs	r2, #0
 80041a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80041a4:	68b8      	ldr	r0, [r7, #8]
 80041a6:	f000 f8cf 	bl	8004348 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f043 0210 	orr.w	r2, r3, #16
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b6:	68b8      	ldr	r0, [r7, #8]
 80041b8:	f7ff fef0 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b098      	sub	sp, #96	@ 0x60
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2222      	movs	r2, #34	@ 0x22
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	4a3e      	ldr	r2, [pc, #248]	@ (80042ec <UART_Start_Receive_DMA+0x128>)
 80041f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	4a3d      	ldr	r2, [pc, #244]	@ (80042f0 <UART_Start_Receive_DMA+0x12c>)
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	4a3c      	ldr	r2, [pc, #240]	@ (80042f4 <UART_Start_Receive_DMA+0x130>)
 8004202:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	2200      	movs	r2, #0
 800420a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	f7fd fede 	bl	8001fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d019      	beq.n	800427a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004266:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004268:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800426c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e5      	bne.n	8004246 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3314      	adds	r3, #20
 8004280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	657b      	str	r3, [r7, #84]	@ 0x54
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800429a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800429c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80042a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	617b      	str	r3, [r7, #20]
   return(result);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80042d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6a39      	ldr	r1, [r7, #32]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	61fb      	str	r3, [r7, #28]
   return(result);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3760      	adds	r7, #96	@ 0x60
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08003fc9 	.word	0x08003fc9
 80042f0:	080040f5 	.word	0x080040f5
 80042f4:	08004131 	.word	0x08004131

080042f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	@ 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	61ba      	str	r2, [r7, #24]
 8004322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	613b      	str	r3, [r7, #16]
   return(result);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800433c:	bf00      	nop
 800433e:	3724      	adds	r7, #36	@ 0x24
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b095      	sub	sp, #84	@ 0x54
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004370:	643a      	str	r2, [r7, #64]	@ 0x40
 8004372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	61fb      	str	r3, [r7, #28]
   return(result);
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d119      	bne.n	80043f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f023 0310 	bic.w	r3, r3, #16
 80043d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e0:	61ba      	str	r2, [r7, #24]
 80043e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	613b      	str	r3, [r7, #16]
   return(result);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004402:	bf00      	nop
 8004404:	3754      	adds	r7, #84	@ 0x54
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fdb7 	bl	8003f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b21      	cmp	r3, #33	@ 0x21
 8004448:	d13e      	bne.n	80044c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	d114      	bne.n	800447e <UART_Transmit_IT+0x48>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d110      	bne.n	800447e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004470:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	1c9a      	adds	r2, r3, #2
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]
 800447c:	e008      	b.n	8004490 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	1c59      	adds	r1, r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6211      	str	r1, [r2, #32]
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29b      	uxth	r3, r3
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4619      	mov	r1, r3
 800449e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10f      	bne.n	80044c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fd3c 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b08c      	sub	sp, #48	@ 0x30
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b22      	cmp	r3, #34	@ 0x22
 8004518:	f040 80ae 	bne.w	8004678 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	d117      	bne.n	8004556 <UART_Receive_IT+0x50>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d113      	bne.n	8004556 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	b29a      	uxth	r2, r3
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
 8004554:	e026      	b.n	80045a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004568:	d007      	beq.n	800457a <UART_Receive_IT+0x74>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <UART_Receive_IT+0x82>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e008      	b.n	800459a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4619      	mov	r1, r3
 80045b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d15d      	bne.n	8004674 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0220 	bic.w	r2, r2, #32
 80045c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d135      	bne.n	800466a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	613b      	str	r3, [r7, #16]
   return(result);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	623a      	str	r2, [r7, #32]
 8004626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	69f9      	ldr	r1, [r7, #28]
 800462a:	6a3a      	ldr	r2, [r7, #32]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	61bb      	str	r3, [r7, #24]
   return(result);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b10      	cmp	r3, #16
 8004644:	d10a      	bne.n	800465c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fca4 	bl	8003fb0 <HAL_UARTEx_RxEventCallback>
 8004668:	e002      	b.n	8004670 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fe7a 	bl	8001364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e002      	b.n	800467a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3730      	adds	r7, #48	@ 0x30
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b0c0      	sub	sp, #256	@ 0x100
 800468a:	af00      	add	r7, sp, #0
 800468c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	ea40 0301 	orr.w	r3, r0, r1
 80046ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046dc:	f021 010c 	bic.w	r1, r1, #12
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046ea:	430b      	orrs	r3, r1
 80046ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fe:	6999      	ldr	r1, [r3, #24]
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	ea40 0301 	orr.w	r3, r0, r1
 800470a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b8f      	ldr	r3, [pc, #572]	@ (8004950 <UART_SetConfig+0x2cc>)
 8004714:	429a      	cmp	r2, r3
 8004716:	d005      	beq.n	8004724 <UART_SetConfig+0xa0>
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b8d      	ldr	r3, [pc, #564]	@ (8004954 <UART_SetConfig+0x2d0>)
 8004720:	429a      	cmp	r2, r3
 8004722:	d104      	bne.n	800472e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7fe fe06 	bl	8003334 <HAL_RCC_GetPCLK2Freq>
 8004728:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800472c:	e003      	b.n	8004736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472e:	f7fe fded 	bl	800330c <HAL_RCC_GetPCLK1Freq>
 8004732:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	f040 810c 	bne.w	800495c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800474e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004756:	4622      	mov	r2, r4
 8004758:	462b      	mov	r3, r5
 800475a:	1891      	adds	r1, r2, r2
 800475c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800475e:	415b      	adcs	r3, r3
 8004760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004766:	4621      	mov	r1, r4
 8004768:	eb12 0801 	adds.w	r8, r2, r1
 800476c:	4629      	mov	r1, r5
 800476e:	eb43 0901 	adc.w	r9, r3, r1
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	4623      	mov	r3, r4
 800478c:	eb18 0303 	adds.w	r3, r8, r3
 8004790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004794:	462b      	mov	r3, r5
 8004796:	eb49 0303 	adc.w	r3, r9, r3
 800479a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047b2:	460b      	mov	r3, r1
 80047b4:	18db      	adds	r3, r3, r3
 80047b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b8:	4613      	mov	r3, r2
 80047ba:	eb42 0303 	adc.w	r3, r2, r3
 80047be:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047c8:	f7fc fa2e 	bl	8000c28 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b61      	ldr	r3, [pc, #388]	@ (8004958 <UART_SetConfig+0x2d4>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	011c      	lsls	r4, r3, #4
 80047da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047f4:	415b      	adcs	r3, r3
 80047f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047fc:	4641      	mov	r1, r8
 80047fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004802:	4649      	mov	r1, r9
 8004804:	eb43 0b01 	adc.w	fp, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481c:	4692      	mov	sl, r2
 800481e:	469b      	mov	fp, r3
 8004820:	4643      	mov	r3, r8
 8004822:	eb1a 0303 	adds.w	r3, sl, r3
 8004826:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800482a:	464b      	mov	r3, r9
 800482c:	eb4b 0303 	adc.w	r3, fp, r3
 8004830:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004840:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004848:	460b      	mov	r3, r1
 800484a:	18db      	adds	r3, r3, r3
 800484c:	643b      	str	r3, [r7, #64]	@ 0x40
 800484e:	4613      	mov	r3, r2
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	647b      	str	r3, [r7, #68]	@ 0x44
 8004856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800485a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800485e:	f7fc f9e3 	bl	8000c28 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4611      	mov	r1, r2
 8004868:	4b3b      	ldr	r3, [pc, #236]	@ (8004958 <UART_SetConfig+0x2d4>)
 800486a:	fba3 2301 	umull	r2, r3, r3, r1
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2264      	movs	r2, #100	@ 0x64
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800487e:	4b36      	ldr	r3, [pc, #216]	@ (8004958 <UART_SetConfig+0x2d4>)
 8004880:	fba3 2302 	umull	r2, r3, r3, r2
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800488c:	441c      	add	r4, r3
 800488e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004898:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800489c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048a0:	4642      	mov	r2, r8
 80048a2:	464b      	mov	r3, r9
 80048a4:	1891      	adds	r1, r2, r2
 80048a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048a8:	415b      	adcs	r3, r3
 80048aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048b0:	4641      	mov	r1, r8
 80048b2:	1851      	adds	r1, r2, r1
 80048b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80048b6:	4649      	mov	r1, r9
 80048b8:	414b      	adcs	r3, r1
 80048ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048c8:	4659      	mov	r1, fp
 80048ca:	00cb      	lsls	r3, r1, #3
 80048cc:	4651      	mov	r1, sl
 80048ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d2:	4651      	mov	r1, sl
 80048d4:	00ca      	lsls	r2, r1, #3
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	4642      	mov	r2, r8
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e4:	464b      	mov	r3, r9
 80048e6:	460a      	mov	r2, r1
 80048e8:	eb42 0303 	adc.w	r3, r2, r3
 80048ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004904:	460b      	mov	r3, r1
 8004906:	18db      	adds	r3, r3, r3
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800490a:	4613      	mov	r3, r2
 800490c:	eb42 0303 	adc.w	r3, r2, r3
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800491a:	f7fc f985 	bl	8000c28 <__aeabi_uldivmod>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <UART_SetConfig+0x2d4>)
 8004924:	fba3 1302 	umull	r1, r3, r3, r2
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	2164      	movs	r1, #100	@ 0x64
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	3332      	adds	r3, #50	@ 0x32
 8004936:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <UART_SetConfig+0x2d4>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	f003 0207 	and.w	r2, r3, #7
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4422      	add	r2, r4
 800494a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800494c:	e106      	b.n	8004b5c <UART_SetConfig+0x4d8>
 800494e:	bf00      	nop
 8004950:	40011000 	.word	0x40011000
 8004954:	40011400 	.word	0x40011400
 8004958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800495c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004960:	2200      	movs	r2, #0
 8004962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004966:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800496a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800496e:	4642      	mov	r2, r8
 8004970:	464b      	mov	r3, r9
 8004972:	1891      	adds	r1, r2, r2
 8004974:	6239      	str	r1, [r7, #32]
 8004976:	415b      	adcs	r3, r3
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
 800497a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497e:	4641      	mov	r1, r8
 8004980:	1854      	adds	r4, r2, r1
 8004982:	4649      	mov	r1, r9
 8004984:	eb43 0501 	adc.w	r5, r3, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	00eb      	lsls	r3, r5, #3
 8004992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004996:	00e2      	lsls	r2, r4, #3
 8004998:	4614      	mov	r4, r2
 800499a:	461d      	mov	r5, r3
 800499c:	4643      	mov	r3, r8
 800499e:	18e3      	adds	r3, r4, r3
 80049a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049a4:	464b      	mov	r3, r9
 80049a6:	eb45 0303 	adc.w	r3, r5, r3
 80049aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049ca:	4629      	mov	r1, r5
 80049cc:	008b      	lsls	r3, r1, #2
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d4:	4621      	mov	r1, r4
 80049d6:	008a      	lsls	r2, r1, #2
 80049d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049dc:	f7fc f924 	bl	8000c28 <__aeabi_uldivmod>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4b60      	ldr	r3, [pc, #384]	@ (8004b68 <UART_SetConfig+0x4e4>)
 80049e6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	011c      	lsls	r4, r3, #4
 80049ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a00:	4642      	mov	r2, r8
 8004a02:	464b      	mov	r3, r9
 8004a04:	1891      	adds	r1, r2, r2
 8004a06:	61b9      	str	r1, [r7, #24]
 8004a08:	415b      	adcs	r3, r3
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a10:	4641      	mov	r1, r8
 8004a12:	1851      	adds	r1, r2, r1
 8004a14:	6139      	str	r1, [r7, #16]
 8004a16:	4649      	mov	r1, r9
 8004a18:	414b      	adcs	r3, r1
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a28:	4659      	mov	r1, fp
 8004a2a:	00cb      	lsls	r3, r1, #3
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a32:	4651      	mov	r1, sl
 8004a34:	00ca      	lsls	r2, r1, #3
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a44:	464b      	mov	r3, r9
 8004a46:	460a      	mov	r2, r1
 8004a48:	eb42 0303 	adc.w	r3, r2, r3
 8004a4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a68:	4649      	mov	r1, r9
 8004a6a:	008b      	lsls	r3, r1, #2
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a72:	4641      	mov	r1, r8
 8004a74:	008a      	lsls	r2, r1, #2
 8004a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a7a:	f7fc f8d5 	bl	8000c28 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	4b38      	ldr	r3, [pc, #224]	@ (8004b68 <UART_SetConfig+0x4e4>)
 8004a86:	fba3 2301 	umull	r2, r3, r3, r1
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2264      	movs	r2, #100	@ 0x64
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	1acb      	subs	r3, r1, r3
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	3332      	adds	r3, #50	@ 0x32
 8004a98:	4a33      	ldr	r2, [pc, #204]	@ (8004b68 <UART_SetConfig+0x4e4>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa4:	441c      	add	r4, r3
 8004aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aaa:	2200      	movs	r2, #0
 8004aac:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aae:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ab0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	1891      	adds	r1, r2, r2
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	415b      	adcs	r3, r3
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	1851      	adds	r1, r2, r1
 8004ac8:	6039      	str	r1, [r7, #0]
 8004aca:	4649      	mov	r1, r9
 8004acc:	414b      	adcs	r3, r1
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004adc:	4659      	mov	r1, fp
 8004ade:	00cb      	lsls	r3, r1, #3
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae6:	4651      	mov	r1, sl
 8004ae8:	00ca      	lsls	r2, r1, #3
 8004aea:	4610      	mov	r0, r2
 8004aec:	4619      	mov	r1, r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	4642      	mov	r2, r8
 8004af2:	189b      	adds	r3, r3, r2
 8004af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004af6:	464b      	mov	r3, r9
 8004af8:	460a      	mov	r2, r1
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b18:	4649      	mov	r1, r9
 8004b1a:	008b      	lsls	r3, r1, #2
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b22:	4641      	mov	r1, r8
 8004b24:	008a      	lsls	r2, r1, #2
 8004b26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b2a:	f7fc f87d 	bl	8000c28 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <UART_SetConfig+0x4e4>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	@ 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	3332      	adds	r3, #50	@ 0x32
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <UART_SetConfig+0x4e4>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 020f 	and.w	r2, r3, #15
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4422      	add	r2, r4
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b68:	51eb851f 	.word	0x51eb851f

08004b6c <sulp>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4604      	mov	r4, r0
 8004b70:	460d      	mov	r5, r1
 8004b72:	ec45 4b10 	vmov	d0, r4, r5
 8004b76:	4616      	mov	r6, r2
 8004b78:	f002 f85c 	bl	8006c34 <__ulp>
 8004b7c:	ec51 0b10 	vmov	r0, r1, d0
 8004b80:	b17e      	cbz	r6, 8004ba2 <sulp+0x36>
 8004b82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004b86:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dd09      	ble.n	8004ba2 <sulp+0x36>
 8004b8e:	051b      	lsls	r3, r3, #20
 8004b90:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004b94:	2400      	movs	r4, #0
 8004b96:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f7fb fd23 	bl	80005e8 <__aeabi_dmul>
 8004ba2:	ec41 0b10 	vmov	d0, r0, r1
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}

08004ba8 <_strtod_l>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	b09f      	sub	sp, #124	@ 0x7c
 8004bae:	460c      	mov	r4, r1
 8004bb0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	921a      	str	r2, [sp, #104]	@ 0x68
 8004bb6:	9005      	str	r0, [sp, #20]
 8004bb8:	f04f 0a00 	mov.w	sl, #0
 8004bbc:	f04f 0b00 	mov.w	fp, #0
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004bc4:	7811      	ldrb	r1, [r2, #0]
 8004bc6:	292b      	cmp	r1, #43	@ 0x2b
 8004bc8:	d04a      	beq.n	8004c60 <_strtod_l+0xb8>
 8004bca:	d838      	bhi.n	8004c3e <_strtod_l+0x96>
 8004bcc:	290d      	cmp	r1, #13
 8004bce:	d832      	bhi.n	8004c36 <_strtod_l+0x8e>
 8004bd0:	2908      	cmp	r1, #8
 8004bd2:	d832      	bhi.n	8004c3a <_strtod_l+0x92>
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d03b      	beq.n	8004c50 <_strtod_l+0xa8>
 8004bd8:	2200      	movs	r2, #0
 8004bda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004bdc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004bde:	782a      	ldrb	r2, [r5, #0]
 8004be0:	2a30      	cmp	r2, #48	@ 0x30
 8004be2:	f040 80b3 	bne.w	8004d4c <_strtod_l+0x1a4>
 8004be6:	786a      	ldrb	r2, [r5, #1]
 8004be8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004bec:	2a58      	cmp	r2, #88	@ 0x58
 8004bee:	d16e      	bne.n	8004cce <_strtod_l+0x126>
 8004bf0:	9302      	str	r3, [sp, #8]
 8004bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	ab1a      	add	r3, sp, #104	@ 0x68
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	4a8e      	ldr	r2, [pc, #568]	@ (8004e34 <_strtod_l+0x28c>)
 8004bfc:	9805      	ldr	r0, [sp, #20]
 8004bfe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004c00:	a919      	add	r1, sp, #100	@ 0x64
 8004c02:	f001 f911 	bl	8005e28 <__gethex>
 8004c06:	f010 060f 	ands.w	r6, r0, #15
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	d005      	beq.n	8004c1a <_strtod_l+0x72>
 8004c0e:	2e06      	cmp	r6, #6
 8004c10:	d128      	bne.n	8004c64 <_strtod_l+0xbc>
 8004c12:	3501      	adds	r5, #1
 8004c14:	2300      	movs	r3, #0
 8004c16:	9519      	str	r5, [sp, #100]	@ 0x64
 8004c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 858e 	bne.w	800573e <_strtod_l+0xb96>
 8004c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c24:	b1cb      	cbz	r3, 8004c5a <_strtod_l+0xb2>
 8004c26:	4652      	mov	r2, sl
 8004c28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004c2c:	ec43 2b10 	vmov	d0, r2, r3
 8004c30:	b01f      	add	sp, #124	@ 0x7c
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	2920      	cmp	r1, #32
 8004c38:	d1ce      	bne.n	8004bd8 <_strtod_l+0x30>
 8004c3a:	3201      	adds	r2, #1
 8004c3c:	e7c1      	b.n	8004bc2 <_strtod_l+0x1a>
 8004c3e:	292d      	cmp	r1, #45	@ 0x2d
 8004c40:	d1ca      	bne.n	8004bd8 <_strtod_l+0x30>
 8004c42:	2101      	movs	r1, #1
 8004c44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004c46:	1c51      	adds	r1, r2, #1
 8004c48:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c4a:	7852      	ldrb	r2, [r2, #1]
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	d1c5      	bne.n	8004bdc <_strtod_l+0x34>
 8004c50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c52:	9419      	str	r4, [sp, #100]	@ 0x64
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 8570 	bne.w	800573a <_strtod_l+0xb92>
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	465b      	mov	r3, fp
 8004c5e:	e7e5      	b.n	8004c2c <_strtod_l+0x84>
 8004c60:	2100      	movs	r1, #0
 8004c62:	e7ef      	b.n	8004c44 <_strtod_l+0x9c>
 8004c64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004c66:	b13a      	cbz	r2, 8004c78 <_strtod_l+0xd0>
 8004c68:	2135      	movs	r1, #53	@ 0x35
 8004c6a:	a81c      	add	r0, sp, #112	@ 0x70
 8004c6c:	f002 f8dc 	bl	8006e28 <__copybits>
 8004c70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004c72:	9805      	ldr	r0, [sp, #20]
 8004c74:	f001 fcaa 	bl	80065cc <_Bfree>
 8004c78:	3e01      	subs	r6, #1
 8004c7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004c7c:	2e04      	cmp	r6, #4
 8004c7e:	d806      	bhi.n	8004c8e <_strtod_l+0xe6>
 8004c80:	e8df f006 	tbb	[pc, r6]
 8004c84:	201d0314 	.word	0x201d0314
 8004c88:	14          	.byte	0x14
 8004c89:	00          	.byte	0x00
 8004c8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004c8e:	05e1      	lsls	r1, r4, #23
 8004c90:	bf48      	it	mi
 8004c92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004c96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004c9a:	0d1b      	lsrs	r3, r3, #20
 8004c9c:	051b      	lsls	r3, r3, #20
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1bb      	bne.n	8004c1a <_strtod_l+0x72>
 8004ca2:	f000 ffc5 	bl	8005c30 <__errno>
 8004ca6:	2322      	movs	r3, #34	@ 0x22
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	e7b6      	b.n	8004c1a <_strtod_l+0x72>
 8004cac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004cb0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004cb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cb8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004cbc:	e7e7      	b.n	8004c8e <_strtod_l+0xe6>
 8004cbe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004e3c <_strtod_l+0x294>
 8004cc2:	e7e4      	b.n	8004c8e <_strtod_l+0xe6>
 8004cc4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004cc8:	f04f 3aff 	mov.w	sl, #4294967295
 8004ccc:	e7df      	b.n	8004c8e <_strtod_l+0xe6>
 8004cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b30      	cmp	r3, #48	@ 0x30
 8004cd8:	d0f9      	beq.n	8004cce <_strtod_l+0x126>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d09d      	beq.n	8004c1a <_strtod_l+0x72>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9308      	str	r3, [sp, #32]
 8004cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cec:	461f      	mov	r7, r3
 8004cee:	220a      	movs	r2, #10
 8004cf0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004cf2:	7805      	ldrb	r5, [r0, #0]
 8004cf4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004cf8:	b2d9      	uxtb	r1, r3
 8004cfa:	2909      	cmp	r1, #9
 8004cfc:	d928      	bls.n	8004d50 <_strtod_l+0x1a8>
 8004cfe:	494e      	ldr	r1, [pc, #312]	@ (8004e38 <_strtod_l+0x290>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	f000 ff3c 	bl	8005b7e <strncmp>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d032      	beq.n	8004d70 <_strtod_l+0x1c8>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4681      	mov	r9, r0
 8004d10:	463d      	mov	r5, r7
 8004d12:	4603      	mov	r3, r0
 8004d14:	2a65      	cmp	r2, #101	@ 0x65
 8004d16:	d001      	beq.n	8004d1c <_strtod_l+0x174>
 8004d18:	2a45      	cmp	r2, #69	@ 0x45
 8004d1a:	d114      	bne.n	8004d46 <_strtod_l+0x19e>
 8004d1c:	b91d      	cbnz	r5, 8004d26 <_strtod_l+0x17e>
 8004d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d20:	4302      	orrs	r2, r0
 8004d22:	d095      	beq.n	8004c50 <_strtod_l+0xa8>
 8004d24:	2500      	movs	r5, #0
 8004d26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004d28:	1c62      	adds	r2, r4, #1
 8004d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d2c:	7862      	ldrb	r2, [r4, #1]
 8004d2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8004d30:	d077      	beq.n	8004e22 <_strtod_l+0x27a>
 8004d32:	2a2d      	cmp	r2, #45	@ 0x2d
 8004d34:	d07b      	beq.n	8004e2e <_strtod_l+0x286>
 8004d36:	f04f 0c00 	mov.w	ip, #0
 8004d3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004d3e:	2909      	cmp	r1, #9
 8004d40:	f240 8082 	bls.w	8004e48 <_strtod_l+0x2a0>
 8004d44:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d46:	f04f 0800 	mov.w	r8, #0
 8004d4a:	e0a2      	b.n	8004e92 <_strtod_l+0x2ea>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e7c7      	b.n	8004ce0 <_strtod_l+0x138>
 8004d50:	2f08      	cmp	r7, #8
 8004d52:	bfd5      	itete	le
 8004d54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004d56:	9908      	ldrgt	r1, [sp, #32]
 8004d58:	fb02 3301 	mlale	r3, r2, r1, r3
 8004d5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004d60:	f100 0001 	add.w	r0, r0, #1
 8004d64:	bfd4      	ite	le
 8004d66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004d68:	9308      	strgt	r3, [sp, #32]
 8004d6a:	3701      	adds	r7, #1
 8004d6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8004d6e:	e7bf      	b.n	8004cf0 <_strtod_l+0x148>
 8004d70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d76:	785a      	ldrb	r2, [r3, #1]
 8004d78:	b37f      	cbz	r7, 8004dda <_strtod_l+0x232>
 8004d7a:	4681      	mov	r9, r0
 8004d7c:	463d      	mov	r5, r7
 8004d7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d912      	bls.n	8004dac <_strtod_l+0x204>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e7c4      	b.n	8004d14 <_strtod_l+0x16c>
 8004d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d90:	785a      	ldrb	r2, [r3, #1]
 8004d92:	3001      	adds	r0, #1
 8004d94:	2a30      	cmp	r2, #48	@ 0x30
 8004d96:	d0f8      	beq.n	8004d8a <_strtod_l+0x1e2>
 8004d98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	f200 84d3 	bhi.w	8005748 <_strtod_l+0xba0>
 8004da2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004da4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004da6:	4681      	mov	r9, r0
 8004da8:	2000      	movs	r0, #0
 8004daa:	4605      	mov	r5, r0
 8004dac:	3a30      	subs	r2, #48	@ 0x30
 8004dae:	f100 0301 	add.w	r3, r0, #1
 8004db2:	d02a      	beq.n	8004e0a <_strtod_l+0x262>
 8004db4:	4499      	add	r9, r3
 8004db6:	eb00 0c05 	add.w	ip, r0, r5
 8004dba:	462b      	mov	r3, r5
 8004dbc:	210a      	movs	r1, #10
 8004dbe:	4563      	cmp	r3, ip
 8004dc0:	d10d      	bne.n	8004dde <_strtod_l+0x236>
 8004dc2:	1c69      	adds	r1, r5, #1
 8004dc4:	4401      	add	r1, r0
 8004dc6:	4428      	add	r0, r5
 8004dc8:	2808      	cmp	r0, #8
 8004dca:	dc16      	bgt.n	8004dfa <_strtod_l+0x252>
 8004dcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dce:	230a      	movs	r3, #10
 8004dd0:	fb03 2300 	mla	r3, r3, r0, r2
 8004dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e018      	b.n	8004e0c <_strtod_l+0x264>
 8004dda:	4638      	mov	r0, r7
 8004ddc:	e7da      	b.n	8004d94 <_strtod_l+0x1ec>
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	f103 0301 	add.w	r3, r3, #1
 8004de4:	dc03      	bgt.n	8004dee <_strtod_l+0x246>
 8004de6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004de8:	434e      	muls	r6, r1
 8004dea:	960a      	str	r6, [sp, #40]	@ 0x28
 8004dec:	e7e7      	b.n	8004dbe <_strtod_l+0x216>
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	bfde      	ittt	le
 8004df2:	9e08      	ldrle	r6, [sp, #32]
 8004df4:	434e      	mulle	r6, r1
 8004df6:	9608      	strle	r6, [sp, #32]
 8004df8:	e7e1      	b.n	8004dbe <_strtod_l+0x216>
 8004dfa:	280f      	cmp	r0, #15
 8004dfc:	dceb      	bgt.n	8004dd6 <_strtod_l+0x22e>
 8004dfe:	9808      	ldr	r0, [sp, #32]
 8004e00:	230a      	movs	r3, #10
 8004e02:	fb03 2300 	mla	r3, r3, r0, r2
 8004e06:	9308      	str	r3, [sp, #32]
 8004e08:	e7e5      	b.n	8004dd6 <_strtod_l+0x22e>
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e0e:	1c50      	adds	r0, r2, #1
 8004e10:	9019      	str	r0, [sp, #100]	@ 0x64
 8004e12:	7852      	ldrb	r2, [r2, #1]
 8004e14:	4618      	mov	r0, r3
 8004e16:	460d      	mov	r5, r1
 8004e18:	e7b1      	b.n	8004d7e <_strtod_l+0x1d6>
 8004e1a:	f04f 0900 	mov.w	r9, #0
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e77d      	b.n	8004d1e <_strtod_l+0x176>
 8004e22:	f04f 0c00 	mov.w	ip, #0
 8004e26:	1ca2      	adds	r2, r4, #2
 8004e28:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e2a:	78a2      	ldrb	r2, [r4, #2]
 8004e2c:	e785      	b.n	8004d3a <_strtod_l+0x192>
 8004e2e:	f04f 0c01 	mov.w	ip, #1
 8004e32:	e7f8      	b.n	8004e26 <_strtod_l+0x27e>
 8004e34:	080079d4 	.word	0x080079d4
 8004e38:	080079b0 	.word	0x080079b0
 8004e3c:	7ff00000 	.word	0x7ff00000
 8004e40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e42:	1c51      	adds	r1, r2, #1
 8004e44:	9119      	str	r1, [sp, #100]	@ 0x64
 8004e46:	7852      	ldrb	r2, [r2, #1]
 8004e48:	2a30      	cmp	r2, #48	@ 0x30
 8004e4a:	d0f9      	beq.n	8004e40 <_strtod_l+0x298>
 8004e4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004e50:	2908      	cmp	r1, #8
 8004e52:	f63f af78 	bhi.w	8004d46 <_strtod_l+0x19e>
 8004e56:	3a30      	subs	r2, #48	@ 0x30
 8004e58:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004e5e:	f04f 080a 	mov.w	r8, #10
 8004e62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e64:	1c56      	adds	r6, r2, #1
 8004e66:	9619      	str	r6, [sp, #100]	@ 0x64
 8004e68:	7852      	ldrb	r2, [r2, #1]
 8004e6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004e6e:	f1be 0f09 	cmp.w	lr, #9
 8004e72:	d939      	bls.n	8004ee8 <_strtod_l+0x340>
 8004e74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e76:	1a76      	subs	r6, r6, r1
 8004e78:	2e08      	cmp	r6, #8
 8004e7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004e7e:	dc03      	bgt.n	8004e88 <_strtod_l+0x2e0>
 8004e80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004e82:	4588      	cmp	r8, r1
 8004e84:	bfa8      	it	ge
 8004e86:	4688      	movge	r8, r1
 8004e88:	f1bc 0f00 	cmp.w	ip, #0
 8004e8c:	d001      	beq.n	8004e92 <_strtod_l+0x2ea>
 8004e8e:	f1c8 0800 	rsb	r8, r8, #0
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	d14e      	bne.n	8004f34 <_strtod_l+0x38c>
 8004e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e98:	4308      	orrs	r0, r1
 8004e9a:	f47f aebe 	bne.w	8004c1a <_strtod_l+0x72>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f47f aed6 	bne.w	8004c50 <_strtod_l+0xa8>
 8004ea4:	2a69      	cmp	r2, #105	@ 0x69
 8004ea6:	d028      	beq.n	8004efa <_strtod_l+0x352>
 8004ea8:	dc25      	bgt.n	8004ef6 <_strtod_l+0x34e>
 8004eaa:	2a49      	cmp	r2, #73	@ 0x49
 8004eac:	d025      	beq.n	8004efa <_strtod_l+0x352>
 8004eae:	2a4e      	cmp	r2, #78	@ 0x4e
 8004eb0:	f47f aece 	bne.w	8004c50 <_strtod_l+0xa8>
 8004eb4:	499b      	ldr	r1, [pc, #620]	@ (8005124 <_strtod_l+0x57c>)
 8004eb6:	a819      	add	r0, sp, #100	@ 0x64
 8004eb8:	f001 f9d8 	bl	800626c <__match>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f43f aec7 	beq.w	8004c50 <_strtod_l+0xa8>
 8004ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b28      	cmp	r3, #40	@ 0x28
 8004ec8:	d12e      	bne.n	8004f28 <_strtod_l+0x380>
 8004eca:	4997      	ldr	r1, [pc, #604]	@ (8005128 <_strtod_l+0x580>)
 8004ecc:	aa1c      	add	r2, sp, #112	@ 0x70
 8004ece:	a819      	add	r0, sp, #100	@ 0x64
 8004ed0:	f001 f9e0 	bl	8006294 <__hexnan>
 8004ed4:	2805      	cmp	r0, #5
 8004ed6:	d127      	bne.n	8004f28 <_strtod_l+0x380>
 8004ed8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004eda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004ede:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004ee2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004ee6:	e698      	b.n	8004c1a <_strtod_l+0x72>
 8004ee8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004eea:	fb08 2101 	mla	r1, r8, r1, r2
 8004eee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004ef2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ef4:	e7b5      	b.n	8004e62 <_strtod_l+0x2ba>
 8004ef6:	2a6e      	cmp	r2, #110	@ 0x6e
 8004ef8:	e7da      	b.n	8004eb0 <_strtod_l+0x308>
 8004efa:	498c      	ldr	r1, [pc, #560]	@ (800512c <_strtod_l+0x584>)
 8004efc:	a819      	add	r0, sp, #100	@ 0x64
 8004efe:	f001 f9b5 	bl	800626c <__match>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f43f aea4 	beq.w	8004c50 <_strtod_l+0xa8>
 8004f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f0a:	4989      	ldr	r1, [pc, #548]	@ (8005130 <_strtod_l+0x588>)
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	a819      	add	r0, sp, #100	@ 0x64
 8004f10:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f12:	f001 f9ab 	bl	800626c <__match>
 8004f16:	b910      	cbnz	r0, 8004f1e <_strtod_l+0x376>
 8004f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005140 <_strtod_l+0x598>
 8004f22:	f04f 0a00 	mov.w	sl, #0
 8004f26:	e678      	b.n	8004c1a <_strtod_l+0x72>
 8004f28:	4882      	ldr	r0, [pc, #520]	@ (8005134 <_strtod_l+0x58c>)
 8004f2a:	f000 febd 	bl	8005ca8 <nan>
 8004f2e:	ec5b ab10 	vmov	sl, fp, d0
 8004f32:	e672      	b.n	8004c1a <_strtod_l+0x72>
 8004f34:	eba8 0309 	sub.w	r3, r8, r9
 8004f38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	bf08      	it	eq
 8004f40:	462f      	moveq	r7, r5
 8004f42:	2d10      	cmp	r5, #16
 8004f44:	462c      	mov	r4, r5
 8004f46:	bfa8      	it	ge
 8004f48:	2410      	movge	r4, #16
 8004f4a:	f7fb fad3 	bl	80004f4 <__aeabi_ui2d>
 8004f4e:	2d09      	cmp	r5, #9
 8004f50:	4682      	mov	sl, r0
 8004f52:	468b      	mov	fp, r1
 8004f54:	dc13      	bgt.n	8004f7e <_strtod_l+0x3d6>
 8004f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f43f ae5e 	beq.w	8004c1a <_strtod_l+0x72>
 8004f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f60:	dd78      	ble.n	8005054 <_strtod_l+0x4ac>
 8004f62:	2b16      	cmp	r3, #22
 8004f64:	dc5f      	bgt.n	8005026 <_strtod_l+0x47e>
 8004f66:	4974      	ldr	r1, [pc, #464]	@ (8005138 <_strtod_l+0x590>)
 8004f68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f70:	4652      	mov	r2, sl
 8004f72:	465b      	mov	r3, fp
 8004f74:	f7fb fb38 	bl	80005e8 <__aeabi_dmul>
 8004f78:	4682      	mov	sl, r0
 8004f7a:	468b      	mov	fp, r1
 8004f7c:	e64d      	b.n	8004c1a <_strtod_l+0x72>
 8004f7e:	4b6e      	ldr	r3, [pc, #440]	@ (8005138 <_strtod_l+0x590>)
 8004f80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004f88:	f7fb fb2e 	bl	80005e8 <__aeabi_dmul>
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	9808      	ldr	r0, [sp, #32]
 8004f90:	468b      	mov	fp, r1
 8004f92:	f7fb faaf 	bl	80004f4 <__aeabi_ui2d>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	f7fb f96d 	bl	800027c <__adddf3>
 8004fa2:	2d0f      	cmp	r5, #15
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	468b      	mov	fp, r1
 8004fa8:	ddd5      	ble.n	8004f56 <_strtod_l+0x3ae>
 8004faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fac:	1b2c      	subs	r4, r5, r4
 8004fae:	441c      	add	r4, r3
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	f340 8096 	ble.w	80050e2 <_strtod_l+0x53a>
 8004fb6:	f014 030f 	ands.w	r3, r4, #15
 8004fba:	d00a      	beq.n	8004fd2 <_strtod_l+0x42a>
 8004fbc:	495e      	ldr	r1, [pc, #376]	@ (8005138 <_strtod_l+0x590>)
 8004fbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fc2:	4652      	mov	r2, sl
 8004fc4:	465b      	mov	r3, fp
 8004fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fca:	f7fb fb0d 	bl	80005e8 <__aeabi_dmul>
 8004fce:	4682      	mov	sl, r0
 8004fd0:	468b      	mov	fp, r1
 8004fd2:	f034 040f 	bics.w	r4, r4, #15
 8004fd6:	d073      	beq.n	80050c0 <_strtod_l+0x518>
 8004fd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004fdc:	dd48      	ble.n	8005070 <_strtod_l+0x4c8>
 8004fde:	2400      	movs	r4, #0
 8004fe0:	46a0      	mov	r8, r4
 8004fe2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004fe4:	46a1      	mov	r9, r4
 8004fe6:	9a05      	ldr	r2, [sp, #20]
 8004fe8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005140 <_strtod_l+0x598>
 8004fec:	2322      	movs	r3, #34	@ 0x22
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	f04f 0a00 	mov.w	sl, #0
 8004ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f43f ae0f 	beq.w	8004c1a <_strtod_l+0x72>
 8004ffc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ffe:	9805      	ldr	r0, [sp, #20]
 8005000:	f001 fae4 	bl	80065cc <_Bfree>
 8005004:	9805      	ldr	r0, [sp, #20]
 8005006:	4649      	mov	r1, r9
 8005008:	f001 fae0 	bl	80065cc <_Bfree>
 800500c:	9805      	ldr	r0, [sp, #20]
 800500e:	4641      	mov	r1, r8
 8005010:	f001 fadc 	bl	80065cc <_Bfree>
 8005014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005016:	9805      	ldr	r0, [sp, #20]
 8005018:	f001 fad8 	bl	80065cc <_Bfree>
 800501c:	9805      	ldr	r0, [sp, #20]
 800501e:	4621      	mov	r1, r4
 8005020:	f001 fad4 	bl	80065cc <_Bfree>
 8005024:	e5f9      	b.n	8004c1a <_strtod_l+0x72>
 8005026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005028:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800502c:	4293      	cmp	r3, r2
 800502e:	dbbc      	blt.n	8004faa <_strtod_l+0x402>
 8005030:	4c41      	ldr	r4, [pc, #260]	@ (8005138 <_strtod_l+0x590>)
 8005032:	f1c5 050f 	rsb	r5, r5, #15
 8005036:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800503a:	4652      	mov	r2, sl
 800503c:	465b      	mov	r3, fp
 800503e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005042:	f7fb fad1 	bl	80005e8 <__aeabi_dmul>
 8005046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005048:	1b5d      	subs	r5, r3, r5
 800504a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800504e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005052:	e78f      	b.n	8004f74 <_strtod_l+0x3cc>
 8005054:	3316      	adds	r3, #22
 8005056:	dba8      	blt.n	8004faa <_strtod_l+0x402>
 8005058:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <_strtod_l+0x590>)
 800505a:	eba9 0808 	sub.w	r8, r9, r8
 800505e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005062:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005066:	4650      	mov	r0, sl
 8005068:	4659      	mov	r1, fp
 800506a:	f7fb fbe7 	bl	800083c <__aeabi_ddiv>
 800506e:	e783      	b.n	8004f78 <_strtod_l+0x3d0>
 8005070:	4b32      	ldr	r3, [pc, #200]	@ (800513c <_strtod_l+0x594>)
 8005072:	9308      	str	r3, [sp, #32]
 8005074:	2300      	movs	r3, #0
 8005076:	1124      	asrs	r4, r4, #4
 8005078:	4650      	mov	r0, sl
 800507a:	4659      	mov	r1, fp
 800507c:	461e      	mov	r6, r3
 800507e:	2c01      	cmp	r4, #1
 8005080:	dc21      	bgt.n	80050c6 <_strtod_l+0x51e>
 8005082:	b10b      	cbz	r3, 8005088 <_strtod_l+0x4e0>
 8005084:	4682      	mov	sl, r0
 8005086:	468b      	mov	fp, r1
 8005088:	492c      	ldr	r1, [pc, #176]	@ (800513c <_strtod_l+0x594>)
 800508a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800508e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509a:	f7fb faa5 	bl	80005e8 <__aeabi_dmul>
 800509e:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <_strtod_l+0x598>)
 80050a0:	460a      	mov	r2, r1
 80050a2:	400b      	ands	r3, r1
 80050a4:	4927      	ldr	r1, [pc, #156]	@ (8005144 <_strtod_l+0x59c>)
 80050a6:	428b      	cmp	r3, r1
 80050a8:	4682      	mov	sl, r0
 80050aa:	d898      	bhi.n	8004fde <_strtod_l+0x436>
 80050ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80050b0:	428b      	cmp	r3, r1
 80050b2:	bf86      	itte	hi
 80050b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005148 <_strtod_l+0x5a0>
 80050b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80050bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80050c0:	2300      	movs	r3, #0
 80050c2:	9308      	str	r3, [sp, #32]
 80050c4:	e07a      	b.n	80051bc <_strtod_l+0x614>
 80050c6:	07e2      	lsls	r2, r4, #31
 80050c8:	d505      	bpl.n	80050d6 <_strtod_l+0x52e>
 80050ca:	9b08      	ldr	r3, [sp, #32]
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f7fb fa8a 	bl	80005e8 <__aeabi_dmul>
 80050d4:	2301      	movs	r3, #1
 80050d6:	9a08      	ldr	r2, [sp, #32]
 80050d8:	3208      	adds	r2, #8
 80050da:	3601      	adds	r6, #1
 80050dc:	1064      	asrs	r4, r4, #1
 80050de:	9208      	str	r2, [sp, #32]
 80050e0:	e7cd      	b.n	800507e <_strtod_l+0x4d6>
 80050e2:	d0ed      	beq.n	80050c0 <_strtod_l+0x518>
 80050e4:	4264      	negs	r4, r4
 80050e6:	f014 020f 	ands.w	r2, r4, #15
 80050ea:	d00a      	beq.n	8005102 <_strtod_l+0x55a>
 80050ec:	4b12      	ldr	r3, [pc, #72]	@ (8005138 <_strtod_l+0x590>)
 80050ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050f2:	4650      	mov	r0, sl
 80050f4:	4659      	mov	r1, fp
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f7fb fb9f 	bl	800083c <__aeabi_ddiv>
 80050fe:	4682      	mov	sl, r0
 8005100:	468b      	mov	fp, r1
 8005102:	1124      	asrs	r4, r4, #4
 8005104:	d0dc      	beq.n	80050c0 <_strtod_l+0x518>
 8005106:	2c1f      	cmp	r4, #31
 8005108:	dd20      	ble.n	800514c <_strtod_l+0x5a4>
 800510a:	2400      	movs	r4, #0
 800510c:	46a0      	mov	r8, r4
 800510e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005110:	46a1      	mov	r9, r4
 8005112:	9a05      	ldr	r2, [sp, #20]
 8005114:	2322      	movs	r3, #34	@ 0x22
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	f04f 0b00 	mov.w	fp, #0
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e768      	b.n	8004ff4 <_strtod_l+0x44c>
 8005122:	bf00      	nop
 8005124:	080079bb 	.word	0x080079bb
 8005128:	080079c0 	.word	0x080079c0
 800512c:	080079b2 	.word	0x080079b2
 8005130:	080079b5 	.word	0x080079b5
 8005134:	08007d66 	.word	0x08007d66
 8005138:	08007c30 	.word	0x08007c30
 800513c:	08007c08 	.word	0x08007c08
 8005140:	7ff00000 	.word	0x7ff00000
 8005144:	7ca00000 	.word	0x7ca00000
 8005148:	7fefffff 	.word	0x7fefffff
 800514c:	f014 0310 	ands.w	r3, r4, #16
 8005150:	bf18      	it	ne
 8005152:	236a      	movne	r3, #106	@ 0x6a
 8005154:	4ea9      	ldr	r6, [pc, #676]	@ (80053fc <_strtod_l+0x854>)
 8005156:	9308      	str	r3, [sp, #32]
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	2300      	movs	r3, #0
 800515e:	07e2      	lsls	r2, r4, #31
 8005160:	d504      	bpl.n	800516c <_strtod_l+0x5c4>
 8005162:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005166:	f7fb fa3f 	bl	80005e8 <__aeabi_dmul>
 800516a:	2301      	movs	r3, #1
 800516c:	1064      	asrs	r4, r4, #1
 800516e:	f106 0608 	add.w	r6, r6, #8
 8005172:	d1f4      	bne.n	800515e <_strtod_l+0x5b6>
 8005174:	b10b      	cbz	r3, 800517a <_strtod_l+0x5d2>
 8005176:	4682      	mov	sl, r0
 8005178:	468b      	mov	fp, r1
 800517a:	9b08      	ldr	r3, [sp, #32]
 800517c:	b1b3      	cbz	r3, 80051ac <_strtod_l+0x604>
 800517e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005182:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005186:	2b00      	cmp	r3, #0
 8005188:	4659      	mov	r1, fp
 800518a:	dd0f      	ble.n	80051ac <_strtod_l+0x604>
 800518c:	2b1f      	cmp	r3, #31
 800518e:	dd55      	ble.n	800523c <_strtod_l+0x694>
 8005190:	2b34      	cmp	r3, #52	@ 0x34
 8005192:	bfde      	ittt	le
 8005194:	f04f 33ff 	movle.w	r3, #4294967295
 8005198:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800519c:	4093      	lslle	r3, r2
 800519e:	f04f 0a00 	mov.w	sl, #0
 80051a2:	bfcc      	ite	gt
 80051a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80051a8:	ea03 0b01 	andle.w	fp, r3, r1
 80051ac:	2200      	movs	r2, #0
 80051ae:	2300      	movs	r3, #0
 80051b0:	4650      	mov	r0, sl
 80051b2:	4659      	mov	r1, fp
 80051b4:	f7fb fc80 	bl	8000ab8 <__aeabi_dcmpeq>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1a6      	bne.n	800510a <_strtod_l+0x562>
 80051bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80051c2:	9805      	ldr	r0, [sp, #20]
 80051c4:	462b      	mov	r3, r5
 80051c6:	463a      	mov	r2, r7
 80051c8:	f001 fa68 	bl	800669c <__s2b>
 80051cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f43f af05 	beq.w	8004fde <_strtod_l+0x436>
 80051d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	eba9 0308 	sub.w	r3, r9, r8
 80051dc:	bfa8      	it	ge
 80051de:	2300      	movge	r3, #0
 80051e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80051e2:	2400      	movs	r4, #0
 80051e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80051e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80051ea:	46a0      	mov	r8, r4
 80051ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ee:	9805      	ldr	r0, [sp, #20]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	f001 f9ab 	bl	800654c <_Balloc>
 80051f6:	4681      	mov	r9, r0
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f43f aef4 	beq.w	8004fe6 <_strtod_l+0x43e>
 80051fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	3202      	adds	r2, #2
 8005204:	f103 010c 	add.w	r1, r3, #12
 8005208:	0092      	lsls	r2, r2, #2
 800520a:	300c      	adds	r0, #12
 800520c:	f000 fd3d 	bl	8005c8a <memcpy>
 8005210:	ec4b ab10 	vmov	d0, sl, fp
 8005214:	9805      	ldr	r0, [sp, #20]
 8005216:	aa1c      	add	r2, sp, #112	@ 0x70
 8005218:	a91b      	add	r1, sp, #108	@ 0x6c
 800521a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800521e:	f001 fd79 	bl	8006d14 <__d2b>
 8005222:	901a      	str	r0, [sp, #104]	@ 0x68
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f aede 	beq.w	8004fe6 <_strtod_l+0x43e>
 800522a:	9805      	ldr	r0, [sp, #20]
 800522c:	2101      	movs	r1, #1
 800522e:	f001 facb 	bl	80067c8 <__i2b>
 8005232:	4680      	mov	r8, r0
 8005234:	b948      	cbnz	r0, 800524a <_strtod_l+0x6a2>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	e6d4      	b.n	8004fe6 <_strtod_l+0x43e>
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	ea03 0a0a 	and.w	sl, r3, sl
 8005248:	e7b0      	b.n	80051ac <_strtod_l+0x604>
 800524a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800524c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800524e:	2d00      	cmp	r5, #0
 8005250:	bfab      	itete	ge
 8005252:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005254:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005256:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005258:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800525a:	bfac      	ite	ge
 800525c:	18ef      	addge	r7, r5, r3
 800525e:	1b5e      	sublt	r6, r3, r5
 8005260:	9b08      	ldr	r3, [sp, #32]
 8005262:	1aed      	subs	r5, r5, r3
 8005264:	4415      	add	r5, r2
 8005266:	4b66      	ldr	r3, [pc, #408]	@ (8005400 <_strtod_l+0x858>)
 8005268:	3d01      	subs	r5, #1
 800526a:	429d      	cmp	r5, r3
 800526c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005270:	da50      	bge.n	8005314 <_strtod_l+0x76c>
 8005272:	1b5b      	subs	r3, r3, r5
 8005274:	2b1f      	cmp	r3, #31
 8005276:	eba2 0203 	sub.w	r2, r2, r3
 800527a:	f04f 0101 	mov.w	r1, #1
 800527e:	dc3d      	bgt.n	80052fc <_strtod_l+0x754>
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005286:	2300      	movs	r3, #0
 8005288:	9310      	str	r3, [sp, #64]	@ 0x40
 800528a:	18bd      	adds	r5, r7, r2
 800528c:	9b08      	ldr	r3, [sp, #32]
 800528e:	42af      	cmp	r7, r5
 8005290:	4416      	add	r6, r2
 8005292:	441e      	add	r6, r3
 8005294:	463b      	mov	r3, r7
 8005296:	bfa8      	it	ge
 8005298:	462b      	movge	r3, r5
 800529a:	42b3      	cmp	r3, r6
 800529c:	bfa8      	it	ge
 800529e:	4633      	movge	r3, r6
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bfc2      	ittt	gt
 80052a4:	1aed      	subgt	r5, r5, r3
 80052a6:	1af6      	subgt	r6, r6, r3
 80052a8:	1aff      	subgt	r7, r7, r3
 80052aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dd16      	ble.n	80052de <_strtod_l+0x736>
 80052b0:	4641      	mov	r1, r8
 80052b2:	9805      	ldr	r0, [sp, #20]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f001 fb47 	bl	8006948 <__pow5mult>
 80052ba:	4680      	mov	r8, r0
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0ba      	beq.n	8005236 <_strtod_l+0x68e>
 80052c0:	4601      	mov	r1, r0
 80052c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80052c4:	9805      	ldr	r0, [sp, #20]
 80052c6:	f001 fa95 	bl	80067f4 <__multiply>
 80052ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f43f ae8a 	beq.w	8004fe6 <_strtod_l+0x43e>
 80052d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052d4:	9805      	ldr	r0, [sp, #20]
 80052d6:	f001 f979 	bl	80065cc <_Bfree>
 80052da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80052de:	2d00      	cmp	r5, #0
 80052e0:	dc1d      	bgt.n	800531e <_strtod_l+0x776>
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dd23      	ble.n	8005330 <_strtod_l+0x788>
 80052e8:	4649      	mov	r1, r9
 80052ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80052ec:	9805      	ldr	r0, [sp, #20]
 80052ee:	f001 fb2b 	bl	8006948 <__pow5mult>
 80052f2:	4681      	mov	r9, r0
 80052f4:	b9e0      	cbnz	r0, 8005330 <_strtod_l+0x788>
 80052f6:	f04f 0900 	mov.w	r9, #0
 80052fa:	e674      	b.n	8004fe6 <_strtod_l+0x43e>
 80052fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005300:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005304:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005308:	35e2      	adds	r5, #226	@ 0xe2
 800530a:	fa01 f305 	lsl.w	r3, r1, r5
 800530e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005310:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005312:	e7ba      	b.n	800528a <_strtod_l+0x6e2>
 8005314:	2300      	movs	r3, #0
 8005316:	9310      	str	r3, [sp, #64]	@ 0x40
 8005318:	2301      	movs	r3, #1
 800531a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800531c:	e7b5      	b.n	800528a <_strtod_l+0x6e2>
 800531e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005320:	9805      	ldr	r0, [sp, #20]
 8005322:	462a      	mov	r2, r5
 8005324:	f001 fb6a 	bl	80069fc <__lshift>
 8005328:	901a      	str	r0, [sp, #104]	@ 0x68
 800532a:	2800      	cmp	r0, #0
 800532c:	d1d9      	bne.n	80052e2 <_strtod_l+0x73a>
 800532e:	e65a      	b.n	8004fe6 <_strtod_l+0x43e>
 8005330:	2e00      	cmp	r6, #0
 8005332:	dd07      	ble.n	8005344 <_strtod_l+0x79c>
 8005334:	4649      	mov	r1, r9
 8005336:	9805      	ldr	r0, [sp, #20]
 8005338:	4632      	mov	r2, r6
 800533a:	f001 fb5f 	bl	80069fc <__lshift>
 800533e:	4681      	mov	r9, r0
 8005340:	2800      	cmp	r0, #0
 8005342:	d0d8      	beq.n	80052f6 <_strtod_l+0x74e>
 8005344:	2f00      	cmp	r7, #0
 8005346:	dd08      	ble.n	800535a <_strtod_l+0x7b2>
 8005348:	4641      	mov	r1, r8
 800534a:	9805      	ldr	r0, [sp, #20]
 800534c:	463a      	mov	r2, r7
 800534e:	f001 fb55 	bl	80069fc <__lshift>
 8005352:	4680      	mov	r8, r0
 8005354:	2800      	cmp	r0, #0
 8005356:	f43f ae46 	beq.w	8004fe6 <_strtod_l+0x43e>
 800535a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800535c:	9805      	ldr	r0, [sp, #20]
 800535e:	464a      	mov	r2, r9
 8005360:	f001 fbd4 	bl	8006b0c <__mdiff>
 8005364:	4604      	mov	r4, r0
 8005366:	2800      	cmp	r0, #0
 8005368:	f43f ae3d 	beq.w	8004fe6 <_strtod_l+0x43e>
 800536c:	68c3      	ldr	r3, [r0, #12]
 800536e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005370:	2300      	movs	r3, #0
 8005372:	60c3      	str	r3, [r0, #12]
 8005374:	4641      	mov	r1, r8
 8005376:	f001 fbad 	bl	8006ad4 <__mcmp>
 800537a:	2800      	cmp	r0, #0
 800537c:	da46      	bge.n	800540c <_strtod_l+0x864>
 800537e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005380:	ea53 030a 	orrs.w	r3, r3, sl
 8005384:	d16c      	bne.n	8005460 <_strtod_l+0x8b8>
 8005386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800538a:	2b00      	cmp	r3, #0
 800538c:	d168      	bne.n	8005460 <_strtod_l+0x8b8>
 800538e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005392:	0d1b      	lsrs	r3, r3, #20
 8005394:	051b      	lsls	r3, r3, #20
 8005396:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800539a:	d961      	bls.n	8005460 <_strtod_l+0x8b8>
 800539c:	6963      	ldr	r3, [r4, #20]
 800539e:	b913      	cbnz	r3, 80053a6 <_strtod_l+0x7fe>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	dd5c      	ble.n	8005460 <_strtod_l+0x8b8>
 80053a6:	4621      	mov	r1, r4
 80053a8:	2201      	movs	r2, #1
 80053aa:	9805      	ldr	r0, [sp, #20]
 80053ac:	f001 fb26 	bl	80069fc <__lshift>
 80053b0:	4641      	mov	r1, r8
 80053b2:	4604      	mov	r4, r0
 80053b4:	f001 fb8e 	bl	8006ad4 <__mcmp>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dd51      	ble.n	8005460 <_strtod_l+0x8b8>
 80053bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80053c0:	9a08      	ldr	r2, [sp, #32]
 80053c2:	0d1b      	lsrs	r3, r3, #20
 80053c4:	051b      	lsls	r3, r3, #20
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d06b      	beq.n	80054a2 <_strtod_l+0x8fa>
 80053ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80053ce:	d868      	bhi.n	80054a2 <_strtod_l+0x8fa>
 80053d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80053d4:	f67f ae9d 	bls.w	8005112 <_strtod_l+0x56a>
 80053d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <_strtod_l+0x85c>)
 80053da:	4650      	mov	r0, sl
 80053dc:	4659      	mov	r1, fp
 80053de:	2200      	movs	r2, #0
 80053e0:	f7fb f902 	bl	80005e8 <__aeabi_dmul>
 80053e4:	4b08      	ldr	r3, [pc, #32]	@ (8005408 <_strtod_l+0x860>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	4682      	mov	sl, r0
 80053ea:	468b      	mov	fp, r1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f ae05 	bne.w	8004ffc <_strtod_l+0x454>
 80053f2:	9a05      	ldr	r2, [sp, #20]
 80053f4:	2322      	movs	r3, #34	@ 0x22
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e600      	b.n	8004ffc <_strtod_l+0x454>
 80053fa:	bf00      	nop
 80053fc:	080079e8 	.word	0x080079e8
 8005400:	fffffc02 	.word	0xfffffc02
 8005404:	39500000 	.word	0x39500000
 8005408:	7ff00000 	.word	0x7ff00000
 800540c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005410:	d165      	bne.n	80054de <_strtod_l+0x936>
 8005412:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005418:	b35a      	cbz	r2, 8005472 <_strtod_l+0x8ca>
 800541a:	4a9f      	ldr	r2, [pc, #636]	@ (8005698 <_strtod_l+0xaf0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d12b      	bne.n	8005478 <_strtod_l+0x8d0>
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	4651      	mov	r1, sl
 8005424:	b303      	cbz	r3, 8005468 <_strtod_l+0x8c0>
 8005426:	4b9d      	ldr	r3, [pc, #628]	@ (800569c <_strtod_l+0xaf4>)
 8005428:	465a      	mov	r2, fp
 800542a:	4013      	ands	r3, r2
 800542c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	d81b      	bhi.n	800546e <_strtod_l+0x8c6>
 8005436:	0d1b      	lsrs	r3, r3, #20
 8005438:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	4299      	cmp	r1, r3
 8005442:	d119      	bne.n	8005478 <_strtod_l+0x8d0>
 8005444:	4b96      	ldr	r3, [pc, #600]	@ (80056a0 <_strtod_l+0xaf8>)
 8005446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005448:	429a      	cmp	r2, r3
 800544a:	d102      	bne.n	8005452 <_strtod_l+0x8aa>
 800544c:	3101      	adds	r1, #1
 800544e:	f43f adca 	beq.w	8004fe6 <_strtod_l+0x43e>
 8005452:	4b92      	ldr	r3, [pc, #584]	@ (800569c <_strtod_l+0xaf4>)
 8005454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005456:	401a      	ands	r2, r3
 8005458:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800545c:	f04f 0a00 	mov.w	sl, #0
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1b8      	bne.n	80053d8 <_strtod_l+0x830>
 8005466:	e5c9      	b.n	8004ffc <_strtod_l+0x454>
 8005468:	f04f 33ff 	mov.w	r3, #4294967295
 800546c:	e7e8      	b.n	8005440 <_strtod_l+0x898>
 800546e:	4613      	mov	r3, r2
 8005470:	e7e6      	b.n	8005440 <_strtod_l+0x898>
 8005472:	ea53 030a 	orrs.w	r3, r3, sl
 8005476:	d0a1      	beq.n	80053bc <_strtod_l+0x814>
 8005478:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800547a:	b1db      	cbz	r3, 80054b4 <_strtod_l+0x90c>
 800547c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800547e:	4213      	tst	r3, r2
 8005480:	d0ee      	beq.n	8005460 <_strtod_l+0x8b8>
 8005482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005484:	9a08      	ldr	r2, [sp, #32]
 8005486:	4650      	mov	r0, sl
 8005488:	4659      	mov	r1, fp
 800548a:	b1bb      	cbz	r3, 80054bc <_strtod_l+0x914>
 800548c:	f7ff fb6e 	bl	8004b6c <sulp>
 8005490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005494:	ec53 2b10 	vmov	r2, r3, d0
 8005498:	f7fa fef0 	bl	800027c <__adddf3>
 800549c:	4682      	mov	sl, r0
 800549e:	468b      	mov	fp, r1
 80054a0:	e7de      	b.n	8005460 <_strtod_l+0x8b8>
 80054a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80054a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80054aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80054ae:	f04f 3aff 	mov.w	sl, #4294967295
 80054b2:	e7d5      	b.n	8005460 <_strtod_l+0x8b8>
 80054b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054b6:	ea13 0f0a 	tst.w	r3, sl
 80054ba:	e7e1      	b.n	8005480 <_strtod_l+0x8d8>
 80054bc:	f7ff fb56 	bl	8004b6c <sulp>
 80054c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054c4:	ec53 2b10 	vmov	r2, r3, d0
 80054c8:	f7fa fed6 	bl	8000278 <__aeabi_dsub>
 80054cc:	2200      	movs	r2, #0
 80054ce:	2300      	movs	r3, #0
 80054d0:	4682      	mov	sl, r0
 80054d2:	468b      	mov	fp, r1
 80054d4:	f7fb faf0 	bl	8000ab8 <__aeabi_dcmpeq>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d0c1      	beq.n	8005460 <_strtod_l+0x8b8>
 80054dc:	e619      	b.n	8005112 <_strtod_l+0x56a>
 80054de:	4641      	mov	r1, r8
 80054e0:	4620      	mov	r0, r4
 80054e2:	f001 fc6f 	bl	8006dc4 <__ratio>
 80054e6:	ec57 6b10 	vmov	r6, r7, d0
 80054ea:	2200      	movs	r2, #0
 80054ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb faf4 	bl	8000ae0 <__aeabi_dcmple>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d06f      	beq.n	80055dc <_strtod_l+0xa34>
 80054fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d17a      	bne.n	80055f8 <_strtod_l+0xa50>
 8005502:	f1ba 0f00 	cmp.w	sl, #0
 8005506:	d158      	bne.n	80055ba <_strtod_l+0xa12>
 8005508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800550a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550e:	2b00      	cmp	r3, #0
 8005510:	d15a      	bne.n	80055c8 <_strtod_l+0xa20>
 8005512:	4b64      	ldr	r3, [pc, #400]	@ (80056a4 <_strtod_l+0xafc>)
 8005514:	2200      	movs	r2, #0
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fb fad7 	bl	8000acc <__aeabi_dcmplt>
 800551e:	2800      	cmp	r0, #0
 8005520:	d159      	bne.n	80055d6 <_strtod_l+0xa2e>
 8005522:	4630      	mov	r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	4b60      	ldr	r3, [pc, #384]	@ (80056a8 <_strtod_l+0xb00>)
 8005528:	2200      	movs	r2, #0
 800552a:	f7fb f85d 	bl	80005e8 <__aeabi_dmul>
 800552e:	4606      	mov	r6, r0
 8005530:	460f      	mov	r7, r1
 8005532:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005536:	9606      	str	r6, [sp, #24]
 8005538:	9307      	str	r3, [sp, #28]
 800553a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800553e:	4d57      	ldr	r5, [pc, #348]	@ (800569c <_strtod_l+0xaf4>)
 8005540:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005546:	401d      	ands	r5, r3
 8005548:	4b58      	ldr	r3, [pc, #352]	@ (80056ac <_strtod_l+0xb04>)
 800554a:	429d      	cmp	r5, r3
 800554c:	f040 80b2 	bne.w	80056b4 <_strtod_l+0xb0c>
 8005550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005552:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005556:	ec4b ab10 	vmov	d0, sl, fp
 800555a:	f001 fb6b 	bl	8006c34 <__ulp>
 800555e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005562:	ec51 0b10 	vmov	r0, r1, d0
 8005566:	f7fb f83f 	bl	80005e8 <__aeabi_dmul>
 800556a:	4652      	mov	r2, sl
 800556c:	465b      	mov	r3, fp
 800556e:	f7fa fe85 	bl	800027c <__adddf3>
 8005572:	460b      	mov	r3, r1
 8005574:	4949      	ldr	r1, [pc, #292]	@ (800569c <_strtod_l+0xaf4>)
 8005576:	4a4e      	ldr	r2, [pc, #312]	@ (80056b0 <_strtod_l+0xb08>)
 8005578:	4019      	ands	r1, r3
 800557a:	4291      	cmp	r1, r2
 800557c:	4682      	mov	sl, r0
 800557e:	d942      	bls.n	8005606 <_strtod_l+0xa5e>
 8005580:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005582:	4b47      	ldr	r3, [pc, #284]	@ (80056a0 <_strtod_l+0xaf8>)
 8005584:	429a      	cmp	r2, r3
 8005586:	d103      	bne.n	8005590 <_strtod_l+0x9e8>
 8005588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800558a:	3301      	adds	r3, #1
 800558c:	f43f ad2b 	beq.w	8004fe6 <_strtod_l+0x43e>
 8005590:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80056a0 <_strtod_l+0xaf8>
 8005594:	f04f 3aff 	mov.w	sl, #4294967295
 8005598:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800559a:	9805      	ldr	r0, [sp, #20]
 800559c:	f001 f816 	bl	80065cc <_Bfree>
 80055a0:	9805      	ldr	r0, [sp, #20]
 80055a2:	4649      	mov	r1, r9
 80055a4:	f001 f812 	bl	80065cc <_Bfree>
 80055a8:	9805      	ldr	r0, [sp, #20]
 80055aa:	4641      	mov	r1, r8
 80055ac:	f001 f80e 	bl	80065cc <_Bfree>
 80055b0:	9805      	ldr	r0, [sp, #20]
 80055b2:	4621      	mov	r1, r4
 80055b4:	f001 f80a 	bl	80065cc <_Bfree>
 80055b8:	e618      	b.n	80051ec <_strtod_l+0x644>
 80055ba:	f1ba 0f01 	cmp.w	sl, #1
 80055be:	d103      	bne.n	80055c8 <_strtod_l+0xa20>
 80055c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f43f ada5 	beq.w	8005112 <_strtod_l+0x56a>
 80055c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005678 <_strtod_l+0xad0>
 80055cc:	4f35      	ldr	r7, [pc, #212]	@ (80056a4 <_strtod_l+0xafc>)
 80055ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055d2:	2600      	movs	r6, #0
 80055d4:	e7b1      	b.n	800553a <_strtod_l+0x992>
 80055d6:	4f34      	ldr	r7, [pc, #208]	@ (80056a8 <_strtod_l+0xb00>)
 80055d8:	2600      	movs	r6, #0
 80055da:	e7aa      	b.n	8005532 <_strtod_l+0x98a>
 80055dc:	4b32      	ldr	r3, [pc, #200]	@ (80056a8 <_strtod_l+0xb00>)
 80055de:	4630      	mov	r0, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	2200      	movs	r2, #0
 80055e4:	f7fb f800 	bl	80005e8 <__aeabi_dmul>
 80055e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d09f      	beq.n	8005532 <_strtod_l+0x98a>
 80055f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80055f6:	e7a0      	b.n	800553a <_strtod_l+0x992>
 80055f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005680 <_strtod_l+0xad8>
 80055fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005600:	ec57 6b17 	vmov	r6, r7, d7
 8005604:	e799      	b.n	800553a <_strtod_l+0x992>
 8005606:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800560a:	9b08      	ldr	r3, [sp, #32]
 800560c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1c1      	bne.n	8005598 <_strtod_l+0x9f0>
 8005614:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005618:	0d1b      	lsrs	r3, r3, #20
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	429d      	cmp	r5, r3
 800561e:	d1bb      	bne.n	8005598 <_strtod_l+0x9f0>
 8005620:	4630      	mov	r0, r6
 8005622:	4639      	mov	r1, r7
 8005624:	f7fb fb18 	bl	8000c58 <__aeabi_d2lz>
 8005628:	f7fa ffb0 	bl	800058c <__aeabi_l2d>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa fe20 	bl	8000278 <__aeabi_dsub>
 8005638:	460b      	mov	r3, r1
 800563a:	4602      	mov	r2, r0
 800563c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005640:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005646:	ea46 060a 	orr.w	r6, r6, sl
 800564a:	431e      	orrs	r6, r3
 800564c:	d06f      	beq.n	800572e <_strtod_l+0xb86>
 800564e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005688 <_strtod_l+0xae0>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fb fa3a 	bl	8000acc <__aeabi_dcmplt>
 8005658:	2800      	cmp	r0, #0
 800565a:	f47f accf 	bne.w	8004ffc <_strtod_l+0x454>
 800565e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005690 <_strtod_l+0xae8>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005668:	f7fb fa4e 	bl	8000b08 <__aeabi_dcmpgt>
 800566c:	2800      	cmp	r0, #0
 800566e:	d093      	beq.n	8005598 <_strtod_l+0x9f0>
 8005670:	e4c4      	b.n	8004ffc <_strtod_l+0x454>
 8005672:	bf00      	nop
 8005674:	f3af 8000 	nop.w
 8005678:	00000000 	.word	0x00000000
 800567c:	bff00000 	.word	0xbff00000
 8005680:	00000000 	.word	0x00000000
 8005684:	3ff00000 	.word	0x3ff00000
 8005688:	94a03595 	.word	0x94a03595
 800568c:	3fdfffff 	.word	0x3fdfffff
 8005690:	35afe535 	.word	0x35afe535
 8005694:	3fe00000 	.word	0x3fe00000
 8005698:	000fffff 	.word	0x000fffff
 800569c:	7ff00000 	.word	0x7ff00000
 80056a0:	7fefffff 	.word	0x7fefffff
 80056a4:	3ff00000 	.word	0x3ff00000
 80056a8:	3fe00000 	.word	0x3fe00000
 80056ac:	7fe00000 	.word	0x7fe00000
 80056b0:	7c9fffff 	.word	0x7c9fffff
 80056b4:	9b08      	ldr	r3, [sp, #32]
 80056b6:	b323      	cbz	r3, 8005702 <_strtod_l+0xb5a>
 80056b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80056bc:	d821      	bhi.n	8005702 <_strtod_l+0xb5a>
 80056be:	a328      	add	r3, pc, #160	@ (adr r3, 8005760 <_strtod_l+0xbb8>)
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fb fa0a 	bl	8000ae0 <__aeabi_dcmple>
 80056cc:	b1a0      	cbz	r0, 80056f8 <_strtod_l+0xb50>
 80056ce:	4639      	mov	r1, r7
 80056d0:	4630      	mov	r0, r6
 80056d2:	f7fb fa39 	bl	8000b48 <__aeabi_d2uiz>
 80056d6:	2801      	cmp	r0, #1
 80056d8:	bf38      	it	cc
 80056da:	2001      	movcc	r0, #1
 80056dc:	f7fa ff0a 	bl	80004f4 <__aeabi_ui2d>
 80056e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056e2:	4606      	mov	r6, r0
 80056e4:	460f      	mov	r7, r1
 80056e6:	b9fb      	cbnz	r3, 8005728 <_strtod_l+0xb80>
 80056e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80056ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80056f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80056f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80056f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80056fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80056fe:	1b5b      	subs	r3, r3, r5
 8005700:	9311      	str	r3, [sp, #68]	@ 0x44
 8005702:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005706:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800570a:	f001 fa93 	bl	8006c34 <__ulp>
 800570e:	4650      	mov	r0, sl
 8005710:	ec53 2b10 	vmov	r2, r3, d0
 8005714:	4659      	mov	r1, fp
 8005716:	f7fa ff67 	bl	80005e8 <__aeabi_dmul>
 800571a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800571e:	f7fa fdad 	bl	800027c <__adddf3>
 8005722:	4682      	mov	sl, r0
 8005724:	468b      	mov	fp, r1
 8005726:	e770      	b.n	800560a <_strtod_l+0xa62>
 8005728:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800572c:	e7e0      	b.n	80056f0 <_strtod_l+0xb48>
 800572e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005768 <_strtod_l+0xbc0>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	f7fb f9ca 	bl	8000acc <__aeabi_dcmplt>
 8005738:	e798      	b.n	800566c <_strtod_l+0xac4>
 800573a:	2300      	movs	r3, #0
 800573c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800573e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	f7ff ba6d 	b.w	8004c22 <_strtod_l+0x7a>
 8005748:	2a65      	cmp	r2, #101	@ 0x65
 800574a:	f43f ab66 	beq.w	8004e1a <_strtod_l+0x272>
 800574e:	2a45      	cmp	r2, #69	@ 0x45
 8005750:	f43f ab63 	beq.w	8004e1a <_strtod_l+0x272>
 8005754:	2301      	movs	r3, #1
 8005756:	f7ff bb9e 	b.w	8004e96 <_strtod_l+0x2ee>
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	ffc00000 	.word	0xffc00000
 8005764:	41dfffff 	.word	0x41dfffff
 8005768:	94a03595 	.word	0x94a03595
 800576c:	3fcfffff 	.word	0x3fcfffff

08005770 <strtof>:
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8005834 <strtof+0xc4>
 8005778:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <strtof+0xb0>)
 800577a:	460a      	mov	r2, r1
 800577c:	ed2d 8b02 	vpush	{d8}
 8005780:	4601      	mov	r1, r0
 8005782:	f8d8 0000 	ldr.w	r0, [r8]
 8005786:	f7ff fa0f 	bl	8004ba8 <_strtod_l>
 800578a:	ec55 4b10 	vmov	r4, r5, d0
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	4620      	mov	r0, r4
 8005794:	4629      	mov	r1, r5
 8005796:	f7fb f9c1 	bl	8000b1c <__aeabi_dcmpun>
 800579a:	b190      	cbz	r0, 80057c2 <strtof+0x52>
 800579c:	2d00      	cmp	r5, #0
 800579e:	4821      	ldr	r0, [pc, #132]	@ (8005824 <strtof+0xb4>)
 80057a0:	da09      	bge.n	80057b6 <strtof+0x46>
 80057a2:	f000 fa89 	bl	8005cb8 <nanf>
 80057a6:	eeb1 8a40 	vneg.f32	s16, s0
 80057aa:	eeb0 0a48 	vmov.f32	s0, s16
 80057ae:	ecbd 8b02 	vpop	{d8}
 80057b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b6:	ecbd 8b02 	vpop	{d8}
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	f000 ba7b 	b.w	8005cb8 <nanf>
 80057c2:	4620      	mov	r0, r4
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7fb f9df 	bl	8000b88 <__aeabi_d2f>
 80057ca:	ee08 0a10 	vmov	s16, r0
 80057ce:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8005828 <strtof+0xb8>
 80057d2:	eeb0 7ac8 	vabs.f32	s14, s16
 80057d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	dd11      	ble.n	8005804 <strtof+0x94>
 80057e0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80057e4:	4b11      	ldr	r3, [pc, #68]	@ (800582c <strtof+0xbc>)
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ea:	4620      	mov	r0, r4
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb f995 	bl	8000b1c <__aeabi_dcmpun>
 80057f2:	b980      	cbnz	r0, 8005816 <strtof+0xa6>
 80057f4:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <strtof+0xbc>)
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	4620      	mov	r0, r4
 80057fc:	4639      	mov	r1, r7
 80057fe:	f7fb f96f 	bl	8000ae0 <__aeabi_dcmple>
 8005802:	b940      	cbnz	r0, 8005816 <strtof+0xa6>
 8005804:	ee18 3a10 	vmov	r3, s16
 8005808:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800580c:	d1cd      	bne.n	80057aa <strtof+0x3a>
 800580e:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <strtof+0xc0>)
 8005810:	402b      	ands	r3, r5
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c9      	beq.n	80057aa <strtof+0x3a>
 8005816:	f8d8 3000 	ldr.w	r3, [r8]
 800581a:	2222      	movs	r2, #34	@ 0x22
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e7c4      	b.n	80057aa <strtof+0x3a>
 8005820:	20000018 	.word	0x20000018
 8005824:	08007d66 	.word	0x08007d66
 8005828:	7f7fffff 	.word	0x7f7fffff
 800582c:	7fefffff 	.word	0x7fefffff
 8005830:	7ff00000 	.word	0x7ff00000
 8005834:	20000184 	.word	0x20000184

08005838 <_strtol_l.constprop.0>:
 8005838:	2b24      	cmp	r3, #36	@ 0x24
 800583a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583e:	4686      	mov	lr, r0
 8005840:	4690      	mov	r8, r2
 8005842:	d801      	bhi.n	8005848 <_strtol_l.constprop.0+0x10>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <_strtol_l.constprop.0+0x1e>
 8005848:	f000 f9f2 	bl	8005c30 <__errno>
 800584c:	2316      	movs	r3, #22
 800584e:	6003      	str	r3, [r0, #0]
 8005850:	2000      	movs	r0, #0
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005856:	4834      	ldr	r0, [pc, #208]	@ (8005928 <_strtol_l.constprop.0+0xf0>)
 8005858:	460d      	mov	r5, r1
 800585a:	462a      	mov	r2, r5
 800585c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005860:	5d06      	ldrb	r6, [r0, r4]
 8005862:	f016 0608 	ands.w	r6, r6, #8
 8005866:	d1f8      	bne.n	800585a <_strtol_l.constprop.0+0x22>
 8005868:	2c2d      	cmp	r4, #45	@ 0x2d
 800586a:	d12d      	bne.n	80058c8 <_strtol_l.constprop.0+0x90>
 800586c:	782c      	ldrb	r4, [r5, #0]
 800586e:	2601      	movs	r6, #1
 8005870:	1c95      	adds	r5, r2, #2
 8005872:	f033 0210 	bics.w	r2, r3, #16
 8005876:	d109      	bne.n	800588c <_strtol_l.constprop.0+0x54>
 8005878:	2c30      	cmp	r4, #48	@ 0x30
 800587a:	d12a      	bne.n	80058d2 <_strtol_l.constprop.0+0x9a>
 800587c:	782a      	ldrb	r2, [r5, #0]
 800587e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005882:	2a58      	cmp	r2, #88	@ 0x58
 8005884:	d125      	bne.n	80058d2 <_strtol_l.constprop.0+0x9a>
 8005886:	786c      	ldrb	r4, [r5, #1]
 8005888:	2310      	movs	r3, #16
 800588a:	3502      	adds	r5, #2
 800588c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005890:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005894:	2200      	movs	r2, #0
 8005896:	fbbc f9f3 	udiv	r9, ip, r3
 800589a:	4610      	mov	r0, r2
 800589c:	fb03 ca19 	mls	sl, r3, r9, ip
 80058a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058a4:	2f09      	cmp	r7, #9
 80058a6:	d81b      	bhi.n	80058e0 <_strtol_l.constprop.0+0xa8>
 80058a8:	463c      	mov	r4, r7
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	dd27      	ble.n	80058fe <_strtol_l.constprop.0+0xc6>
 80058ae:	1c57      	adds	r7, r2, #1
 80058b0:	d007      	beq.n	80058c2 <_strtol_l.constprop.0+0x8a>
 80058b2:	4581      	cmp	r9, r0
 80058b4:	d320      	bcc.n	80058f8 <_strtol_l.constprop.0+0xc0>
 80058b6:	d101      	bne.n	80058bc <_strtol_l.constprop.0+0x84>
 80058b8:	45a2      	cmp	sl, r4
 80058ba:	db1d      	blt.n	80058f8 <_strtol_l.constprop.0+0xc0>
 80058bc:	fb00 4003 	mla	r0, r0, r3, r4
 80058c0:	2201      	movs	r2, #1
 80058c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c6:	e7eb      	b.n	80058a0 <_strtol_l.constprop.0+0x68>
 80058c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80058ca:	bf04      	itt	eq
 80058cc:	782c      	ldrbeq	r4, [r5, #0]
 80058ce:	1c95      	addeq	r5, r2, #2
 80058d0:	e7cf      	b.n	8005872 <_strtol_l.constprop.0+0x3a>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1da      	bne.n	800588c <_strtol_l.constprop.0+0x54>
 80058d6:	2c30      	cmp	r4, #48	@ 0x30
 80058d8:	bf0c      	ite	eq
 80058da:	2308      	moveq	r3, #8
 80058dc:	230a      	movne	r3, #10
 80058de:	e7d5      	b.n	800588c <_strtol_l.constprop.0+0x54>
 80058e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058e4:	2f19      	cmp	r7, #25
 80058e6:	d801      	bhi.n	80058ec <_strtol_l.constprop.0+0xb4>
 80058e8:	3c37      	subs	r4, #55	@ 0x37
 80058ea:	e7de      	b.n	80058aa <_strtol_l.constprop.0+0x72>
 80058ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058f0:	2f19      	cmp	r7, #25
 80058f2:	d804      	bhi.n	80058fe <_strtol_l.constprop.0+0xc6>
 80058f4:	3c57      	subs	r4, #87	@ 0x57
 80058f6:	e7d8      	b.n	80058aa <_strtol_l.constprop.0+0x72>
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	e7e1      	b.n	80058c2 <_strtol_l.constprop.0+0x8a>
 80058fe:	1c53      	adds	r3, r2, #1
 8005900:	d108      	bne.n	8005914 <_strtol_l.constprop.0+0xdc>
 8005902:	2322      	movs	r3, #34	@ 0x22
 8005904:	f8ce 3000 	str.w	r3, [lr]
 8005908:	4660      	mov	r0, ip
 800590a:	f1b8 0f00 	cmp.w	r8, #0
 800590e:	d0a0      	beq.n	8005852 <_strtol_l.constprop.0+0x1a>
 8005910:	1e69      	subs	r1, r5, #1
 8005912:	e006      	b.n	8005922 <_strtol_l.constprop.0+0xea>
 8005914:	b106      	cbz	r6, 8005918 <_strtol_l.constprop.0+0xe0>
 8005916:	4240      	negs	r0, r0
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	d099      	beq.n	8005852 <_strtol_l.constprop.0+0x1a>
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1f6      	bne.n	8005910 <_strtol_l.constprop.0+0xd8>
 8005922:	f8c8 1000 	str.w	r1, [r8]
 8005926:	e794      	b.n	8005852 <_strtol_l.constprop.0+0x1a>
 8005928:	08007a11 	.word	0x08007a11

0800592c <strtol>:
 800592c:	4613      	mov	r3, r2
 800592e:	460a      	mov	r2, r1
 8005930:	4601      	mov	r1, r0
 8005932:	4802      	ldr	r0, [pc, #8]	@ (800593c <strtol+0x10>)
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f7ff bf7f 	b.w	8005838 <_strtol_l.constprop.0>
 800593a:	bf00      	nop
 800593c:	20000184 	.word	0x20000184

08005940 <std>:
 8005940:	2300      	movs	r3, #0
 8005942:	b510      	push	{r4, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	e9c0 3300 	strd	r3, r3, [r0]
 800594a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800594e:	6083      	str	r3, [r0, #8]
 8005950:	8181      	strh	r1, [r0, #12]
 8005952:	6643      	str	r3, [r0, #100]	@ 0x64
 8005954:	81c2      	strh	r2, [r0, #14]
 8005956:	6183      	str	r3, [r0, #24]
 8005958:	4619      	mov	r1, r3
 800595a:	2208      	movs	r2, #8
 800595c:	305c      	adds	r0, #92	@ 0x5c
 800595e:	f000 f906 	bl	8005b6e <memset>
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <std+0x58>)
 8005964:	6263      	str	r3, [r4, #36]	@ 0x24
 8005966:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <std+0x5c>)
 8005968:	62a3      	str	r3, [r4, #40]	@ 0x28
 800596a:	4b0d      	ldr	r3, [pc, #52]	@ (80059a0 <std+0x60>)
 800596c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <std+0x64>)
 8005970:	6323      	str	r3, [r4, #48]	@ 0x30
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <std+0x68>)
 8005974:	6224      	str	r4, [r4, #32]
 8005976:	429c      	cmp	r4, r3
 8005978:	d006      	beq.n	8005988 <std+0x48>
 800597a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800597e:	4294      	cmp	r4, r2
 8005980:	d002      	beq.n	8005988 <std+0x48>
 8005982:	33d0      	adds	r3, #208	@ 0xd0
 8005984:	429c      	cmp	r4, r3
 8005986:	d105      	bne.n	8005994 <std+0x54>
 8005988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005990:	f000 b978 	b.w	8005c84 <__retarget_lock_init_recursive>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	bf00      	nop
 8005998:	08005ae9 	.word	0x08005ae9
 800599c:	08005b0b 	.word	0x08005b0b
 80059a0:	08005b43 	.word	0x08005b43
 80059a4:	08005b67 	.word	0x08005b67
 80059a8:	2000034c 	.word	0x2000034c

080059ac <stdio_exit_handler>:
 80059ac:	4a02      	ldr	r2, [pc, #8]	@ (80059b8 <stdio_exit_handler+0xc>)
 80059ae:	4903      	ldr	r1, [pc, #12]	@ (80059bc <stdio_exit_handler+0x10>)
 80059b0:	4803      	ldr	r0, [pc, #12]	@ (80059c0 <stdio_exit_handler+0x14>)
 80059b2:	f000 b869 	b.w	8005a88 <_fwalk_sglue>
 80059b6:	bf00      	nop
 80059b8:	2000000c 	.word	0x2000000c
 80059bc:	08007571 	.word	0x08007571
 80059c0:	20000188 	.word	0x20000188

080059c4 <cleanup_stdio>:
 80059c4:	6841      	ldr	r1, [r0, #4]
 80059c6:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <cleanup_stdio+0x34>)
 80059c8:	4299      	cmp	r1, r3
 80059ca:	b510      	push	{r4, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	d001      	beq.n	80059d4 <cleanup_stdio+0x10>
 80059d0:	f001 fdce 	bl	8007570 <_fflush_r>
 80059d4:	68a1      	ldr	r1, [r4, #8]
 80059d6:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <cleanup_stdio+0x38>)
 80059d8:	4299      	cmp	r1, r3
 80059da:	d002      	beq.n	80059e2 <cleanup_stdio+0x1e>
 80059dc:	4620      	mov	r0, r4
 80059de:	f001 fdc7 	bl	8007570 <_fflush_r>
 80059e2:	68e1      	ldr	r1, [r4, #12]
 80059e4:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <cleanup_stdio+0x3c>)
 80059e6:	4299      	cmp	r1, r3
 80059e8:	d004      	beq.n	80059f4 <cleanup_stdio+0x30>
 80059ea:	4620      	mov	r0, r4
 80059ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f0:	f001 bdbe 	b.w	8007570 <_fflush_r>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop
 80059f8:	2000034c 	.word	0x2000034c
 80059fc:	200003b4 	.word	0x200003b4
 8005a00:	2000041c 	.word	0x2000041c

08005a04 <global_stdio_init.part.0>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4b0b      	ldr	r3, [pc, #44]	@ (8005a34 <global_stdio_init.part.0+0x30>)
 8005a08:	4c0b      	ldr	r4, [pc, #44]	@ (8005a38 <global_stdio_init.part.0+0x34>)
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a3c <global_stdio_init.part.0+0x38>)
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	2200      	movs	r2, #0
 8005a12:	2104      	movs	r1, #4
 8005a14:	f7ff ff94 	bl	8005940 <std>
 8005a18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	2109      	movs	r1, #9
 8005a20:	f7ff ff8e 	bl	8005940 <std>
 8005a24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a28:	2202      	movs	r2, #2
 8005a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2e:	2112      	movs	r1, #18
 8005a30:	f7ff bf86 	b.w	8005940 <std>
 8005a34:	20000484 	.word	0x20000484
 8005a38:	2000034c 	.word	0x2000034c
 8005a3c:	080059ad 	.word	0x080059ad

08005a40 <__sfp_lock_acquire>:
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <__sfp_lock_acquire+0x8>)
 8005a42:	f000 b920 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	2000048d 	.word	0x2000048d

08005a4c <__sfp_lock_release>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	@ (8005a54 <__sfp_lock_release+0x8>)
 8005a4e:	f000 b91b 	b.w	8005c88 <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	2000048d 	.word	0x2000048d

08005a58 <__sinit>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	f7ff fff0 	bl	8005a40 <__sfp_lock_acquire>
 8005a60:	6a23      	ldr	r3, [r4, #32]
 8005a62:	b11b      	cbz	r3, 8005a6c <__sinit+0x14>
 8005a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a68:	f7ff bff0 	b.w	8005a4c <__sfp_lock_release>
 8005a6c:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <__sinit+0x28>)
 8005a6e:	6223      	str	r3, [r4, #32]
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <__sinit+0x2c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f5      	bne.n	8005a64 <__sinit+0xc>
 8005a78:	f7ff ffc4 	bl	8005a04 <global_stdio_init.part.0>
 8005a7c:	e7f2      	b.n	8005a64 <__sinit+0xc>
 8005a7e:	bf00      	nop
 8005a80:	080059c5 	.word	0x080059c5
 8005a84:	20000484 	.word	0x20000484

08005a88 <_fwalk_sglue>:
 8005a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	4688      	mov	r8, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	2600      	movs	r6, #0
 8005a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a98:	f1b9 0901 	subs.w	r9, r9, #1
 8005a9c:	d505      	bpl.n	8005aaa <_fwalk_sglue+0x22>
 8005a9e:	6824      	ldr	r4, [r4, #0]
 8005aa0:	2c00      	cmp	r4, #0
 8005aa2:	d1f7      	bne.n	8005a94 <_fwalk_sglue+0xc>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d907      	bls.n	8005ac0 <_fwalk_sglue+0x38>
 8005ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	d003      	beq.n	8005ac0 <_fwalk_sglue+0x38>
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4638      	mov	r0, r7
 8005abc:	47c0      	blx	r8
 8005abe:	4306      	orrs	r6, r0
 8005ac0:	3568      	adds	r5, #104	@ 0x68
 8005ac2:	e7e9      	b.n	8005a98 <_fwalk_sglue+0x10>

08005ac4 <iprintf>:
 8005ac4:	b40f      	push	{r0, r1, r2, r3}
 8005ac6:	b507      	push	{r0, r1, r2, lr}
 8005ac8:	4906      	ldr	r1, [pc, #24]	@ (8005ae4 <iprintf+0x20>)
 8005aca:	ab04      	add	r3, sp, #16
 8005acc:	6808      	ldr	r0, [r1, #0]
 8005ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad2:	6881      	ldr	r1, [r0, #8]
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	f001 fa21 	bl	8006f1c <_vfiprintf_r>
 8005ada:	b003      	add	sp, #12
 8005adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ae0:	b004      	add	sp, #16
 8005ae2:	4770      	bx	lr
 8005ae4:	20000184 	.word	0x20000184

08005ae8 <__sread>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	460c      	mov	r4, r1
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	f000 f87a 	bl	8005be8 <_read_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	bfab      	itete	ge
 8005af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005afa:	89a3      	ldrhlt	r3, [r4, #12]
 8005afc:	181b      	addge	r3, r3, r0
 8005afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b02:	bfac      	ite	ge
 8005b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b06:	81a3      	strhlt	r3, [r4, #12]
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <__swrite>:
 8005b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	461f      	mov	r7, r3
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	05db      	lsls	r3, r3, #23
 8005b14:	4605      	mov	r5, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4616      	mov	r6, r2
 8005b1a:	d505      	bpl.n	8005b28 <__swrite+0x1e>
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2302      	movs	r3, #2
 8005b22:	2200      	movs	r2, #0
 8005b24:	f000 f84e 	bl	8005bc4 <_lseek_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3e:	f000 b865 	b.w	8005c0c <_write_r>

08005b42 <__sseek>:
 8005b42:	b510      	push	{r4, lr}
 8005b44:	460c      	mov	r4, r1
 8005b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4a:	f000 f83b 	bl	8005bc4 <_lseek_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	bf15      	itete	ne
 8005b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b5e:	81a3      	strheq	r3, [r4, #12]
 8005b60:	bf18      	it	ne
 8005b62:	81a3      	strhne	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__sclose>:
 8005b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6a:	f000 b81b 	b.w	8005ba4 <_close_r>

08005b6e <memset>:
 8005b6e:	4402      	add	r2, r0
 8005b70:	4603      	mov	r3, r0
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d100      	bne.n	8005b78 <memset+0xa>
 8005b76:	4770      	bx	lr
 8005b78:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7c:	e7f9      	b.n	8005b72 <memset+0x4>

08005b7e <strncmp>:
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	b16a      	cbz	r2, 8005b9e <strncmp+0x20>
 8005b82:	3901      	subs	r1, #1
 8005b84:	1884      	adds	r4, r0, r2
 8005b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d103      	bne.n	8005b9a <strncmp+0x1c>
 8005b92:	42a0      	cmp	r0, r4
 8005b94:	d001      	beq.n	8005b9a <strncmp+0x1c>
 8005b96:	2a00      	cmp	r2, #0
 8005b98:	d1f5      	bne.n	8005b86 <strncmp+0x8>
 8005b9a:	1ad0      	subs	r0, r2, r3
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	e7fc      	b.n	8005b9c <strncmp+0x1e>
	...

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	@ (8005bc0 <_close_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fb fe32 	bl	8001818 <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	20000488 	.word	0x20000488

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	@ (8005be4 <_lseek_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb fe47 	bl	8001866 <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20000488 	.word	0x20000488

08005be8 <_read_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	@ (8005c08 <_read_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb fdf1 	bl	80017de <_read>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_read_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_read_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	20000488 	.word	0x20000488

08005c0c <_write_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_write_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fb fcc0 	bl	80015a0 <_write>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_write_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_write_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000488 	.word	0x20000488

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	@ (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000184 	.word	0x20000184

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c74 <__libc_init_array+0x38>)
 8005c40:	4c0d      	ldr	r4, [pc, #52]	@ (8005c78 <__libc_init_array+0x3c>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	2600      	movs	r6, #0
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c7c <__libc_init_array+0x40>)
 8005c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c80 <__libc_init_array+0x44>)
 8005c50:	f001 fe76 	bl	8007940 <_init>
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	2600      	movs	r6, #0
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	08007d70 	.word	0x08007d70
 8005c78:	08007d70 	.word	0x08007d70
 8005c7c:	08007d70 	.word	0x08007d70
 8005c80:	08007d74 	.word	0x08007d74

08005c84 <__retarget_lock_init_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_acquire_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_release_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <memcpy>:
 8005c8a:	440a      	add	r2, r1
 8005c8c:	4291      	cmp	r1, r2
 8005c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c92:	d100      	bne.n	8005c96 <memcpy+0xc>
 8005c94:	4770      	bx	lr
 8005c96:	b510      	push	{r4, lr}
 8005c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca0:	4291      	cmp	r1, r2
 8005ca2:	d1f9      	bne.n	8005c98 <memcpy+0xe>
 8005ca4:	bd10      	pop	{r4, pc}
	...

08005ca8 <nan>:
 8005ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005cb0 <nan+0x8>
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	7ff80000 	.word	0x7ff80000

08005cb8 <nanf>:
 8005cb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005cc0 <nanf+0x8>
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	7fc00000 	.word	0x7fc00000

08005cc4 <_free_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	2900      	cmp	r1, #0
 8005cca:	d041      	beq.n	8005d50 <_free_r+0x8c>
 8005ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd0:	1f0c      	subs	r4, r1, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfb8      	it	lt
 8005cd6:	18e4      	addlt	r4, r4, r3
 8005cd8:	f000 fc2c 	bl	8006534 <__malloc_lock>
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <_free_r+0x90>)
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	b933      	cbnz	r3, 8005cf0 <_free_r+0x2c>
 8005ce2:	6063      	str	r3, [r4, #4]
 8005ce4:	6014      	str	r4, [r2, #0]
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cec:	f000 bc28 	b.w	8006540 <__malloc_unlock>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d908      	bls.n	8005d06 <_free_r+0x42>
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	1821      	adds	r1, r4, r0
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	bf01      	itttt	eq
 8005cfc:	6819      	ldreq	r1, [r3, #0]
 8005cfe:	685b      	ldreq	r3, [r3, #4]
 8005d00:	1809      	addeq	r1, r1, r0
 8005d02:	6021      	streq	r1, [r4, #0]
 8005d04:	e7ed      	b.n	8005ce2 <_free_r+0x1e>
 8005d06:	461a      	mov	r2, r3
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b10b      	cbz	r3, 8005d10 <_free_r+0x4c>
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d9fa      	bls.n	8005d06 <_free_r+0x42>
 8005d10:	6811      	ldr	r1, [r2, #0]
 8005d12:	1850      	adds	r0, r2, r1
 8005d14:	42a0      	cmp	r0, r4
 8005d16:	d10b      	bne.n	8005d30 <_free_r+0x6c>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	1850      	adds	r0, r2, r1
 8005d1e:	4283      	cmp	r3, r0
 8005d20:	6011      	str	r1, [r2, #0]
 8005d22:	d1e0      	bne.n	8005ce6 <_free_r+0x22>
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	4408      	add	r0, r1
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	e7da      	b.n	8005ce6 <_free_r+0x22>
 8005d30:	d902      	bls.n	8005d38 <_free_r+0x74>
 8005d32:	230c      	movs	r3, #12
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	e7d6      	b.n	8005ce6 <_free_r+0x22>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	bf04      	itt	eq
 8005d40:	6819      	ldreq	r1, [r3, #0]
 8005d42:	685b      	ldreq	r3, [r3, #4]
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	bf04      	itt	eq
 8005d48:	1809      	addeq	r1, r1, r0
 8005d4a:	6021      	streq	r1, [r4, #0]
 8005d4c:	6054      	str	r4, [r2, #4]
 8005d4e:	e7ca      	b.n	8005ce6 <_free_r+0x22>
 8005d50:	bd38      	pop	{r3, r4, r5, pc}
 8005d52:	bf00      	nop
 8005d54:	20000494 	.word	0x20000494

08005d58 <rshift>:
 8005d58:	6903      	ldr	r3, [r0, #16]
 8005d5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005d66:	f100 0414 	add.w	r4, r0, #20
 8005d6a:	dd45      	ble.n	8005df8 <rshift+0xa0>
 8005d6c:	f011 011f 	ands.w	r1, r1, #31
 8005d70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005d74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005d78:	d10c      	bne.n	8005d94 <rshift+0x3c>
 8005d7a:	f100 0710 	add.w	r7, r0, #16
 8005d7e:	4629      	mov	r1, r5
 8005d80:	42b1      	cmp	r1, r6
 8005d82:	d334      	bcc.n	8005dee <rshift+0x96>
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	1eea      	subs	r2, r5, #3
 8005d8a:	4296      	cmp	r6, r2
 8005d8c:	bf38      	it	cc
 8005d8e:	2300      	movcc	r3, #0
 8005d90:	4423      	add	r3, r4
 8005d92:	e015      	b.n	8005dc0 <rshift+0x68>
 8005d94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d98:	f1c1 0820 	rsb	r8, r1, #32
 8005d9c:	40cf      	lsrs	r7, r1
 8005d9e:	f105 0e04 	add.w	lr, r5, #4
 8005da2:	46a1      	mov	r9, r4
 8005da4:	4576      	cmp	r6, lr
 8005da6:	46f4      	mov	ip, lr
 8005da8:	d815      	bhi.n	8005dd6 <rshift+0x7e>
 8005daa:	1a9a      	subs	r2, r3, r2
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	3a04      	subs	r2, #4
 8005db0:	3501      	adds	r5, #1
 8005db2:	42ae      	cmp	r6, r5
 8005db4:	bf38      	it	cc
 8005db6:	2200      	movcc	r2, #0
 8005db8:	18a3      	adds	r3, r4, r2
 8005dba:	50a7      	str	r7, [r4, r2]
 8005dbc:	b107      	cbz	r7, 8005dc0 <rshift+0x68>
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	1b1a      	subs	r2, r3, r4
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005dc8:	bf08      	it	eq
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	6102      	str	r2, [r0, #16]
 8005dce:	bf08      	it	eq
 8005dd0:	6143      	streq	r3, [r0, #20]
 8005dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dd6:	f8dc c000 	ldr.w	ip, [ip]
 8005dda:	fa0c fc08 	lsl.w	ip, ip, r8
 8005dde:	ea4c 0707 	orr.w	r7, ip, r7
 8005de2:	f849 7b04 	str.w	r7, [r9], #4
 8005de6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dea:	40cf      	lsrs	r7, r1
 8005dec:	e7da      	b.n	8005da4 <rshift+0x4c>
 8005dee:	f851 cb04 	ldr.w	ip, [r1], #4
 8005df2:	f847 cf04 	str.w	ip, [r7, #4]!
 8005df6:	e7c3      	b.n	8005d80 <rshift+0x28>
 8005df8:	4623      	mov	r3, r4
 8005dfa:	e7e1      	b.n	8005dc0 <rshift+0x68>

08005dfc <__hexdig_fun>:
 8005dfc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005e00:	2b09      	cmp	r3, #9
 8005e02:	d802      	bhi.n	8005e0a <__hexdig_fun+0xe>
 8005e04:	3820      	subs	r0, #32
 8005e06:	b2c0      	uxtb	r0, r0
 8005e08:	4770      	bx	lr
 8005e0a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d801      	bhi.n	8005e16 <__hexdig_fun+0x1a>
 8005e12:	3847      	subs	r0, #71	@ 0x47
 8005e14:	e7f7      	b.n	8005e06 <__hexdig_fun+0xa>
 8005e16:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d801      	bhi.n	8005e22 <__hexdig_fun+0x26>
 8005e1e:	3827      	subs	r0, #39	@ 0x27
 8005e20:	e7f1      	b.n	8005e06 <__hexdig_fun+0xa>
 8005e22:	2000      	movs	r0, #0
 8005e24:	4770      	bx	lr
	...

08005e28 <__gethex>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	468a      	mov	sl, r1
 8005e30:	9302      	str	r3, [sp, #8]
 8005e32:	680b      	ldr	r3, [r1, #0]
 8005e34:	9001      	str	r0, [sp, #4]
 8005e36:	4690      	mov	r8, r2
 8005e38:	1c9c      	adds	r4, r3, #2
 8005e3a:	46a1      	mov	r9, r4
 8005e3c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005e40:	2830      	cmp	r0, #48	@ 0x30
 8005e42:	d0fa      	beq.n	8005e3a <__gethex+0x12>
 8005e44:	eba9 0303 	sub.w	r3, r9, r3
 8005e48:	f1a3 0b02 	sub.w	fp, r3, #2
 8005e4c:	f7ff ffd6 	bl	8005dfc <__hexdig_fun>
 8005e50:	4605      	mov	r5, r0
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d168      	bne.n	8005f28 <__gethex+0x100>
 8005e56:	49a0      	ldr	r1, [pc, #640]	@ (80060d8 <__gethex+0x2b0>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4648      	mov	r0, r9
 8005e5c:	f7ff fe8f 	bl	8005b7e <strncmp>
 8005e60:	4607      	mov	r7, r0
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d167      	bne.n	8005f36 <__gethex+0x10e>
 8005e66:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005e6a:	4626      	mov	r6, r4
 8005e6c:	f7ff ffc6 	bl	8005dfc <__hexdig_fun>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d062      	beq.n	8005f3a <__gethex+0x112>
 8005e74:	4623      	mov	r3, r4
 8005e76:	7818      	ldrb	r0, [r3, #0]
 8005e78:	2830      	cmp	r0, #48	@ 0x30
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	f103 0301 	add.w	r3, r3, #1
 8005e80:	d0f9      	beq.n	8005e76 <__gethex+0x4e>
 8005e82:	f7ff ffbb 	bl	8005dfc <__hexdig_fun>
 8005e86:	fab0 f580 	clz	r5, r0
 8005e8a:	096d      	lsrs	r5, r5, #5
 8005e8c:	f04f 0b01 	mov.w	fp, #1
 8005e90:	464a      	mov	r2, r9
 8005e92:	4616      	mov	r6, r2
 8005e94:	3201      	adds	r2, #1
 8005e96:	7830      	ldrb	r0, [r6, #0]
 8005e98:	f7ff ffb0 	bl	8005dfc <__hexdig_fun>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d1f8      	bne.n	8005e92 <__gethex+0x6a>
 8005ea0:	498d      	ldr	r1, [pc, #564]	@ (80060d8 <__gethex+0x2b0>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff fe6a 	bl	8005b7e <strncmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d13f      	bne.n	8005f2e <__gethex+0x106>
 8005eae:	b944      	cbnz	r4, 8005ec2 <__gethex+0x9a>
 8005eb0:	1c74      	adds	r4, r6, #1
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	7830      	ldrb	r0, [r6, #0]
 8005eba:	f7ff ff9f 	bl	8005dfc <__hexdig_fun>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d1f8      	bne.n	8005eb4 <__gethex+0x8c>
 8005ec2:	1ba4      	subs	r4, r4, r6
 8005ec4:	00a7      	lsls	r7, r4, #2
 8005ec6:	7833      	ldrb	r3, [r6, #0]
 8005ec8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005ecc:	2b50      	cmp	r3, #80	@ 0x50
 8005ece:	d13e      	bne.n	8005f4e <__gethex+0x126>
 8005ed0:	7873      	ldrb	r3, [r6, #1]
 8005ed2:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ed4:	d033      	beq.n	8005f3e <__gethex+0x116>
 8005ed6:	2b2d      	cmp	r3, #45	@ 0x2d
 8005ed8:	d034      	beq.n	8005f44 <__gethex+0x11c>
 8005eda:	1c71      	adds	r1, r6, #1
 8005edc:	2400      	movs	r4, #0
 8005ede:	7808      	ldrb	r0, [r1, #0]
 8005ee0:	f7ff ff8c 	bl	8005dfc <__hexdig_fun>
 8005ee4:	1e43      	subs	r3, r0, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b18      	cmp	r3, #24
 8005eea:	d830      	bhi.n	8005f4e <__gethex+0x126>
 8005eec:	f1a0 0210 	sub.w	r2, r0, #16
 8005ef0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ef4:	f7ff ff82 	bl	8005dfc <__hexdig_fun>
 8005ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8005efc:	fa5f fc8c 	uxtb.w	ip, ip
 8005f00:	f1bc 0f18 	cmp.w	ip, #24
 8005f04:	f04f 030a 	mov.w	r3, #10
 8005f08:	d91e      	bls.n	8005f48 <__gethex+0x120>
 8005f0a:	b104      	cbz	r4, 8005f0e <__gethex+0xe6>
 8005f0c:	4252      	negs	r2, r2
 8005f0e:	4417      	add	r7, r2
 8005f10:	f8ca 1000 	str.w	r1, [sl]
 8005f14:	b1ed      	cbz	r5, 8005f52 <__gethex+0x12a>
 8005f16:	f1bb 0f00 	cmp.w	fp, #0
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2506      	moveq	r5, #6
 8005f1e:	2500      	movne	r5, #0
 8005f20:	4628      	mov	r0, r5
 8005f22:	b005      	add	sp, #20
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f28:	2500      	movs	r5, #0
 8005f2a:	462c      	mov	r4, r5
 8005f2c:	e7b0      	b.n	8005e90 <__gethex+0x68>
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d1c7      	bne.n	8005ec2 <__gethex+0x9a>
 8005f32:	4627      	mov	r7, r4
 8005f34:	e7c7      	b.n	8005ec6 <__gethex+0x9e>
 8005f36:	464e      	mov	r6, r9
 8005f38:	462f      	mov	r7, r5
 8005f3a:	2501      	movs	r5, #1
 8005f3c:	e7c3      	b.n	8005ec6 <__gethex+0x9e>
 8005f3e:	2400      	movs	r4, #0
 8005f40:	1cb1      	adds	r1, r6, #2
 8005f42:	e7cc      	b.n	8005ede <__gethex+0xb6>
 8005f44:	2401      	movs	r4, #1
 8005f46:	e7fb      	b.n	8005f40 <__gethex+0x118>
 8005f48:	fb03 0002 	mla	r0, r3, r2, r0
 8005f4c:	e7ce      	b.n	8005eec <__gethex+0xc4>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	e7de      	b.n	8005f10 <__gethex+0xe8>
 8005f52:	eba6 0309 	sub.w	r3, r6, r9
 8005f56:	3b01      	subs	r3, #1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	2b07      	cmp	r3, #7
 8005f5c:	dc0a      	bgt.n	8005f74 <__gethex+0x14c>
 8005f5e:	9801      	ldr	r0, [sp, #4]
 8005f60:	f000 faf4 	bl	800654c <_Balloc>
 8005f64:	4604      	mov	r4, r0
 8005f66:	b940      	cbnz	r0, 8005f7a <__gethex+0x152>
 8005f68:	4b5c      	ldr	r3, [pc, #368]	@ (80060dc <__gethex+0x2b4>)
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	21e4      	movs	r1, #228	@ 0xe4
 8005f6e:	485c      	ldr	r0, [pc, #368]	@ (80060e0 <__gethex+0x2b8>)
 8005f70:	f001 fbca 	bl	8007708 <__assert_func>
 8005f74:	3101      	adds	r1, #1
 8005f76:	105b      	asrs	r3, r3, #1
 8005f78:	e7ef      	b.n	8005f5a <__gethex+0x132>
 8005f7a:	f100 0a14 	add.w	sl, r0, #20
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4655      	mov	r5, sl
 8005f82:	469b      	mov	fp, r3
 8005f84:	45b1      	cmp	r9, r6
 8005f86:	d337      	bcc.n	8005ff8 <__gethex+0x1d0>
 8005f88:	f845 bb04 	str.w	fp, [r5], #4
 8005f8c:	eba5 050a 	sub.w	r5, r5, sl
 8005f90:	10ad      	asrs	r5, r5, #2
 8005f92:	6125      	str	r5, [r4, #16]
 8005f94:	4658      	mov	r0, fp
 8005f96:	f000 fbcb 	bl	8006730 <__hi0bits>
 8005f9a:	016d      	lsls	r5, r5, #5
 8005f9c:	f8d8 6000 	ldr.w	r6, [r8]
 8005fa0:	1a2d      	subs	r5, r5, r0
 8005fa2:	42b5      	cmp	r5, r6
 8005fa4:	dd54      	ble.n	8006050 <__gethex+0x228>
 8005fa6:	1bad      	subs	r5, r5, r6
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 ff5f 	bl	8006e6e <__any_on>
 8005fb0:	4681      	mov	r9, r0
 8005fb2:	b178      	cbz	r0, 8005fd4 <__gethex+0x1ac>
 8005fb4:	1e6b      	subs	r3, r5, #1
 8005fb6:	1159      	asrs	r1, r3, #5
 8005fb8:	f003 021f 	and.w	r2, r3, #31
 8005fbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005fc0:	f04f 0901 	mov.w	r9, #1
 8005fc4:	fa09 f202 	lsl.w	r2, r9, r2
 8005fc8:	420a      	tst	r2, r1
 8005fca:	d003      	beq.n	8005fd4 <__gethex+0x1ac>
 8005fcc:	454b      	cmp	r3, r9
 8005fce:	dc36      	bgt.n	800603e <__gethex+0x216>
 8005fd0:	f04f 0902 	mov.w	r9, #2
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f7ff febe 	bl	8005d58 <rshift>
 8005fdc:	442f      	add	r7, r5
 8005fde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fe2:	42bb      	cmp	r3, r7
 8005fe4:	da42      	bge.n	800606c <__gethex+0x244>
 8005fe6:	9801      	ldr	r0, [sp, #4]
 8005fe8:	4621      	mov	r1, r4
 8005fea:	f000 faef 	bl	80065cc <_Bfree>
 8005fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	25a3      	movs	r5, #163	@ 0xa3
 8005ff6:	e793      	b.n	8005f20 <__gethex+0xf8>
 8005ff8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005ffc:	2a2e      	cmp	r2, #46	@ 0x2e
 8005ffe:	d012      	beq.n	8006026 <__gethex+0x1fe>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d104      	bne.n	800600e <__gethex+0x1e6>
 8006004:	f845 bb04 	str.w	fp, [r5], #4
 8006008:	f04f 0b00 	mov.w	fp, #0
 800600c:	465b      	mov	r3, fp
 800600e:	7830      	ldrb	r0, [r6, #0]
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	f7ff fef3 	bl	8005dfc <__hexdig_fun>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	f000 000f 	and.w	r0, r0, #15
 800601c:	4098      	lsls	r0, r3
 800601e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006022:	3304      	adds	r3, #4
 8006024:	e7ae      	b.n	8005f84 <__gethex+0x15c>
 8006026:	45b1      	cmp	r9, r6
 8006028:	d8ea      	bhi.n	8006000 <__gethex+0x1d8>
 800602a:	492b      	ldr	r1, [pc, #172]	@ (80060d8 <__gethex+0x2b0>)
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fda4 	bl	8005b7e <strncmp>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	2800      	cmp	r0, #0
 800603a:	d1e1      	bne.n	8006000 <__gethex+0x1d8>
 800603c:	e7a2      	b.n	8005f84 <__gethex+0x15c>
 800603e:	1ea9      	subs	r1, r5, #2
 8006040:	4620      	mov	r0, r4
 8006042:	f000 ff14 	bl	8006e6e <__any_on>
 8006046:	2800      	cmp	r0, #0
 8006048:	d0c2      	beq.n	8005fd0 <__gethex+0x1a8>
 800604a:	f04f 0903 	mov.w	r9, #3
 800604e:	e7c1      	b.n	8005fd4 <__gethex+0x1ac>
 8006050:	da09      	bge.n	8006066 <__gethex+0x23e>
 8006052:	1b75      	subs	r5, r6, r5
 8006054:	4621      	mov	r1, r4
 8006056:	9801      	ldr	r0, [sp, #4]
 8006058:	462a      	mov	r2, r5
 800605a:	f000 fccf 	bl	80069fc <__lshift>
 800605e:	1b7f      	subs	r7, r7, r5
 8006060:	4604      	mov	r4, r0
 8006062:	f100 0a14 	add.w	sl, r0, #20
 8006066:	f04f 0900 	mov.w	r9, #0
 800606a:	e7b8      	b.n	8005fde <__gethex+0x1b6>
 800606c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006070:	42bd      	cmp	r5, r7
 8006072:	dd6f      	ble.n	8006154 <__gethex+0x32c>
 8006074:	1bed      	subs	r5, r5, r7
 8006076:	42ae      	cmp	r6, r5
 8006078:	dc34      	bgt.n	80060e4 <__gethex+0x2bc>
 800607a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d022      	beq.n	80060c8 <__gethex+0x2a0>
 8006082:	2b03      	cmp	r3, #3
 8006084:	d024      	beq.n	80060d0 <__gethex+0x2a8>
 8006086:	2b01      	cmp	r3, #1
 8006088:	d115      	bne.n	80060b6 <__gethex+0x28e>
 800608a:	42ae      	cmp	r6, r5
 800608c:	d113      	bne.n	80060b6 <__gethex+0x28e>
 800608e:	2e01      	cmp	r6, #1
 8006090:	d10b      	bne.n	80060aa <__gethex+0x282>
 8006092:	9a02      	ldr	r2, [sp, #8]
 8006094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	2301      	movs	r3, #1
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	f8ca 3000 	str.w	r3, [sl]
 80060a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060a4:	2562      	movs	r5, #98	@ 0x62
 80060a6:	601c      	str	r4, [r3, #0]
 80060a8:	e73a      	b.n	8005f20 <__gethex+0xf8>
 80060aa:	1e71      	subs	r1, r6, #1
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fede 	bl	8006e6e <__any_on>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1ed      	bne.n	8006092 <__gethex+0x26a>
 80060b6:	9801      	ldr	r0, [sp, #4]
 80060b8:	4621      	mov	r1, r4
 80060ba:	f000 fa87 	bl	80065cc <_Bfree>
 80060be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060c0:	2300      	movs	r3, #0
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	2550      	movs	r5, #80	@ 0x50
 80060c6:	e72b      	b.n	8005f20 <__gethex+0xf8>
 80060c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f3      	bne.n	80060b6 <__gethex+0x28e>
 80060ce:	e7e0      	b.n	8006092 <__gethex+0x26a>
 80060d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1dd      	bne.n	8006092 <__gethex+0x26a>
 80060d6:	e7ee      	b.n	80060b6 <__gethex+0x28e>
 80060d8:	080079b0 	.word	0x080079b0
 80060dc:	08007b19 	.word	0x08007b19
 80060e0:	08007b2a 	.word	0x08007b2a
 80060e4:	1e6f      	subs	r7, r5, #1
 80060e6:	f1b9 0f00 	cmp.w	r9, #0
 80060ea:	d130      	bne.n	800614e <__gethex+0x326>
 80060ec:	b127      	cbz	r7, 80060f8 <__gethex+0x2d0>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 febc 	bl	8006e6e <__any_on>
 80060f6:	4681      	mov	r9, r0
 80060f8:	117a      	asrs	r2, r7, #5
 80060fa:	2301      	movs	r3, #1
 80060fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006100:	f007 071f 	and.w	r7, r7, #31
 8006104:	40bb      	lsls	r3, r7
 8006106:	4213      	tst	r3, r2
 8006108:	4629      	mov	r1, r5
 800610a:	4620      	mov	r0, r4
 800610c:	bf18      	it	ne
 800610e:	f049 0902 	orrne.w	r9, r9, #2
 8006112:	f7ff fe21 	bl	8005d58 <rshift>
 8006116:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800611a:	1b76      	subs	r6, r6, r5
 800611c:	2502      	movs	r5, #2
 800611e:	f1b9 0f00 	cmp.w	r9, #0
 8006122:	d047      	beq.n	80061b4 <__gethex+0x38c>
 8006124:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d015      	beq.n	8006158 <__gethex+0x330>
 800612c:	2b03      	cmp	r3, #3
 800612e:	d017      	beq.n	8006160 <__gethex+0x338>
 8006130:	2b01      	cmp	r3, #1
 8006132:	d109      	bne.n	8006148 <__gethex+0x320>
 8006134:	f019 0f02 	tst.w	r9, #2
 8006138:	d006      	beq.n	8006148 <__gethex+0x320>
 800613a:	f8da 3000 	ldr.w	r3, [sl]
 800613e:	ea49 0903 	orr.w	r9, r9, r3
 8006142:	f019 0f01 	tst.w	r9, #1
 8006146:	d10e      	bne.n	8006166 <__gethex+0x33e>
 8006148:	f045 0510 	orr.w	r5, r5, #16
 800614c:	e032      	b.n	80061b4 <__gethex+0x38c>
 800614e:	f04f 0901 	mov.w	r9, #1
 8006152:	e7d1      	b.n	80060f8 <__gethex+0x2d0>
 8006154:	2501      	movs	r5, #1
 8006156:	e7e2      	b.n	800611e <__gethex+0x2f6>
 8006158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800615a:	f1c3 0301 	rsb	r3, r3, #1
 800615e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <__gethex+0x320>
 8006166:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800616a:	f104 0314 	add.w	r3, r4, #20
 800616e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006172:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006176:	f04f 0c00 	mov.w	ip, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006180:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006184:	d01b      	beq.n	80061be <__gethex+0x396>
 8006186:	3201      	adds	r2, #1
 8006188:	6002      	str	r2, [r0, #0]
 800618a:	2d02      	cmp	r5, #2
 800618c:	f104 0314 	add.w	r3, r4, #20
 8006190:	d13c      	bne.n	800620c <__gethex+0x3e4>
 8006192:	f8d8 2000 	ldr.w	r2, [r8]
 8006196:	3a01      	subs	r2, #1
 8006198:	42b2      	cmp	r2, r6
 800619a:	d109      	bne.n	80061b0 <__gethex+0x388>
 800619c:	1171      	asrs	r1, r6, #5
 800619e:	2201      	movs	r2, #1
 80061a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061a4:	f006 061f 	and.w	r6, r6, #31
 80061a8:	fa02 f606 	lsl.w	r6, r2, r6
 80061ac:	421e      	tst	r6, r3
 80061ae:	d13a      	bne.n	8006226 <__gethex+0x3fe>
 80061b0:	f045 0520 	orr.w	r5, r5, #32
 80061b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061b6:	601c      	str	r4, [r3, #0]
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	601f      	str	r7, [r3, #0]
 80061bc:	e6b0      	b.n	8005f20 <__gethex+0xf8>
 80061be:	4299      	cmp	r1, r3
 80061c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80061c4:	d8d9      	bhi.n	800617a <__gethex+0x352>
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	459b      	cmp	fp, r3
 80061ca:	db17      	blt.n	80061fc <__gethex+0x3d4>
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	9801      	ldr	r0, [sp, #4]
 80061d0:	3101      	adds	r1, #1
 80061d2:	f000 f9bb 	bl	800654c <_Balloc>
 80061d6:	4681      	mov	r9, r0
 80061d8:	b918      	cbnz	r0, 80061e2 <__gethex+0x3ba>
 80061da:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <__gethex+0x41c>)
 80061dc:	4602      	mov	r2, r0
 80061de:	2184      	movs	r1, #132	@ 0x84
 80061e0:	e6c5      	b.n	8005f6e <__gethex+0x146>
 80061e2:	6922      	ldr	r2, [r4, #16]
 80061e4:	3202      	adds	r2, #2
 80061e6:	f104 010c 	add.w	r1, r4, #12
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	300c      	adds	r0, #12
 80061ee:	f7ff fd4c 	bl	8005c8a <memcpy>
 80061f2:	4621      	mov	r1, r4
 80061f4:	9801      	ldr	r0, [sp, #4]
 80061f6:	f000 f9e9 	bl	80065cc <_Bfree>
 80061fa:	464c      	mov	r4, r9
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006204:	6122      	str	r2, [r4, #16]
 8006206:	2201      	movs	r2, #1
 8006208:	615a      	str	r2, [r3, #20]
 800620a:	e7be      	b.n	800618a <__gethex+0x362>
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	455a      	cmp	r2, fp
 8006210:	dd0b      	ble.n	800622a <__gethex+0x402>
 8006212:	2101      	movs	r1, #1
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff fd9f 	bl	8005d58 <rshift>
 800621a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800621e:	3701      	adds	r7, #1
 8006220:	42bb      	cmp	r3, r7
 8006222:	f6ff aee0 	blt.w	8005fe6 <__gethex+0x1be>
 8006226:	2501      	movs	r5, #1
 8006228:	e7c2      	b.n	80061b0 <__gethex+0x388>
 800622a:	f016 061f 	ands.w	r6, r6, #31
 800622e:	d0fa      	beq.n	8006226 <__gethex+0x3fe>
 8006230:	4453      	add	r3, sl
 8006232:	f1c6 0620 	rsb	r6, r6, #32
 8006236:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800623a:	f000 fa79 	bl	8006730 <__hi0bits>
 800623e:	42b0      	cmp	r0, r6
 8006240:	dbe7      	blt.n	8006212 <__gethex+0x3ea>
 8006242:	e7f0      	b.n	8006226 <__gethex+0x3fe>
 8006244:	08007b19 	.word	0x08007b19

08006248 <L_shift>:
 8006248:	f1c2 0208 	rsb	r2, r2, #8
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	b570      	push	{r4, r5, r6, lr}
 8006250:	f1c2 0620 	rsb	r6, r2, #32
 8006254:	6843      	ldr	r3, [r0, #4]
 8006256:	6804      	ldr	r4, [r0, #0]
 8006258:	fa03 f506 	lsl.w	r5, r3, r6
 800625c:	432c      	orrs	r4, r5
 800625e:	40d3      	lsrs	r3, r2
 8006260:	6004      	str	r4, [r0, #0]
 8006262:	f840 3f04 	str.w	r3, [r0, #4]!
 8006266:	4288      	cmp	r0, r1
 8006268:	d3f4      	bcc.n	8006254 <L_shift+0xc>
 800626a:	bd70      	pop	{r4, r5, r6, pc}

0800626c <__match>:
 800626c:	b530      	push	{r4, r5, lr}
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006276:	b914      	cbnz	r4, 800627e <__match+0x12>
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	2001      	movs	r0, #1
 800627c:	bd30      	pop	{r4, r5, pc}
 800627e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006282:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006286:	2d19      	cmp	r5, #25
 8006288:	bf98      	it	ls
 800628a:	3220      	addls	r2, #32
 800628c:	42a2      	cmp	r2, r4
 800628e:	d0f0      	beq.n	8006272 <__match+0x6>
 8006290:	2000      	movs	r0, #0
 8006292:	e7f3      	b.n	800627c <__match+0x10>

08006294 <__hexnan>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	680b      	ldr	r3, [r1, #0]
 800629a:	6801      	ldr	r1, [r0, #0]
 800629c:	115e      	asrs	r6, r3, #5
 800629e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80062a2:	f013 031f 	ands.w	r3, r3, #31
 80062a6:	b087      	sub	sp, #28
 80062a8:	bf18      	it	ne
 80062aa:	3604      	addne	r6, #4
 80062ac:	2500      	movs	r5, #0
 80062ae:	1f37      	subs	r7, r6, #4
 80062b0:	4682      	mov	sl, r0
 80062b2:	4690      	mov	r8, r2
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80062ba:	46b9      	mov	r9, r7
 80062bc:	463c      	mov	r4, r7
 80062be:	9502      	str	r5, [sp, #8]
 80062c0:	46ab      	mov	fp, r5
 80062c2:	784a      	ldrb	r2, [r1, #1]
 80062c4:	1c4b      	adds	r3, r1, #1
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	b342      	cbz	r2, 800631c <__hexnan+0x88>
 80062ca:	4610      	mov	r0, r2
 80062cc:	9105      	str	r1, [sp, #20]
 80062ce:	9204      	str	r2, [sp, #16]
 80062d0:	f7ff fd94 	bl	8005dfc <__hexdig_fun>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d151      	bne.n	800637c <__hexnan+0xe8>
 80062d8:	9a04      	ldr	r2, [sp, #16]
 80062da:	9905      	ldr	r1, [sp, #20]
 80062dc:	2a20      	cmp	r2, #32
 80062de:	d818      	bhi.n	8006312 <__hexnan+0x7e>
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	459b      	cmp	fp, r3
 80062e4:	dd13      	ble.n	800630e <__hexnan+0x7a>
 80062e6:	454c      	cmp	r4, r9
 80062e8:	d206      	bcs.n	80062f8 <__hexnan+0x64>
 80062ea:	2d07      	cmp	r5, #7
 80062ec:	dc04      	bgt.n	80062f8 <__hexnan+0x64>
 80062ee:	462a      	mov	r2, r5
 80062f0:	4649      	mov	r1, r9
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff ffa8 	bl	8006248 <L_shift>
 80062f8:	4544      	cmp	r4, r8
 80062fa:	d952      	bls.n	80063a2 <__hexnan+0x10e>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f1a4 0904 	sub.w	r9, r4, #4
 8006302:	f844 3c04 	str.w	r3, [r4, #-4]
 8006306:	f8cd b008 	str.w	fp, [sp, #8]
 800630a:	464c      	mov	r4, r9
 800630c:	461d      	mov	r5, r3
 800630e:	9903      	ldr	r1, [sp, #12]
 8006310:	e7d7      	b.n	80062c2 <__hexnan+0x2e>
 8006312:	2a29      	cmp	r2, #41	@ 0x29
 8006314:	d157      	bne.n	80063c6 <__hexnan+0x132>
 8006316:	3102      	adds	r1, #2
 8006318:	f8ca 1000 	str.w	r1, [sl]
 800631c:	f1bb 0f00 	cmp.w	fp, #0
 8006320:	d051      	beq.n	80063c6 <__hexnan+0x132>
 8006322:	454c      	cmp	r4, r9
 8006324:	d206      	bcs.n	8006334 <__hexnan+0xa0>
 8006326:	2d07      	cmp	r5, #7
 8006328:	dc04      	bgt.n	8006334 <__hexnan+0xa0>
 800632a:	462a      	mov	r2, r5
 800632c:	4649      	mov	r1, r9
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff ff8a 	bl	8006248 <L_shift>
 8006334:	4544      	cmp	r4, r8
 8006336:	d936      	bls.n	80063a6 <__hexnan+0x112>
 8006338:	f1a8 0204 	sub.w	r2, r8, #4
 800633c:	4623      	mov	r3, r4
 800633e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006342:	f842 1f04 	str.w	r1, [r2, #4]!
 8006346:	429f      	cmp	r7, r3
 8006348:	d2f9      	bcs.n	800633e <__hexnan+0xaa>
 800634a:	1b3b      	subs	r3, r7, r4
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	3304      	adds	r3, #4
 8006352:	3401      	adds	r4, #1
 8006354:	3e03      	subs	r6, #3
 8006356:	42b4      	cmp	r4, r6
 8006358:	bf88      	it	hi
 800635a:	2304      	movhi	r3, #4
 800635c:	4443      	add	r3, r8
 800635e:	2200      	movs	r2, #0
 8006360:	f843 2b04 	str.w	r2, [r3], #4
 8006364:	429f      	cmp	r7, r3
 8006366:	d2fb      	bcs.n	8006360 <__hexnan+0xcc>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	b91b      	cbnz	r3, 8006374 <__hexnan+0xe0>
 800636c:	4547      	cmp	r7, r8
 800636e:	d128      	bne.n	80063c2 <__hexnan+0x12e>
 8006370:	2301      	movs	r3, #1
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	2005      	movs	r0, #5
 8006376:	b007      	add	sp, #28
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	2d08      	cmp	r5, #8
 8006380:	f10b 0b01 	add.w	fp, fp, #1
 8006384:	dd06      	ble.n	8006394 <__hexnan+0x100>
 8006386:	4544      	cmp	r4, r8
 8006388:	d9c1      	bls.n	800630e <__hexnan+0x7a>
 800638a:	2300      	movs	r3, #0
 800638c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006390:	2501      	movs	r5, #1
 8006392:	3c04      	subs	r4, #4
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	f000 000f 	and.w	r0, r0, #15
 800639a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	e7b5      	b.n	800630e <__hexnan+0x7a>
 80063a2:	2508      	movs	r5, #8
 80063a4:	e7b3      	b.n	800630e <__hexnan+0x7a>
 80063a6:	9b01      	ldr	r3, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0dd      	beq.n	8006368 <__hexnan+0xd4>
 80063ac:	f1c3 0320 	rsb	r3, r3, #32
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	40da      	lsrs	r2, r3
 80063b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80063ba:	4013      	ands	r3, r2
 80063bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80063c0:	e7d2      	b.n	8006368 <__hexnan+0xd4>
 80063c2:	3f04      	subs	r7, #4
 80063c4:	e7d0      	b.n	8006368 <__hexnan+0xd4>
 80063c6:	2004      	movs	r0, #4
 80063c8:	e7d5      	b.n	8006376 <__hexnan+0xe2>
	...

080063cc <sbrk_aligned>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4e0f      	ldr	r6, [pc, #60]	@ (800640c <sbrk_aligned+0x40>)
 80063d0:	460c      	mov	r4, r1
 80063d2:	6831      	ldr	r1, [r6, #0]
 80063d4:	4605      	mov	r5, r0
 80063d6:	b911      	cbnz	r1, 80063de <sbrk_aligned+0x12>
 80063d8:	f001 f986 	bl	80076e8 <_sbrk_r>
 80063dc:	6030      	str	r0, [r6, #0]
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f001 f981 	bl	80076e8 <_sbrk_r>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d103      	bne.n	80063f2 <sbrk_aligned+0x26>
 80063ea:	f04f 34ff 	mov.w	r4, #4294967295
 80063ee:	4620      	mov	r0, r4
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	1cc4      	adds	r4, r0, #3
 80063f4:	f024 0403 	bic.w	r4, r4, #3
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d0f8      	beq.n	80063ee <sbrk_aligned+0x22>
 80063fc:	1a21      	subs	r1, r4, r0
 80063fe:	4628      	mov	r0, r5
 8006400:	f001 f972 	bl	80076e8 <_sbrk_r>
 8006404:	3001      	adds	r0, #1
 8006406:	d1f2      	bne.n	80063ee <sbrk_aligned+0x22>
 8006408:	e7ef      	b.n	80063ea <sbrk_aligned+0x1e>
 800640a:	bf00      	nop
 800640c:	20000490 	.word	0x20000490

08006410 <_malloc_r>:
 8006410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006414:	1ccd      	adds	r5, r1, #3
 8006416:	f025 0503 	bic.w	r5, r5, #3
 800641a:	3508      	adds	r5, #8
 800641c:	2d0c      	cmp	r5, #12
 800641e:	bf38      	it	cc
 8006420:	250c      	movcc	r5, #12
 8006422:	2d00      	cmp	r5, #0
 8006424:	4606      	mov	r6, r0
 8006426:	db01      	blt.n	800642c <_malloc_r+0x1c>
 8006428:	42a9      	cmp	r1, r5
 800642a:	d904      	bls.n	8006436 <_malloc_r+0x26>
 800642c:	230c      	movs	r3, #12
 800642e:	6033      	str	r3, [r6, #0]
 8006430:	2000      	movs	r0, #0
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800650c <_malloc_r+0xfc>
 800643a:	f000 f87b 	bl	8006534 <__malloc_lock>
 800643e:	f8d8 3000 	ldr.w	r3, [r8]
 8006442:	461c      	mov	r4, r3
 8006444:	bb44      	cbnz	r4, 8006498 <_malloc_r+0x88>
 8006446:	4629      	mov	r1, r5
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ffbf 	bl	80063cc <sbrk_aligned>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	4604      	mov	r4, r0
 8006452:	d158      	bne.n	8006506 <_malloc_r+0xf6>
 8006454:	f8d8 4000 	ldr.w	r4, [r8]
 8006458:	4627      	mov	r7, r4
 800645a:	2f00      	cmp	r7, #0
 800645c:	d143      	bne.n	80064e6 <_malloc_r+0xd6>
 800645e:	2c00      	cmp	r4, #0
 8006460:	d04b      	beq.n	80064fa <_malloc_r+0xea>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	4639      	mov	r1, r7
 8006466:	4630      	mov	r0, r6
 8006468:	eb04 0903 	add.w	r9, r4, r3
 800646c:	f001 f93c 	bl	80076e8 <_sbrk_r>
 8006470:	4581      	cmp	r9, r0
 8006472:	d142      	bne.n	80064fa <_malloc_r+0xea>
 8006474:	6821      	ldr	r1, [r4, #0]
 8006476:	1a6d      	subs	r5, r5, r1
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f7ff ffa6 	bl	80063cc <sbrk_aligned>
 8006480:	3001      	adds	r0, #1
 8006482:	d03a      	beq.n	80064fa <_malloc_r+0xea>
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	442b      	add	r3, r5
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	f8d8 3000 	ldr.w	r3, [r8]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	bb62      	cbnz	r2, 80064ec <_malloc_r+0xdc>
 8006492:	f8c8 7000 	str.w	r7, [r8]
 8006496:	e00f      	b.n	80064b8 <_malloc_r+0xa8>
 8006498:	6822      	ldr	r2, [r4, #0]
 800649a:	1b52      	subs	r2, r2, r5
 800649c:	d420      	bmi.n	80064e0 <_malloc_r+0xd0>
 800649e:	2a0b      	cmp	r2, #11
 80064a0:	d917      	bls.n	80064d2 <_malloc_r+0xc2>
 80064a2:	1961      	adds	r1, r4, r5
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	6025      	str	r5, [r4, #0]
 80064a8:	bf18      	it	ne
 80064aa:	6059      	strne	r1, [r3, #4]
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	bf08      	it	eq
 80064b0:	f8c8 1000 	streq.w	r1, [r8]
 80064b4:	5162      	str	r2, [r4, r5]
 80064b6:	604b      	str	r3, [r1, #4]
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f841 	bl	8006540 <__malloc_unlock>
 80064be:	f104 000b 	add.w	r0, r4, #11
 80064c2:	1d23      	adds	r3, r4, #4
 80064c4:	f020 0007 	bic.w	r0, r0, #7
 80064c8:	1ac2      	subs	r2, r0, r3
 80064ca:	bf1c      	itt	ne
 80064cc:	1a1b      	subne	r3, r3, r0
 80064ce:	50a3      	strne	r3, [r4, r2]
 80064d0:	e7af      	b.n	8006432 <_malloc_r+0x22>
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	bf0c      	ite	eq
 80064d8:	f8c8 2000 	streq.w	r2, [r8]
 80064dc:	605a      	strne	r2, [r3, #4]
 80064de:	e7eb      	b.n	80064b8 <_malloc_r+0xa8>
 80064e0:	4623      	mov	r3, r4
 80064e2:	6864      	ldr	r4, [r4, #4]
 80064e4:	e7ae      	b.n	8006444 <_malloc_r+0x34>
 80064e6:	463c      	mov	r4, r7
 80064e8:	687f      	ldr	r7, [r7, #4]
 80064ea:	e7b6      	b.n	800645a <_malloc_r+0x4a>
 80064ec:	461a      	mov	r2, r3
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	d1fb      	bne.n	80064ec <_malloc_r+0xdc>
 80064f4:	2300      	movs	r3, #0
 80064f6:	6053      	str	r3, [r2, #4]
 80064f8:	e7de      	b.n	80064b8 <_malloc_r+0xa8>
 80064fa:	230c      	movs	r3, #12
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 f81e 	bl	8006540 <__malloc_unlock>
 8006504:	e794      	b.n	8006430 <_malloc_r+0x20>
 8006506:	6005      	str	r5, [r0, #0]
 8006508:	e7d6      	b.n	80064b8 <_malloc_r+0xa8>
 800650a:	bf00      	nop
 800650c:	20000494 	.word	0x20000494

08006510 <__ascii_mbtowc>:
 8006510:	b082      	sub	sp, #8
 8006512:	b901      	cbnz	r1, 8006516 <__ascii_mbtowc+0x6>
 8006514:	a901      	add	r1, sp, #4
 8006516:	b142      	cbz	r2, 800652a <__ascii_mbtowc+0x1a>
 8006518:	b14b      	cbz	r3, 800652e <__ascii_mbtowc+0x1e>
 800651a:	7813      	ldrb	r3, [r2, #0]
 800651c:	600b      	str	r3, [r1, #0]
 800651e:	7812      	ldrb	r2, [r2, #0]
 8006520:	1e10      	subs	r0, r2, #0
 8006522:	bf18      	it	ne
 8006524:	2001      	movne	r0, #1
 8006526:	b002      	add	sp, #8
 8006528:	4770      	bx	lr
 800652a:	4610      	mov	r0, r2
 800652c:	e7fb      	b.n	8006526 <__ascii_mbtowc+0x16>
 800652e:	f06f 0001 	mvn.w	r0, #1
 8006532:	e7f8      	b.n	8006526 <__ascii_mbtowc+0x16>

08006534 <__malloc_lock>:
 8006534:	4801      	ldr	r0, [pc, #4]	@ (800653c <__malloc_lock+0x8>)
 8006536:	f7ff bba6 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	2000048c 	.word	0x2000048c

08006540 <__malloc_unlock>:
 8006540:	4801      	ldr	r0, [pc, #4]	@ (8006548 <__malloc_unlock+0x8>)
 8006542:	f7ff bba1 	b.w	8005c88 <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	2000048c 	.word	0x2000048c

0800654c <_Balloc>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	69c6      	ldr	r6, [r0, #28]
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	b976      	cbnz	r6, 8006574 <_Balloc+0x28>
 8006556:	2010      	movs	r0, #16
 8006558:	f001 f908 	bl	800776c <malloc>
 800655c:	4602      	mov	r2, r0
 800655e:	61e0      	str	r0, [r4, #28]
 8006560:	b920      	cbnz	r0, 800656c <_Balloc+0x20>
 8006562:	4b18      	ldr	r3, [pc, #96]	@ (80065c4 <_Balloc+0x78>)
 8006564:	4818      	ldr	r0, [pc, #96]	@ (80065c8 <_Balloc+0x7c>)
 8006566:	216b      	movs	r1, #107	@ 0x6b
 8006568:	f001 f8ce 	bl	8007708 <__assert_func>
 800656c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006570:	6006      	str	r6, [r0, #0]
 8006572:	60c6      	str	r6, [r0, #12]
 8006574:	69e6      	ldr	r6, [r4, #28]
 8006576:	68f3      	ldr	r3, [r6, #12]
 8006578:	b183      	cbz	r3, 800659c <_Balloc+0x50>
 800657a:	69e3      	ldr	r3, [r4, #28]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006582:	b9b8      	cbnz	r0, 80065b4 <_Balloc+0x68>
 8006584:	2101      	movs	r1, #1
 8006586:	fa01 f605 	lsl.w	r6, r1, r5
 800658a:	1d72      	adds	r2, r6, #5
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	4620      	mov	r0, r4
 8006590:	f001 f8d8 	bl	8007744 <_calloc_r>
 8006594:	b160      	cbz	r0, 80065b0 <_Balloc+0x64>
 8006596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800659a:	e00e      	b.n	80065ba <_Balloc+0x6e>
 800659c:	2221      	movs	r2, #33	@ 0x21
 800659e:	2104      	movs	r1, #4
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 f8cf 	bl	8007744 <_calloc_r>
 80065a6:	69e3      	ldr	r3, [r4, #28]
 80065a8:	60f0      	str	r0, [r6, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <_Balloc+0x2e>
 80065b0:	2000      	movs	r0, #0
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	6802      	ldr	r2, [r0, #0]
 80065b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ba:	2300      	movs	r3, #0
 80065bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065c0:	e7f7      	b.n	80065b2 <_Balloc+0x66>
 80065c2:	bf00      	nop
 80065c4:	08007b8a 	.word	0x08007b8a
 80065c8:	08007ba1 	.word	0x08007ba1

080065cc <_Bfree>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	69c6      	ldr	r6, [r0, #28]
 80065d0:	4605      	mov	r5, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	b976      	cbnz	r6, 80065f4 <_Bfree+0x28>
 80065d6:	2010      	movs	r0, #16
 80065d8:	f001 f8c8 	bl	800776c <malloc>
 80065dc:	4602      	mov	r2, r0
 80065de:	61e8      	str	r0, [r5, #28]
 80065e0:	b920      	cbnz	r0, 80065ec <_Bfree+0x20>
 80065e2:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <_Bfree+0x3c>)
 80065e4:	4809      	ldr	r0, [pc, #36]	@ (800660c <_Bfree+0x40>)
 80065e6:	218f      	movs	r1, #143	@ 0x8f
 80065e8:	f001 f88e 	bl	8007708 <__assert_func>
 80065ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065f0:	6006      	str	r6, [r0, #0]
 80065f2:	60c6      	str	r6, [r0, #12]
 80065f4:	b13c      	cbz	r4, 8006606 <_Bfree+0x3a>
 80065f6:	69eb      	ldr	r3, [r5, #28]
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006600:	6021      	str	r1, [r4, #0]
 8006602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	08007b8a 	.word	0x08007b8a
 800660c:	08007ba1 	.word	0x08007ba1

08006610 <__multadd>:
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	690d      	ldr	r5, [r1, #16]
 8006616:	4607      	mov	r7, r0
 8006618:	460c      	mov	r4, r1
 800661a:	461e      	mov	r6, r3
 800661c:	f101 0c14 	add.w	ip, r1, #20
 8006620:	2000      	movs	r0, #0
 8006622:	f8dc 3000 	ldr.w	r3, [ip]
 8006626:	b299      	uxth	r1, r3
 8006628:	fb02 6101 	mla	r1, r2, r1, r6
 800662c:	0c1e      	lsrs	r6, r3, #16
 800662e:	0c0b      	lsrs	r3, r1, #16
 8006630:	fb02 3306 	mla	r3, r2, r6, r3
 8006634:	b289      	uxth	r1, r1
 8006636:	3001      	adds	r0, #1
 8006638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800663c:	4285      	cmp	r5, r0
 800663e:	f84c 1b04 	str.w	r1, [ip], #4
 8006642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006646:	dcec      	bgt.n	8006622 <__multadd+0x12>
 8006648:	b30e      	cbz	r6, 800668e <__multadd+0x7e>
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	42ab      	cmp	r3, r5
 800664e:	dc19      	bgt.n	8006684 <__multadd+0x74>
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4638      	mov	r0, r7
 8006654:	3101      	adds	r1, #1
 8006656:	f7ff ff79 	bl	800654c <_Balloc>
 800665a:	4680      	mov	r8, r0
 800665c:	b928      	cbnz	r0, 800666a <__multadd+0x5a>
 800665e:	4602      	mov	r2, r0
 8006660:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <__multadd+0x84>)
 8006662:	480d      	ldr	r0, [pc, #52]	@ (8006698 <__multadd+0x88>)
 8006664:	21ba      	movs	r1, #186	@ 0xba
 8006666:	f001 f84f 	bl	8007708 <__assert_func>
 800666a:	6922      	ldr	r2, [r4, #16]
 800666c:	3202      	adds	r2, #2
 800666e:	f104 010c 	add.w	r1, r4, #12
 8006672:	0092      	lsls	r2, r2, #2
 8006674:	300c      	adds	r0, #12
 8006676:	f7ff fb08 	bl	8005c8a <memcpy>
 800667a:	4621      	mov	r1, r4
 800667c:	4638      	mov	r0, r7
 800667e:	f7ff ffa5 	bl	80065cc <_Bfree>
 8006682:	4644      	mov	r4, r8
 8006684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006688:	3501      	adds	r5, #1
 800668a:	615e      	str	r6, [r3, #20]
 800668c:	6125      	str	r5, [r4, #16]
 800668e:	4620      	mov	r0, r4
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006694:	08007b19 	.word	0x08007b19
 8006698:	08007ba1 	.word	0x08007ba1

0800669c <__s2b>:
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	4615      	mov	r5, r2
 80066a4:	461f      	mov	r7, r3
 80066a6:	2209      	movs	r2, #9
 80066a8:	3308      	adds	r3, #8
 80066aa:	4606      	mov	r6, r0
 80066ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b0:	2100      	movs	r1, #0
 80066b2:	2201      	movs	r2, #1
 80066b4:	429a      	cmp	r2, r3
 80066b6:	db09      	blt.n	80066cc <__s2b+0x30>
 80066b8:	4630      	mov	r0, r6
 80066ba:	f7ff ff47 	bl	800654c <_Balloc>
 80066be:	b940      	cbnz	r0, 80066d2 <__s2b+0x36>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b19      	ldr	r3, [pc, #100]	@ (8006728 <__s2b+0x8c>)
 80066c4:	4819      	ldr	r0, [pc, #100]	@ (800672c <__s2b+0x90>)
 80066c6:	21d3      	movs	r1, #211	@ 0xd3
 80066c8:	f001 f81e 	bl	8007708 <__assert_func>
 80066cc:	0052      	lsls	r2, r2, #1
 80066ce:	3101      	adds	r1, #1
 80066d0:	e7f0      	b.n	80066b4 <__s2b+0x18>
 80066d2:	9b08      	ldr	r3, [sp, #32]
 80066d4:	6143      	str	r3, [r0, #20]
 80066d6:	2d09      	cmp	r5, #9
 80066d8:	f04f 0301 	mov.w	r3, #1
 80066dc:	6103      	str	r3, [r0, #16]
 80066de:	dd16      	ble.n	800670e <__s2b+0x72>
 80066e0:	f104 0909 	add.w	r9, r4, #9
 80066e4:	46c8      	mov	r8, r9
 80066e6:	442c      	add	r4, r5
 80066e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066ec:	4601      	mov	r1, r0
 80066ee:	3b30      	subs	r3, #48	@ 0x30
 80066f0:	220a      	movs	r2, #10
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ff8c 	bl	8006610 <__multadd>
 80066f8:	45a0      	cmp	r8, r4
 80066fa:	d1f5      	bne.n	80066e8 <__s2b+0x4c>
 80066fc:	f1a5 0408 	sub.w	r4, r5, #8
 8006700:	444c      	add	r4, r9
 8006702:	1b2d      	subs	r5, r5, r4
 8006704:	1963      	adds	r3, r4, r5
 8006706:	42bb      	cmp	r3, r7
 8006708:	db04      	blt.n	8006714 <__s2b+0x78>
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	340a      	adds	r4, #10
 8006710:	2509      	movs	r5, #9
 8006712:	e7f6      	b.n	8006702 <__s2b+0x66>
 8006714:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006718:	4601      	mov	r1, r0
 800671a:	3b30      	subs	r3, #48	@ 0x30
 800671c:	220a      	movs	r2, #10
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff76 	bl	8006610 <__multadd>
 8006724:	e7ee      	b.n	8006704 <__s2b+0x68>
 8006726:	bf00      	nop
 8006728:	08007b19 	.word	0x08007b19
 800672c:	08007ba1 	.word	0x08007ba1

08006730 <__hi0bits>:
 8006730:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006734:	4603      	mov	r3, r0
 8006736:	bf36      	itet	cc
 8006738:	0403      	lslcc	r3, r0, #16
 800673a:	2000      	movcs	r0, #0
 800673c:	2010      	movcc	r0, #16
 800673e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006742:	bf3c      	itt	cc
 8006744:	021b      	lslcc	r3, r3, #8
 8006746:	3008      	addcc	r0, #8
 8006748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800674c:	bf3c      	itt	cc
 800674e:	011b      	lslcc	r3, r3, #4
 8006750:	3004      	addcc	r0, #4
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	bf3c      	itt	cc
 8006758:	009b      	lslcc	r3, r3, #2
 800675a:	3002      	addcc	r0, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	db05      	blt.n	800676c <__hi0bits+0x3c>
 8006760:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006764:	f100 0001 	add.w	r0, r0, #1
 8006768:	bf08      	it	eq
 800676a:	2020      	moveq	r0, #32
 800676c:	4770      	bx	lr

0800676e <__lo0bits>:
 800676e:	6803      	ldr	r3, [r0, #0]
 8006770:	4602      	mov	r2, r0
 8006772:	f013 0007 	ands.w	r0, r3, #7
 8006776:	d00b      	beq.n	8006790 <__lo0bits+0x22>
 8006778:	07d9      	lsls	r1, r3, #31
 800677a:	d421      	bmi.n	80067c0 <__lo0bits+0x52>
 800677c:	0798      	lsls	r0, r3, #30
 800677e:	bf49      	itett	mi
 8006780:	085b      	lsrmi	r3, r3, #1
 8006782:	089b      	lsrpl	r3, r3, #2
 8006784:	2001      	movmi	r0, #1
 8006786:	6013      	strmi	r3, [r2, #0]
 8006788:	bf5c      	itt	pl
 800678a:	6013      	strpl	r3, [r2, #0]
 800678c:	2002      	movpl	r0, #2
 800678e:	4770      	bx	lr
 8006790:	b299      	uxth	r1, r3
 8006792:	b909      	cbnz	r1, 8006798 <__lo0bits+0x2a>
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	2010      	movs	r0, #16
 8006798:	b2d9      	uxtb	r1, r3
 800679a:	b909      	cbnz	r1, 80067a0 <__lo0bits+0x32>
 800679c:	3008      	adds	r0, #8
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	0719      	lsls	r1, r3, #28
 80067a2:	bf04      	itt	eq
 80067a4:	091b      	lsreq	r3, r3, #4
 80067a6:	3004      	addeq	r0, #4
 80067a8:	0799      	lsls	r1, r3, #30
 80067aa:	bf04      	itt	eq
 80067ac:	089b      	lsreq	r3, r3, #2
 80067ae:	3002      	addeq	r0, #2
 80067b0:	07d9      	lsls	r1, r3, #31
 80067b2:	d403      	bmi.n	80067bc <__lo0bits+0x4e>
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	f100 0001 	add.w	r0, r0, #1
 80067ba:	d003      	beq.n	80067c4 <__lo0bits+0x56>
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4770      	bx	lr
 80067c0:	2000      	movs	r0, #0
 80067c2:	4770      	bx	lr
 80067c4:	2020      	movs	r0, #32
 80067c6:	4770      	bx	lr

080067c8 <__i2b>:
 80067c8:	b510      	push	{r4, lr}
 80067ca:	460c      	mov	r4, r1
 80067cc:	2101      	movs	r1, #1
 80067ce:	f7ff febd 	bl	800654c <_Balloc>
 80067d2:	4602      	mov	r2, r0
 80067d4:	b928      	cbnz	r0, 80067e2 <__i2b+0x1a>
 80067d6:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <__i2b+0x24>)
 80067d8:	4805      	ldr	r0, [pc, #20]	@ (80067f0 <__i2b+0x28>)
 80067da:	f240 1145 	movw	r1, #325	@ 0x145
 80067de:	f000 ff93 	bl	8007708 <__assert_func>
 80067e2:	2301      	movs	r3, #1
 80067e4:	6144      	str	r4, [r0, #20]
 80067e6:	6103      	str	r3, [r0, #16]
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	08007b19 	.word	0x08007b19
 80067f0:	08007ba1 	.word	0x08007ba1

080067f4 <__multiply>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	4614      	mov	r4, r2
 80067fa:	690a      	ldr	r2, [r1, #16]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bfa8      	it	ge
 8006802:	4623      	movge	r3, r4
 8006804:	460f      	mov	r7, r1
 8006806:	bfa4      	itt	ge
 8006808:	460c      	movge	r4, r1
 800680a:	461f      	movge	r7, r3
 800680c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006810:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	6861      	ldr	r1, [r4, #4]
 8006818:	eb0a 0609 	add.w	r6, sl, r9
 800681c:	42b3      	cmp	r3, r6
 800681e:	b085      	sub	sp, #20
 8006820:	bfb8      	it	lt
 8006822:	3101      	addlt	r1, #1
 8006824:	f7ff fe92 	bl	800654c <_Balloc>
 8006828:	b930      	cbnz	r0, 8006838 <__multiply+0x44>
 800682a:	4602      	mov	r2, r0
 800682c:	4b44      	ldr	r3, [pc, #272]	@ (8006940 <__multiply+0x14c>)
 800682e:	4845      	ldr	r0, [pc, #276]	@ (8006944 <__multiply+0x150>)
 8006830:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006834:	f000 ff68 	bl	8007708 <__assert_func>
 8006838:	f100 0514 	add.w	r5, r0, #20
 800683c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006840:	462b      	mov	r3, r5
 8006842:	2200      	movs	r2, #0
 8006844:	4543      	cmp	r3, r8
 8006846:	d321      	bcc.n	800688c <__multiply+0x98>
 8006848:	f107 0114 	add.w	r1, r7, #20
 800684c:	f104 0214 	add.w	r2, r4, #20
 8006850:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006854:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	1b13      	subs	r3, r2, r4
 800685c:	3b15      	subs	r3, #21
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	3304      	adds	r3, #4
 8006864:	f104 0715 	add.w	r7, r4, #21
 8006868:	42ba      	cmp	r2, r7
 800686a:	bf38      	it	cc
 800686c:	2304      	movcc	r3, #4
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	9103      	str	r1, [sp, #12]
 8006874:	428b      	cmp	r3, r1
 8006876:	d80c      	bhi.n	8006892 <__multiply+0x9e>
 8006878:	2e00      	cmp	r6, #0
 800687a:	dd03      	ble.n	8006884 <__multiply+0x90>
 800687c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05b      	beq.n	800693c <__multiply+0x148>
 8006884:	6106      	str	r6, [r0, #16]
 8006886:	b005      	add	sp, #20
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	f843 2b04 	str.w	r2, [r3], #4
 8006890:	e7d8      	b.n	8006844 <__multiply+0x50>
 8006892:	f8b1 a000 	ldrh.w	sl, [r1]
 8006896:	f1ba 0f00 	cmp.w	sl, #0
 800689a:	d024      	beq.n	80068e6 <__multiply+0xf2>
 800689c:	f104 0e14 	add.w	lr, r4, #20
 80068a0:	46a9      	mov	r9, r5
 80068a2:	f04f 0c00 	mov.w	ip, #0
 80068a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80068aa:	f8d9 3000 	ldr.w	r3, [r9]
 80068ae:	fa1f fb87 	uxth.w	fp, r7
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80068b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80068bc:	f8d9 7000 	ldr.w	r7, [r9]
 80068c0:	4463      	add	r3, ip
 80068c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80068ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068d4:	4572      	cmp	r2, lr
 80068d6:	f849 3b04 	str.w	r3, [r9], #4
 80068da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068de:	d8e2      	bhi.n	80068a6 <__multiply+0xb2>
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	f845 c003 	str.w	ip, [r5, r3]
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80068ec:	3104      	adds	r1, #4
 80068ee:	f1b9 0f00 	cmp.w	r9, #0
 80068f2:	d021      	beq.n	8006938 <__multiply+0x144>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	f104 0c14 	add.w	ip, r4, #20
 80068fa:	46ae      	mov	lr, r5
 80068fc:	f04f 0a00 	mov.w	sl, #0
 8006900:	f8bc b000 	ldrh.w	fp, [ip]
 8006904:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006908:	fb09 770b 	mla	r7, r9, fp, r7
 800690c:	4457      	add	r7, sl
 800690e:	b29b      	uxth	r3, r3
 8006910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006914:	f84e 3b04 	str.w	r3, [lr], #4
 8006918:	f85c 3b04 	ldr.w	r3, [ip], #4
 800691c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006920:	f8be 3000 	ldrh.w	r3, [lr]
 8006924:	fb09 330a 	mla	r3, r9, sl, r3
 8006928:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800692c:	4562      	cmp	r2, ip
 800692e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006932:	d8e5      	bhi.n	8006900 <__multiply+0x10c>
 8006934:	9f01      	ldr	r7, [sp, #4]
 8006936:	51eb      	str	r3, [r5, r7]
 8006938:	3504      	adds	r5, #4
 800693a:	e799      	b.n	8006870 <__multiply+0x7c>
 800693c:	3e01      	subs	r6, #1
 800693e:	e79b      	b.n	8006878 <__multiply+0x84>
 8006940:	08007b19 	.word	0x08007b19
 8006944:	08007ba1 	.word	0x08007ba1

08006948 <__pow5mult>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4615      	mov	r5, r2
 800694e:	f012 0203 	ands.w	r2, r2, #3
 8006952:	4607      	mov	r7, r0
 8006954:	460e      	mov	r6, r1
 8006956:	d007      	beq.n	8006968 <__pow5mult+0x20>
 8006958:	4c25      	ldr	r4, [pc, #148]	@ (80069f0 <__pow5mult+0xa8>)
 800695a:	3a01      	subs	r2, #1
 800695c:	2300      	movs	r3, #0
 800695e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006962:	f7ff fe55 	bl	8006610 <__multadd>
 8006966:	4606      	mov	r6, r0
 8006968:	10ad      	asrs	r5, r5, #2
 800696a:	d03d      	beq.n	80069e8 <__pow5mult+0xa0>
 800696c:	69fc      	ldr	r4, [r7, #28]
 800696e:	b97c      	cbnz	r4, 8006990 <__pow5mult+0x48>
 8006970:	2010      	movs	r0, #16
 8006972:	f000 fefb 	bl	800776c <malloc>
 8006976:	4602      	mov	r2, r0
 8006978:	61f8      	str	r0, [r7, #28]
 800697a:	b928      	cbnz	r0, 8006988 <__pow5mult+0x40>
 800697c:	4b1d      	ldr	r3, [pc, #116]	@ (80069f4 <__pow5mult+0xac>)
 800697e:	481e      	ldr	r0, [pc, #120]	@ (80069f8 <__pow5mult+0xb0>)
 8006980:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006984:	f000 fec0 	bl	8007708 <__assert_func>
 8006988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800698c:	6004      	str	r4, [r0, #0]
 800698e:	60c4      	str	r4, [r0, #12]
 8006990:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006998:	b94c      	cbnz	r4, 80069ae <__pow5mult+0x66>
 800699a:	f240 2171 	movw	r1, #625	@ 0x271
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ff12 	bl	80067c8 <__i2b>
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80069aa:	4604      	mov	r4, r0
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	f04f 0900 	mov.w	r9, #0
 80069b2:	07eb      	lsls	r3, r5, #31
 80069b4:	d50a      	bpl.n	80069cc <__pow5mult+0x84>
 80069b6:	4631      	mov	r1, r6
 80069b8:	4622      	mov	r2, r4
 80069ba:	4638      	mov	r0, r7
 80069bc:	f7ff ff1a 	bl	80067f4 <__multiply>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4680      	mov	r8, r0
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff fe01 	bl	80065cc <_Bfree>
 80069ca:	4646      	mov	r6, r8
 80069cc:	106d      	asrs	r5, r5, #1
 80069ce:	d00b      	beq.n	80069e8 <__pow5mult+0xa0>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	b938      	cbnz	r0, 80069e4 <__pow5mult+0x9c>
 80069d4:	4622      	mov	r2, r4
 80069d6:	4621      	mov	r1, r4
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff ff0b 	bl	80067f4 <__multiply>
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	f8c0 9000 	str.w	r9, [r0]
 80069e4:	4604      	mov	r4, r0
 80069e6:	e7e4      	b.n	80069b2 <__pow5mult+0x6a>
 80069e8:	4630      	mov	r0, r6
 80069ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ee:	bf00      	nop
 80069f0:	08007bfc 	.word	0x08007bfc
 80069f4:	08007b8a 	.word	0x08007b8a
 80069f8:	08007ba1 	.word	0x08007ba1

080069fc <__lshift>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	6849      	ldr	r1, [r1, #4]
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	4691      	mov	r9, r2
 8006a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a14:	f108 0601 	add.w	r6, r8, #1
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	db0b      	blt.n	8006a34 <__lshift+0x38>
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff fd95 	bl	800654c <_Balloc>
 8006a22:	4605      	mov	r5, r0
 8006a24:	b948      	cbnz	r0, 8006a3a <__lshift+0x3e>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b28      	ldr	r3, [pc, #160]	@ (8006acc <__lshift+0xd0>)
 8006a2a:	4829      	ldr	r0, [pc, #164]	@ (8006ad0 <__lshift+0xd4>)
 8006a2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a30:	f000 fe6a 	bl	8007708 <__assert_func>
 8006a34:	3101      	adds	r1, #1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	e7ee      	b.n	8006a18 <__lshift+0x1c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f100 0114 	add.w	r1, r0, #20
 8006a40:	f100 0210 	add.w	r2, r0, #16
 8006a44:	4618      	mov	r0, r3
 8006a46:	4553      	cmp	r3, sl
 8006a48:	db33      	blt.n	8006ab2 <__lshift+0xb6>
 8006a4a:	6920      	ldr	r0, [r4, #16]
 8006a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a50:	f104 0314 	add.w	r3, r4, #20
 8006a54:	f019 091f 	ands.w	r9, r9, #31
 8006a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a60:	d02b      	beq.n	8006aba <__lshift+0xbe>
 8006a62:	f1c9 0e20 	rsb	lr, r9, #32
 8006a66:	468a      	mov	sl, r1
 8006a68:	2200      	movs	r2, #0
 8006a6a:	6818      	ldr	r0, [r3, #0]
 8006a6c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a70:	4310      	orrs	r0, r2
 8006a72:	f84a 0b04 	str.w	r0, [sl], #4
 8006a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7a:	459c      	cmp	ip, r3
 8006a7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a80:	d8f3      	bhi.n	8006a6a <__lshift+0x6e>
 8006a82:	ebac 0304 	sub.w	r3, ip, r4
 8006a86:	3b15      	subs	r3, #21
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	f104 0015 	add.w	r0, r4, #21
 8006a92:	4584      	cmp	ip, r0
 8006a94:	bf38      	it	cc
 8006a96:	2304      	movcc	r3, #4
 8006a98:	50ca      	str	r2, [r1, r3]
 8006a9a:	b10a      	cbz	r2, 8006aa0 <__lshift+0xa4>
 8006a9c:	f108 0602 	add.w	r6, r8, #2
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	612e      	str	r6, [r5, #16]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	f7ff fd90 	bl	80065cc <_Bfree>
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	e7c5      	b.n	8006a46 <__lshift+0x4a>
 8006aba:	3904      	subs	r1, #4
 8006abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ac4:	459c      	cmp	ip, r3
 8006ac6:	d8f9      	bhi.n	8006abc <__lshift+0xc0>
 8006ac8:	e7ea      	b.n	8006aa0 <__lshift+0xa4>
 8006aca:	bf00      	nop
 8006acc:	08007b19 	.word	0x08007b19
 8006ad0:	08007ba1 	.word	0x08007ba1

08006ad4 <__mcmp>:
 8006ad4:	690a      	ldr	r2, [r1, #16]
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6900      	ldr	r0, [r0, #16]
 8006ada:	1a80      	subs	r0, r0, r2
 8006adc:	b530      	push	{r4, r5, lr}
 8006ade:	d10e      	bne.n	8006afe <__mcmp+0x2a>
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	3114      	adds	r1, #20
 8006ae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006af4:	4295      	cmp	r5, r2
 8006af6:	d003      	beq.n	8006b00 <__mcmp+0x2c>
 8006af8:	d205      	bcs.n	8006b06 <__mcmp+0x32>
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	bd30      	pop	{r4, r5, pc}
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d3f3      	bcc.n	8006aec <__mcmp+0x18>
 8006b04:	e7fb      	b.n	8006afe <__mcmp+0x2a>
 8006b06:	2001      	movs	r0, #1
 8006b08:	e7f9      	b.n	8006afe <__mcmp+0x2a>
	...

08006b0c <__mdiff>:
 8006b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4689      	mov	r9, r1
 8006b12:	4606      	mov	r6, r0
 8006b14:	4611      	mov	r1, r2
 8006b16:	4648      	mov	r0, r9
 8006b18:	4614      	mov	r4, r2
 8006b1a:	f7ff ffdb 	bl	8006ad4 <__mcmp>
 8006b1e:	1e05      	subs	r5, r0, #0
 8006b20:	d112      	bne.n	8006b48 <__mdiff+0x3c>
 8006b22:	4629      	mov	r1, r5
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7ff fd11 	bl	800654c <_Balloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__mdiff+0x2e>
 8006b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c2c <__mdiff+0x120>)
 8006b30:	f240 2137 	movw	r1, #567	@ 0x237
 8006b34:	483e      	ldr	r0, [pc, #248]	@ (8006c30 <__mdiff+0x124>)
 8006b36:	f000 fde7 	bl	8007708 <__assert_func>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b40:	4610      	mov	r0, r2
 8006b42:	b003      	add	sp, #12
 8006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b48:	bfbc      	itt	lt
 8006b4a:	464b      	movlt	r3, r9
 8006b4c:	46a1      	movlt	r9, r4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b54:	bfba      	itte	lt
 8006b56:	461c      	movlt	r4, r3
 8006b58:	2501      	movlt	r5, #1
 8006b5a:	2500      	movge	r5, #0
 8006b5c:	f7ff fcf6 	bl	800654c <_Balloc>
 8006b60:	4602      	mov	r2, r0
 8006b62:	b918      	cbnz	r0, 8006b6c <__mdiff+0x60>
 8006b64:	4b31      	ldr	r3, [pc, #196]	@ (8006c2c <__mdiff+0x120>)
 8006b66:	f240 2145 	movw	r1, #581	@ 0x245
 8006b6a:	e7e3      	b.n	8006b34 <__mdiff+0x28>
 8006b6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b70:	6926      	ldr	r6, [r4, #16]
 8006b72:	60c5      	str	r5, [r0, #12]
 8006b74:	f109 0310 	add.w	r3, r9, #16
 8006b78:	f109 0514 	add.w	r5, r9, #20
 8006b7c:	f104 0e14 	add.w	lr, r4, #20
 8006b80:	f100 0b14 	add.w	fp, r0, #20
 8006b84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	46d9      	mov	r9, fp
 8006b90:	f04f 0c00 	mov.w	ip, #0
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	fa1f f38a 	uxth.w	r3, sl
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	b283      	uxth	r3, r0
 8006ba8:	1acb      	subs	r3, r1, r3
 8006baa:	0c00      	lsrs	r0, r0, #16
 8006bac:	4463      	add	r3, ip
 8006bae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006bb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006bbc:	4576      	cmp	r6, lr
 8006bbe:	f849 3b04 	str.w	r3, [r9], #4
 8006bc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bc6:	d8e5      	bhi.n	8006b94 <__mdiff+0x88>
 8006bc8:	1b33      	subs	r3, r6, r4
 8006bca:	3b15      	subs	r3, #21
 8006bcc:	f023 0303 	bic.w	r3, r3, #3
 8006bd0:	3415      	adds	r4, #21
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	42a6      	cmp	r6, r4
 8006bd6:	bf38      	it	cc
 8006bd8:	2304      	movcc	r3, #4
 8006bda:	441d      	add	r5, r3
 8006bdc:	445b      	add	r3, fp
 8006bde:	461e      	mov	r6, r3
 8006be0:	462c      	mov	r4, r5
 8006be2:	4544      	cmp	r4, r8
 8006be4:	d30e      	bcc.n	8006c04 <__mdiff+0xf8>
 8006be6:	f108 0103 	add.w	r1, r8, #3
 8006bea:	1b49      	subs	r1, r1, r5
 8006bec:	f021 0103 	bic.w	r1, r1, #3
 8006bf0:	3d03      	subs	r5, #3
 8006bf2:	45a8      	cmp	r8, r5
 8006bf4:	bf38      	it	cc
 8006bf6:	2100      	movcc	r1, #0
 8006bf8:	440b      	add	r3, r1
 8006bfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bfe:	b191      	cbz	r1, 8006c26 <__mdiff+0x11a>
 8006c00:	6117      	str	r7, [r2, #16]
 8006c02:	e79d      	b.n	8006b40 <__mdiff+0x34>
 8006c04:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c08:	46e6      	mov	lr, ip
 8006c0a:	0c08      	lsrs	r0, r1, #16
 8006c0c:	fa1c fc81 	uxtah	ip, ip, r1
 8006c10:	4471      	add	r1, lr
 8006c12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c16:	b289      	uxth	r1, r1
 8006c18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c1c:	f846 1b04 	str.w	r1, [r6], #4
 8006c20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c24:	e7dd      	b.n	8006be2 <__mdiff+0xd6>
 8006c26:	3f01      	subs	r7, #1
 8006c28:	e7e7      	b.n	8006bfa <__mdiff+0xee>
 8006c2a:	bf00      	nop
 8006c2c:	08007b19 	.word	0x08007b19
 8006c30:	08007ba1 	.word	0x08007ba1

08006c34 <__ulp>:
 8006c34:	b082      	sub	sp, #8
 8006c36:	ed8d 0b00 	vstr	d0, [sp]
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <__ulp+0x48>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dc08      	bgt.n	8006c5a <__ulp+0x26>
 8006c48:	425b      	negs	r3, r3
 8006c4a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006c4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c52:	da04      	bge.n	8006c5e <__ulp+0x2a>
 8006c54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006c58:	4113      	asrs	r3, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	e008      	b.n	8006c70 <__ulp+0x3c>
 8006c5e:	f1a2 0314 	sub.w	r3, r2, #20
 8006c62:	2b1e      	cmp	r3, #30
 8006c64:	bfda      	itte	le
 8006c66:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006c6a:	40da      	lsrle	r2, r3
 8006c6c:	2201      	movgt	r2, #1
 8006c6e:	2300      	movs	r3, #0
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	ec41 0b10 	vmov	d0, r0, r1
 8006c78:	b002      	add	sp, #8
 8006c7a:	4770      	bx	lr
 8006c7c:	7ff00000 	.word	0x7ff00000

08006c80 <__b2d>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	6906      	ldr	r6, [r0, #16]
 8006c86:	f100 0814 	add.w	r8, r0, #20
 8006c8a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006c8e:	1f37      	subs	r7, r6, #4
 8006c90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006c94:	4610      	mov	r0, r2
 8006c96:	f7ff fd4b 	bl	8006730 <__hi0bits>
 8006c9a:	f1c0 0320 	rsb	r3, r0, #32
 8006c9e:	280a      	cmp	r0, #10
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	491b      	ldr	r1, [pc, #108]	@ (8006d10 <__b2d+0x90>)
 8006ca4:	dc15      	bgt.n	8006cd2 <__b2d+0x52>
 8006ca6:	f1c0 0c0b 	rsb	ip, r0, #11
 8006caa:	fa22 f30c 	lsr.w	r3, r2, ip
 8006cae:	45b8      	cmp	r8, r7
 8006cb0:	ea43 0501 	orr.w	r5, r3, r1
 8006cb4:	bf34      	ite	cc
 8006cb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006cba:	2300      	movcs	r3, #0
 8006cbc:	3015      	adds	r0, #21
 8006cbe:	fa02 f000 	lsl.w	r0, r2, r0
 8006cc2:	fa23 f30c 	lsr.w	r3, r3, ip
 8006cc6:	4303      	orrs	r3, r0
 8006cc8:	461c      	mov	r4, r3
 8006cca:	ec45 4b10 	vmov	d0, r4, r5
 8006cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd2:	45b8      	cmp	r8, r7
 8006cd4:	bf3a      	itte	cc
 8006cd6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006cda:	f1a6 0708 	subcc.w	r7, r6, #8
 8006cde:	2300      	movcs	r3, #0
 8006ce0:	380b      	subs	r0, #11
 8006ce2:	d012      	beq.n	8006d0a <__b2d+0x8a>
 8006ce4:	f1c0 0120 	rsb	r1, r0, #32
 8006ce8:	fa23 f401 	lsr.w	r4, r3, r1
 8006cec:	4082      	lsls	r2, r0
 8006cee:	4322      	orrs	r2, r4
 8006cf0:	4547      	cmp	r7, r8
 8006cf2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006cf6:	bf8c      	ite	hi
 8006cf8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006cfc:	2200      	movls	r2, #0
 8006cfe:	4083      	lsls	r3, r0
 8006d00:	40ca      	lsrs	r2, r1
 8006d02:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006d06:	4313      	orrs	r3, r2
 8006d08:	e7de      	b.n	8006cc8 <__b2d+0x48>
 8006d0a:	ea42 0501 	orr.w	r5, r2, r1
 8006d0e:	e7db      	b.n	8006cc8 <__b2d+0x48>
 8006d10:	3ff00000 	.word	0x3ff00000

08006d14 <__d2b>:
 8006d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d18:	460f      	mov	r7, r1
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	ec59 8b10 	vmov	r8, r9, d0
 8006d20:	4616      	mov	r6, r2
 8006d22:	f7ff fc13 	bl	800654c <_Balloc>
 8006d26:	4604      	mov	r4, r0
 8006d28:	b930      	cbnz	r0, 8006d38 <__d2b+0x24>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	4b23      	ldr	r3, [pc, #140]	@ (8006dbc <__d2b+0xa8>)
 8006d2e:	4824      	ldr	r0, [pc, #144]	@ (8006dc0 <__d2b+0xac>)
 8006d30:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d34:	f000 fce8 	bl	8007708 <__assert_func>
 8006d38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d40:	b10d      	cbz	r5, 8006d46 <__d2b+0x32>
 8006d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	f1b8 0300 	subs.w	r3, r8, #0
 8006d4c:	d023      	beq.n	8006d96 <__d2b+0x82>
 8006d4e:	4668      	mov	r0, sp
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	f7ff fd0c 	bl	800676e <__lo0bits>
 8006d56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d5a:	b1d0      	cbz	r0, 8006d92 <__d2b+0x7e>
 8006d5c:	f1c0 0320 	rsb	r3, r0, #32
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	430b      	orrs	r3, r1
 8006d66:	40c2      	lsrs	r2, r0
 8006d68:	6163      	str	r3, [r4, #20]
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9b01      	ldr	r3, [sp, #4]
 8006d6e:	61a3      	str	r3, [r4, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bf0c      	ite	eq
 8006d74:	2201      	moveq	r2, #1
 8006d76:	2202      	movne	r2, #2
 8006d78:	6122      	str	r2, [r4, #16]
 8006d7a:	b1a5      	cbz	r5, 8006da6 <__d2b+0x92>
 8006d7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d80:	4405      	add	r5, r0
 8006d82:	603d      	str	r5, [r7, #0]
 8006d84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d88:	6030      	str	r0, [r6, #0]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	b003      	add	sp, #12
 8006d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d92:	6161      	str	r1, [r4, #20]
 8006d94:	e7ea      	b.n	8006d6c <__d2b+0x58>
 8006d96:	a801      	add	r0, sp, #4
 8006d98:	f7ff fce9 	bl	800676e <__lo0bits>
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	6163      	str	r3, [r4, #20]
 8006da0:	3020      	adds	r0, #32
 8006da2:	2201      	movs	r2, #1
 8006da4:	e7e8      	b.n	8006d78 <__d2b+0x64>
 8006da6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006daa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006dae:	6038      	str	r0, [r7, #0]
 8006db0:	6918      	ldr	r0, [r3, #16]
 8006db2:	f7ff fcbd 	bl	8006730 <__hi0bits>
 8006db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dba:	e7e5      	b.n	8006d88 <__d2b+0x74>
 8006dbc:	08007b19 	.word	0x08007b19
 8006dc0:	08007ba1 	.word	0x08007ba1

08006dc4 <__ratio>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	e9cd 1000 	strd	r1, r0, [sp]
 8006dce:	a902      	add	r1, sp, #8
 8006dd0:	f7ff ff56 	bl	8006c80 <__b2d>
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	a903      	add	r1, sp, #12
 8006dd8:	ec55 4b10 	vmov	r4, r5, d0
 8006ddc:	f7ff ff50 	bl	8006c80 <__b2d>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	6919      	ldr	r1, [r3, #16]
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	1ac9      	subs	r1, r1, r3
 8006dea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	ec5b ab10 	vmov	sl, fp, d0
 8006df4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfce      	itee	gt
 8006dfc:	462a      	movgt	r2, r5
 8006dfe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e02:	465a      	movle	r2, fp
 8006e04:	462f      	mov	r7, r5
 8006e06:	46d9      	mov	r9, fp
 8006e08:	bfcc      	ite	gt
 8006e0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e0e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006e12:	464b      	mov	r3, r9
 8006e14:	4652      	mov	r2, sl
 8006e16:	4620      	mov	r0, r4
 8006e18:	4639      	mov	r1, r7
 8006e1a:	f7f9 fd0f 	bl	800083c <__aeabi_ddiv>
 8006e1e:	ec41 0b10 	vmov	d0, r0, r1
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e28 <__copybits>:
 8006e28:	3901      	subs	r1, #1
 8006e2a:	b570      	push	{r4, r5, r6, lr}
 8006e2c:	1149      	asrs	r1, r1, #5
 8006e2e:	6914      	ldr	r4, [r2, #16]
 8006e30:	3101      	adds	r1, #1
 8006e32:	f102 0314 	add.w	r3, r2, #20
 8006e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e3e:	1f05      	subs	r5, r0, #4
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d30c      	bcc.n	8006e5e <__copybits+0x36>
 8006e44:	1aa3      	subs	r3, r4, r2
 8006e46:	3b11      	subs	r3, #17
 8006e48:	f023 0303 	bic.w	r3, r3, #3
 8006e4c:	3211      	adds	r2, #17
 8006e4e:	42a2      	cmp	r2, r4
 8006e50:	bf88      	it	hi
 8006e52:	2300      	movhi	r3, #0
 8006e54:	4418      	add	r0, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4288      	cmp	r0, r1
 8006e5a:	d305      	bcc.n	8006e68 <__copybits+0x40>
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
 8006e5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e62:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e66:	e7eb      	b.n	8006e40 <__copybits+0x18>
 8006e68:	f840 3b04 	str.w	r3, [r0], #4
 8006e6c:	e7f4      	b.n	8006e58 <__copybits+0x30>

08006e6e <__any_on>:
 8006e6e:	f100 0214 	add.w	r2, r0, #20
 8006e72:	6900      	ldr	r0, [r0, #16]
 8006e74:	114b      	asrs	r3, r1, #5
 8006e76:	4298      	cmp	r0, r3
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	db11      	blt.n	8006ea0 <__any_on+0x32>
 8006e7c:	dd0a      	ble.n	8006e94 <__any_on+0x26>
 8006e7e:	f011 011f 	ands.w	r1, r1, #31
 8006e82:	d007      	beq.n	8006e94 <__any_on+0x26>
 8006e84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e88:	fa24 f001 	lsr.w	r0, r4, r1
 8006e8c:	fa00 f101 	lsl.w	r1, r0, r1
 8006e90:	428c      	cmp	r4, r1
 8006e92:	d10b      	bne.n	8006eac <__any_on+0x3e>
 8006e94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d803      	bhi.n	8006ea4 <__any_on+0x36>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	e7f7      	b.n	8006e94 <__any_on+0x26>
 8006ea4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0f5      	beq.n	8006e98 <__any_on+0x2a>
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7f6      	b.n	8006e9e <__any_on+0x30>

08006eb0 <__ascii_wctomb>:
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	b141      	cbz	r1, 8006ec8 <__ascii_wctomb+0x18>
 8006eb6:	2aff      	cmp	r2, #255	@ 0xff
 8006eb8:	d904      	bls.n	8006ec4 <__ascii_wctomb+0x14>
 8006eba:	228a      	movs	r2, #138	@ 0x8a
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	4770      	bx	lr
 8006ec4:	700a      	strb	r2, [r1, #0]
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	4770      	bx	lr

08006eca <__sfputc_r>:
 8006eca:	6893      	ldr	r3, [r2, #8]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	b410      	push	{r4}
 8006ed2:	6093      	str	r3, [r2, #8]
 8006ed4:	da08      	bge.n	8006ee8 <__sfputc_r+0x1e>
 8006ed6:	6994      	ldr	r4, [r2, #24]
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	db01      	blt.n	8006ee0 <__sfputc_r+0x16>
 8006edc:	290a      	cmp	r1, #10
 8006ede:	d103      	bne.n	8006ee8 <__sfputc_r+0x1e>
 8006ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee4:	f000 bb6c 	b.w	80075c0 <__swbuf_r>
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	1c58      	adds	r0, r3, #1
 8006eec:	6010      	str	r0, [r2, #0]
 8006eee:	7019      	strb	r1, [r3, #0]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <__sfputs_r>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	4606      	mov	r6, r0
 8006efc:	460f      	mov	r7, r1
 8006efe:	4614      	mov	r4, r2
 8006f00:	18d5      	adds	r5, r2, r3
 8006f02:	42ac      	cmp	r4, r5
 8006f04:	d101      	bne.n	8006f0a <__sfputs_r+0x12>
 8006f06:	2000      	movs	r0, #0
 8006f08:	e007      	b.n	8006f1a <__sfputs_r+0x22>
 8006f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0e:	463a      	mov	r2, r7
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ffda 	bl	8006eca <__sfputc_r>
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d1f3      	bne.n	8006f02 <__sfputs_r+0xa>
 8006f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f1c <_vfiprintf_r>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	460d      	mov	r5, r1
 8006f22:	b09d      	sub	sp, #116	@ 0x74
 8006f24:	4614      	mov	r4, r2
 8006f26:	4698      	mov	r8, r3
 8006f28:	4606      	mov	r6, r0
 8006f2a:	b118      	cbz	r0, 8006f34 <_vfiprintf_r+0x18>
 8006f2c:	6a03      	ldr	r3, [r0, #32]
 8006f2e:	b90b      	cbnz	r3, 8006f34 <_vfiprintf_r+0x18>
 8006f30:	f7fe fd92 	bl	8005a58 <__sinit>
 8006f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f36:	07d9      	lsls	r1, r3, #31
 8006f38:	d405      	bmi.n	8006f46 <_vfiprintf_r+0x2a>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	059a      	lsls	r2, r3, #22
 8006f3e:	d402      	bmi.n	8006f46 <_vfiprintf_r+0x2a>
 8006f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f42:	f7fe fea0 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8006f46:	89ab      	ldrh	r3, [r5, #12]
 8006f48:	071b      	lsls	r3, r3, #28
 8006f4a:	d501      	bpl.n	8006f50 <_vfiprintf_r+0x34>
 8006f4c:	692b      	ldr	r3, [r5, #16]
 8006f4e:	b99b      	cbnz	r3, 8006f78 <_vfiprintf_r+0x5c>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	f000 fb72 	bl	800763c <__swsetup_r>
 8006f58:	b170      	cbz	r0, 8006f78 <_vfiprintf_r+0x5c>
 8006f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f5c:	07dc      	lsls	r4, r3, #31
 8006f5e:	d504      	bpl.n	8006f6a <_vfiprintf_r+0x4e>
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	b01d      	add	sp, #116	@ 0x74
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6a:	89ab      	ldrh	r3, [r5, #12]
 8006f6c:	0598      	lsls	r0, r3, #22
 8006f6e:	d4f7      	bmi.n	8006f60 <_vfiprintf_r+0x44>
 8006f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f72:	f7fe fe89 	bl	8005c88 <__retarget_lock_release_recursive>
 8006f76:	e7f3      	b.n	8006f60 <_vfiprintf_r+0x44>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f86:	2330      	movs	r3, #48	@ 0x30
 8006f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007138 <_vfiprintf_r+0x21c>
 8006f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f90:	f04f 0901 	mov.w	r9, #1
 8006f94:	4623      	mov	r3, r4
 8006f96:	469a      	mov	sl, r3
 8006f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f9c:	b10a      	cbz	r2, 8006fa2 <_vfiprintf_r+0x86>
 8006f9e:	2a25      	cmp	r2, #37	@ 0x25
 8006fa0:	d1f9      	bne.n	8006f96 <_vfiprintf_r+0x7a>
 8006fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8006fa6:	d00b      	beq.n	8006fc0 <_vfiprintf_r+0xa4>
 8006fa8:	465b      	mov	r3, fp
 8006faa:	4622      	mov	r2, r4
 8006fac:	4629      	mov	r1, r5
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ffa2 	bl	8006ef8 <__sfputs_r>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f000 80a7 	beq.w	8007108 <_vfiprintf_r+0x1ec>
 8006fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fbc:	445a      	add	r2, fp
 8006fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 809f 	beq.w	8007108 <_vfiprintf_r+0x1ec>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd4:	f10a 0a01 	add.w	sl, sl, #1
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	9307      	str	r3, [sp, #28]
 8006fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fe2:	4654      	mov	r4, sl
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fea:	4853      	ldr	r0, [pc, #332]	@ (8007138 <_vfiprintf_r+0x21c>)
 8006fec:	f7f9 f8f0 	bl	80001d0 <memchr>
 8006ff0:	9a04      	ldr	r2, [sp, #16]
 8006ff2:	b9d8      	cbnz	r0, 800702c <_vfiprintf_r+0x110>
 8006ff4:	06d1      	lsls	r1, r2, #27
 8006ff6:	bf44      	itt	mi
 8006ff8:	2320      	movmi	r3, #32
 8006ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ffe:	0713      	lsls	r3, r2, #28
 8007000:	bf44      	itt	mi
 8007002:	232b      	movmi	r3, #43	@ 0x2b
 8007004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007008:	f89a 3000 	ldrb.w	r3, [sl]
 800700c:	2b2a      	cmp	r3, #42	@ 0x2a
 800700e:	d015      	beq.n	800703c <_vfiprintf_r+0x120>
 8007010:	9a07      	ldr	r2, [sp, #28]
 8007012:	4654      	mov	r4, sl
 8007014:	2000      	movs	r0, #0
 8007016:	f04f 0c0a 	mov.w	ip, #10
 800701a:	4621      	mov	r1, r4
 800701c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007020:	3b30      	subs	r3, #48	@ 0x30
 8007022:	2b09      	cmp	r3, #9
 8007024:	d94b      	bls.n	80070be <_vfiprintf_r+0x1a2>
 8007026:	b1b0      	cbz	r0, 8007056 <_vfiprintf_r+0x13a>
 8007028:	9207      	str	r2, [sp, #28]
 800702a:	e014      	b.n	8007056 <_vfiprintf_r+0x13a>
 800702c:	eba0 0308 	sub.w	r3, r0, r8
 8007030:	fa09 f303 	lsl.w	r3, r9, r3
 8007034:	4313      	orrs	r3, r2
 8007036:	9304      	str	r3, [sp, #16]
 8007038:	46a2      	mov	sl, r4
 800703a:	e7d2      	b.n	8006fe2 <_vfiprintf_r+0xc6>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	1d19      	adds	r1, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	9103      	str	r1, [sp, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	bfbb      	ittet	lt
 8007048:	425b      	neglt	r3, r3
 800704a:	f042 0202 	orrlt.w	r2, r2, #2
 800704e:	9307      	strge	r3, [sp, #28]
 8007050:	9307      	strlt	r3, [sp, #28]
 8007052:	bfb8      	it	lt
 8007054:	9204      	strlt	r2, [sp, #16]
 8007056:	7823      	ldrb	r3, [r4, #0]
 8007058:	2b2e      	cmp	r3, #46	@ 0x2e
 800705a:	d10a      	bne.n	8007072 <_vfiprintf_r+0x156>
 800705c:	7863      	ldrb	r3, [r4, #1]
 800705e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007060:	d132      	bne.n	80070c8 <_vfiprintf_r+0x1ac>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	1d1a      	adds	r2, r3, #4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	9203      	str	r2, [sp, #12]
 800706a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800706e:	3402      	adds	r4, #2
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007148 <_vfiprintf_r+0x22c>
 8007076:	7821      	ldrb	r1, [r4, #0]
 8007078:	2203      	movs	r2, #3
 800707a:	4650      	mov	r0, sl
 800707c:	f7f9 f8a8 	bl	80001d0 <memchr>
 8007080:	b138      	cbz	r0, 8007092 <_vfiprintf_r+0x176>
 8007082:	9b04      	ldr	r3, [sp, #16]
 8007084:	eba0 000a 	sub.w	r0, r0, sl
 8007088:	2240      	movs	r2, #64	@ 0x40
 800708a:	4082      	lsls	r2, r0
 800708c:	4313      	orrs	r3, r2
 800708e:	3401      	adds	r4, #1
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4829      	ldr	r0, [pc, #164]	@ (800713c <_vfiprintf_r+0x220>)
 8007098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800709c:	2206      	movs	r2, #6
 800709e:	f7f9 f897 	bl	80001d0 <memchr>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d03f      	beq.n	8007126 <_vfiprintf_r+0x20a>
 80070a6:	4b26      	ldr	r3, [pc, #152]	@ (8007140 <_vfiprintf_r+0x224>)
 80070a8:	bb1b      	cbnz	r3, 80070f2 <_vfiprintf_r+0x1d6>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	3307      	adds	r3, #7
 80070ae:	f023 0307 	bic.w	r3, r3, #7
 80070b2:	3308      	adds	r3, #8
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b8:	443b      	add	r3, r7
 80070ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80070bc:	e76a      	b.n	8006f94 <_vfiprintf_r+0x78>
 80070be:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c2:	460c      	mov	r4, r1
 80070c4:	2001      	movs	r0, #1
 80070c6:	e7a8      	b.n	800701a <_vfiprintf_r+0xfe>
 80070c8:	2300      	movs	r3, #0
 80070ca:	3401      	adds	r4, #1
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	4619      	mov	r1, r3
 80070d0:	f04f 0c0a 	mov.w	ip, #10
 80070d4:	4620      	mov	r0, r4
 80070d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070da:	3a30      	subs	r2, #48	@ 0x30
 80070dc:	2a09      	cmp	r2, #9
 80070de:	d903      	bls.n	80070e8 <_vfiprintf_r+0x1cc>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0c6      	beq.n	8007072 <_vfiprintf_r+0x156>
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	e7c4      	b.n	8007072 <_vfiprintf_r+0x156>
 80070e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ec:	4604      	mov	r4, r0
 80070ee:	2301      	movs	r3, #1
 80070f0:	e7f0      	b.n	80070d4 <_vfiprintf_r+0x1b8>
 80070f2:	ab03      	add	r3, sp, #12
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	462a      	mov	r2, r5
 80070f8:	4b12      	ldr	r3, [pc, #72]	@ (8007144 <_vfiprintf_r+0x228>)
 80070fa:	a904      	add	r1, sp, #16
 80070fc:	4630      	mov	r0, r6
 80070fe:	f3af 8000 	nop.w
 8007102:	4607      	mov	r7, r0
 8007104:	1c78      	adds	r0, r7, #1
 8007106:	d1d6      	bne.n	80070b6 <_vfiprintf_r+0x19a>
 8007108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800710a:	07d9      	lsls	r1, r3, #31
 800710c:	d405      	bmi.n	800711a <_vfiprintf_r+0x1fe>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	059a      	lsls	r2, r3, #22
 8007112:	d402      	bmi.n	800711a <_vfiprintf_r+0x1fe>
 8007114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007116:	f7fe fdb7 	bl	8005c88 <__retarget_lock_release_recursive>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	065b      	lsls	r3, r3, #25
 800711e:	f53f af1f 	bmi.w	8006f60 <_vfiprintf_r+0x44>
 8007122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007124:	e71e      	b.n	8006f64 <_vfiprintf_r+0x48>
 8007126:	ab03      	add	r3, sp, #12
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	462a      	mov	r2, r5
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <_vfiprintf_r+0x228>)
 800712e:	a904      	add	r1, sp, #16
 8007130:	4630      	mov	r0, r6
 8007132:	f000 f879 	bl	8007228 <_printf_i>
 8007136:	e7e4      	b.n	8007102 <_vfiprintf_r+0x1e6>
 8007138:	08007cf8 	.word	0x08007cf8
 800713c:	08007d02 	.word	0x08007d02
 8007140:	00000000 	.word	0x00000000
 8007144:	08006ef9 	.word	0x08006ef9
 8007148:	08007cfe 	.word	0x08007cfe

0800714c <_printf_common>:
 800714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007150:	4616      	mov	r6, r2
 8007152:	4698      	mov	r8, r3
 8007154:	688a      	ldr	r2, [r1, #8]
 8007156:	690b      	ldr	r3, [r1, #16]
 8007158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800715c:	4293      	cmp	r3, r2
 800715e:	bfb8      	it	lt
 8007160:	4613      	movlt	r3, r2
 8007162:	6033      	str	r3, [r6, #0]
 8007164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007168:	4607      	mov	r7, r0
 800716a:	460c      	mov	r4, r1
 800716c:	b10a      	cbz	r2, 8007172 <_printf_common+0x26>
 800716e:	3301      	adds	r3, #1
 8007170:	6033      	str	r3, [r6, #0]
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	0699      	lsls	r1, r3, #26
 8007176:	bf42      	ittt	mi
 8007178:	6833      	ldrmi	r3, [r6, #0]
 800717a:	3302      	addmi	r3, #2
 800717c:	6033      	strmi	r3, [r6, #0]
 800717e:	6825      	ldr	r5, [r4, #0]
 8007180:	f015 0506 	ands.w	r5, r5, #6
 8007184:	d106      	bne.n	8007194 <_printf_common+0x48>
 8007186:	f104 0a19 	add.w	sl, r4, #25
 800718a:	68e3      	ldr	r3, [r4, #12]
 800718c:	6832      	ldr	r2, [r6, #0]
 800718e:	1a9b      	subs	r3, r3, r2
 8007190:	42ab      	cmp	r3, r5
 8007192:	dc26      	bgt.n	80071e2 <_printf_common+0x96>
 8007194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	3b00      	subs	r3, #0
 800719c:	bf18      	it	ne
 800719e:	2301      	movne	r3, #1
 80071a0:	0692      	lsls	r2, r2, #26
 80071a2:	d42b      	bmi.n	80071fc <_printf_common+0xb0>
 80071a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071a8:	4641      	mov	r1, r8
 80071aa:	4638      	mov	r0, r7
 80071ac:	47c8      	blx	r9
 80071ae:	3001      	adds	r0, #1
 80071b0:	d01e      	beq.n	80071f0 <_printf_common+0xa4>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	6922      	ldr	r2, [r4, #16]
 80071b6:	f003 0306 	and.w	r3, r3, #6
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	bf02      	ittt	eq
 80071be:	68e5      	ldreq	r5, [r4, #12]
 80071c0:	6833      	ldreq	r3, [r6, #0]
 80071c2:	1aed      	subeq	r5, r5, r3
 80071c4:	68a3      	ldr	r3, [r4, #8]
 80071c6:	bf0c      	ite	eq
 80071c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071cc:	2500      	movne	r5, #0
 80071ce:	4293      	cmp	r3, r2
 80071d0:	bfc4      	itt	gt
 80071d2:	1a9b      	subgt	r3, r3, r2
 80071d4:	18ed      	addgt	r5, r5, r3
 80071d6:	2600      	movs	r6, #0
 80071d8:	341a      	adds	r4, #26
 80071da:	42b5      	cmp	r5, r6
 80071dc:	d11a      	bne.n	8007214 <_printf_common+0xc8>
 80071de:	2000      	movs	r0, #0
 80071e0:	e008      	b.n	80071f4 <_printf_common+0xa8>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4652      	mov	r2, sl
 80071e6:	4641      	mov	r1, r8
 80071e8:	4638      	mov	r0, r7
 80071ea:	47c8      	blx	r9
 80071ec:	3001      	adds	r0, #1
 80071ee:	d103      	bne.n	80071f8 <_printf_common+0xac>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f8:	3501      	adds	r5, #1
 80071fa:	e7c6      	b.n	800718a <_printf_common+0x3e>
 80071fc:	18e1      	adds	r1, r4, r3
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	2030      	movs	r0, #48	@ 0x30
 8007202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007206:	4422      	add	r2, r4
 8007208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800720c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007210:	3302      	adds	r3, #2
 8007212:	e7c7      	b.n	80071a4 <_printf_common+0x58>
 8007214:	2301      	movs	r3, #1
 8007216:	4622      	mov	r2, r4
 8007218:	4641      	mov	r1, r8
 800721a:	4638      	mov	r0, r7
 800721c:	47c8      	blx	r9
 800721e:	3001      	adds	r0, #1
 8007220:	d0e6      	beq.n	80071f0 <_printf_common+0xa4>
 8007222:	3601      	adds	r6, #1
 8007224:	e7d9      	b.n	80071da <_printf_common+0x8e>
	...

08007228 <_printf_i>:
 8007228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800722c:	7e0f      	ldrb	r7, [r1, #24]
 800722e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007230:	2f78      	cmp	r7, #120	@ 0x78
 8007232:	4691      	mov	r9, r2
 8007234:	4680      	mov	r8, r0
 8007236:	460c      	mov	r4, r1
 8007238:	469a      	mov	sl, r3
 800723a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800723e:	d807      	bhi.n	8007250 <_printf_i+0x28>
 8007240:	2f62      	cmp	r7, #98	@ 0x62
 8007242:	d80a      	bhi.n	800725a <_printf_i+0x32>
 8007244:	2f00      	cmp	r7, #0
 8007246:	f000 80d2 	beq.w	80073ee <_printf_i+0x1c6>
 800724a:	2f58      	cmp	r7, #88	@ 0x58
 800724c:	f000 80b9 	beq.w	80073c2 <_printf_i+0x19a>
 8007250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007258:	e03a      	b.n	80072d0 <_printf_i+0xa8>
 800725a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800725e:	2b15      	cmp	r3, #21
 8007260:	d8f6      	bhi.n	8007250 <_printf_i+0x28>
 8007262:	a101      	add	r1, pc, #4	@ (adr r1, 8007268 <_printf_i+0x40>)
 8007264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072d5 	.word	0x080072d5
 8007270:	08007251 	.word	0x08007251
 8007274:	08007251 	.word	0x08007251
 8007278:	08007251 	.word	0x08007251
 800727c:	08007251 	.word	0x08007251
 8007280:	080072d5 	.word	0x080072d5
 8007284:	08007251 	.word	0x08007251
 8007288:	08007251 	.word	0x08007251
 800728c:	08007251 	.word	0x08007251
 8007290:	08007251 	.word	0x08007251
 8007294:	080073d5 	.word	0x080073d5
 8007298:	080072ff 	.word	0x080072ff
 800729c:	0800738f 	.word	0x0800738f
 80072a0:	08007251 	.word	0x08007251
 80072a4:	08007251 	.word	0x08007251
 80072a8:	080073f7 	.word	0x080073f7
 80072ac:	08007251 	.word	0x08007251
 80072b0:	080072ff 	.word	0x080072ff
 80072b4:	08007251 	.word	0x08007251
 80072b8:	08007251 	.word	0x08007251
 80072bc:	08007397 	.word	0x08007397
 80072c0:	6833      	ldr	r3, [r6, #0]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6032      	str	r2, [r6, #0]
 80072c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072d0:	2301      	movs	r3, #1
 80072d2:	e09d      	b.n	8007410 <_printf_i+0x1e8>
 80072d4:	6833      	ldr	r3, [r6, #0]
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	1d19      	adds	r1, r3, #4
 80072da:	6031      	str	r1, [r6, #0]
 80072dc:	0606      	lsls	r6, r0, #24
 80072de:	d501      	bpl.n	80072e4 <_printf_i+0xbc>
 80072e0:	681d      	ldr	r5, [r3, #0]
 80072e2:	e003      	b.n	80072ec <_printf_i+0xc4>
 80072e4:	0645      	lsls	r5, r0, #25
 80072e6:	d5fb      	bpl.n	80072e0 <_printf_i+0xb8>
 80072e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	da03      	bge.n	80072f8 <_printf_i+0xd0>
 80072f0:	232d      	movs	r3, #45	@ 0x2d
 80072f2:	426d      	negs	r5, r5
 80072f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072f8:	4859      	ldr	r0, [pc, #356]	@ (8007460 <_printf_i+0x238>)
 80072fa:	230a      	movs	r3, #10
 80072fc:	e011      	b.n	8007322 <_printf_i+0xfa>
 80072fe:	6821      	ldr	r1, [r4, #0]
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	0608      	lsls	r0, r1, #24
 8007304:	f853 5b04 	ldr.w	r5, [r3], #4
 8007308:	d402      	bmi.n	8007310 <_printf_i+0xe8>
 800730a:	0649      	lsls	r1, r1, #25
 800730c:	bf48      	it	mi
 800730e:	b2ad      	uxthmi	r5, r5
 8007310:	2f6f      	cmp	r7, #111	@ 0x6f
 8007312:	4853      	ldr	r0, [pc, #332]	@ (8007460 <_printf_i+0x238>)
 8007314:	6033      	str	r3, [r6, #0]
 8007316:	bf14      	ite	ne
 8007318:	230a      	movne	r3, #10
 800731a:	2308      	moveq	r3, #8
 800731c:	2100      	movs	r1, #0
 800731e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007322:	6866      	ldr	r6, [r4, #4]
 8007324:	60a6      	str	r6, [r4, #8]
 8007326:	2e00      	cmp	r6, #0
 8007328:	bfa2      	ittt	ge
 800732a:	6821      	ldrge	r1, [r4, #0]
 800732c:	f021 0104 	bicge.w	r1, r1, #4
 8007330:	6021      	strge	r1, [r4, #0]
 8007332:	b90d      	cbnz	r5, 8007338 <_printf_i+0x110>
 8007334:	2e00      	cmp	r6, #0
 8007336:	d04b      	beq.n	80073d0 <_printf_i+0x1a8>
 8007338:	4616      	mov	r6, r2
 800733a:	fbb5 f1f3 	udiv	r1, r5, r3
 800733e:	fb03 5711 	mls	r7, r3, r1, r5
 8007342:	5dc7      	ldrb	r7, [r0, r7]
 8007344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007348:	462f      	mov	r7, r5
 800734a:	42bb      	cmp	r3, r7
 800734c:	460d      	mov	r5, r1
 800734e:	d9f4      	bls.n	800733a <_printf_i+0x112>
 8007350:	2b08      	cmp	r3, #8
 8007352:	d10b      	bne.n	800736c <_printf_i+0x144>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07df      	lsls	r7, r3, #31
 8007358:	d508      	bpl.n	800736c <_printf_i+0x144>
 800735a:	6923      	ldr	r3, [r4, #16]
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4299      	cmp	r1, r3
 8007360:	bfde      	ittt	le
 8007362:	2330      	movle	r3, #48	@ 0x30
 8007364:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007368:	f106 36ff 	addle.w	r6, r6, #4294967295
 800736c:	1b92      	subs	r2, r2, r6
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	f8cd a000 	str.w	sl, [sp]
 8007374:	464b      	mov	r3, r9
 8007376:	aa03      	add	r2, sp, #12
 8007378:	4621      	mov	r1, r4
 800737a:	4640      	mov	r0, r8
 800737c:	f7ff fee6 	bl	800714c <_printf_common>
 8007380:	3001      	adds	r0, #1
 8007382:	d14a      	bne.n	800741a <_printf_i+0x1f2>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	b004      	add	sp, #16
 800738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f043 0320 	orr.w	r3, r3, #32
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	4833      	ldr	r0, [pc, #204]	@ (8007464 <_printf_i+0x23c>)
 8007398:	2778      	movs	r7, #120	@ 0x78
 800739a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	6831      	ldr	r1, [r6, #0]
 80073a2:	061f      	lsls	r7, r3, #24
 80073a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80073a8:	d402      	bmi.n	80073b0 <_printf_i+0x188>
 80073aa:	065f      	lsls	r7, r3, #25
 80073ac:	bf48      	it	mi
 80073ae:	b2ad      	uxthmi	r5, r5
 80073b0:	6031      	str	r1, [r6, #0]
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	bf44      	itt	mi
 80073b6:	f043 0320 	orrmi.w	r3, r3, #32
 80073ba:	6023      	strmi	r3, [r4, #0]
 80073bc:	b11d      	cbz	r5, 80073c6 <_printf_i+0x19e>
 80073be:	2310      	movs	r3, #16
 80073c0:	e7ac      	b.n	800731c <_printf_i+0xf4>
 80073c2:	4827      	ldr	r0, [pc, #156]	@ (8007460 <_printf_i+0x238>)
 80073c4:	e7e9      	b.n	800739a <_printf_i+0x172>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f023 0320 	bic.w	r3, r3, #32
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	e7f6      	b.n	80073be <_printf_i+0x196>
 80073d0:	4616      	mov	r6, r2
 80073d2:	e7bd      	b.n	8007350 <_printf_i+0x128>
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	6825      	ldr	r5, [r4, #0]
 80073d8:	6961      	ldr	r1, [r4, #20]
 80073da:	1d18      	adds	r0, r3, #4
 80073dc:	6030      	str	r0, [r6, #0]
 80073de:	062e      	lsls	r6, r5, #24
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	d501      	bpl.n	80073e8 <_printf_i+0x1c0>
 80073e4:	6019      	str	r1, [r3, #0]
 80073e6:	e002      	b.n	80073ee <_printf_i+0x1c6>
 80073e8:	0668      	lsls	r0, r5, #25
 80073ea:	d5fb      	bpl.n	80073e4 <_printf_i+0x1bc>
 80073ec:	8019      	strh	r1, [r3, #0]
 80073ee:	2300      	movs	r3, #0
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	4616      	mov	r6, r2
 80073f4:	e7bc      	b.n	8007370 <_printf_i+0x148>
 80073f6:	6833      	ldr	r3, [r6, #0]
 80073f8:	1d1a      	adds	r2, r3, #4
 80073fa:	6032      	str	r2, [r6, #0]
 80073fc:	681e      	ldr	r6, [r3, #0]
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	2100      	movs	r1, #0
 8007402:	4630      	mov	r0, r6
 8007404:	f7f8 fee4 	bl	80001d0 <memchr>
 8007408:	b108      	cbz	r0, 800740e <_printf_i+0x1e6>
 800740a:	1b80      	subs	r0, r0, r6
 800740c:	6060      	str	r0, [r4, #4]
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	2300      	movs	r3, #0
 8007414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007418:	e7aa      	b.n	8007370 <_printf_i+0x148>
 800741a:	6923      	ldr	r3, [r4, #16]
 800741c:	4632      	mov	r2, r6
 800741e:	4649      	mov	r1, r9
 8007420:	4640      	mov	r0, r8
 8007422:	47d0      	blx	sl
 8007424:	3001      	adds	r0, #1
 8007426:	d0ad      	beq.n	8007384 <_printf_i+0x15c>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	079b      	lsls	r3, r3, #30
 800742c:	d413      	bmi.n	8007456 <_printf_i+0x22e>
 800742e:	68e0      	ldr	r0, [r4, #12]
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	4298      	cmp	r0, r3
 8007434:	bfb8      	it	lt
 8007436:	4618      	movlt	r0, r3
 8007438:	e7a6      	b.n	8007388 <_printf_i+0x160>
 800743a:	2301      	movs	r3, #1
 800743c:	4632      	mov	r2, r6
 800743e:	4649      	mov	r1, r9
 8007440:	4640      	mov	r0, r8
 8007442:	47d0      	blx	sl
 8007444:	3001      	adds	r0, #1
 8007446:	d09d      	beq.n	8007384 <_printf_i+0x15c>
 8007448:	3501      	adds	r5, #1
 800744a:	68e3      	ldr	r3, [r4, #12]
 800744c:	9903      	ldr	r1, [sp, #12]
 800744e:	1a5b      	subs	r3, r3, r1
 8007450:	42ab      	cmp	r3, r5
 8007452:	dcf2      	bgt.n	800743a <_printf_i+0x212>
 8007454:	e7eb      	b.n	800742e <_printf_i+0x206>
 8007456:	2500      	movs	r5, #0
 8007458:	f104 0619 	add.w	r6, r4, #25
 800745c:	e7f5      	b.n	800744a <_printf_i+0x222>
 800745e:	bf00      	nop
 8007460:	08007d09 	.word	0x08007d09
 8007464:	08007d1a 	.word	0x08007d1a

08007468 <__sflush_r>:
 8007468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007470:	0716      	lsls	r6, r2, #28
 8007472:	4605      	mov	r5, r0
 8007474:	460c      	mov	r4, r1
 8007476:	d454      	bmi.n	8007522 <__sflush_r+0xba>
 8007478:	684b      	ldr	r3, [r1, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dc02      	bgt.n	8007484 <__sflush_r+0x1c>
 800747e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	dd48      	ble.n	8007516 <__sflush_r+0xae>
 8007484:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007486:	2e00      	cmp	r6, #0
 8007488:	d045      	beq.n	8007516 <__sflush_r+0xae>
 800748a:	2300      	movs	r3, #0
 800748c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007490:	682f      	ldr	r7, [r5, #0]
 8007492:	6a21      	ldr	r1, [r4, #32]
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	d030      	beq.n	80074fa <__sflush_r+0x92>
 8007498:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0759      	lsls	r1, r3, #29
 800749e:	d505      	bpl.n	80074ac <__sflush_r+0x44>
 80074a0:	6863      	ldr	r3, [r4, #4]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074a6:	b10b      	cbz	r3, 80074ac <__sflush_r+0x44>
 80074a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074aa:	1ad2      	subs	r2, r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b0      	blx	r6
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	d106      	bne.n	80074ca <__sflush_r+0x62>
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	291d      	cmp	r1, #29
 80074c0:	d82b      	bhi.n	800751a <__sflush_r+0xb2>
 80074c2:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <__sflush_r+0x104>)
 80074c4:	410a      	asrs	r2, r1
 80074c6:	07d6      	lsls	r6, r2, #31
 80074c8:	d427      	bmi.n	800751a <__sflush_r+0xb2>
 80074ca:	2200      	movs	r2, #0
 80074cc:	6062      	str	r2, [r4, #4]
 80074ce:	04d9      	lsls	r1, r3, #19
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	6022      	str	r2, [r4, #0]
 80074d4:	d504      	bpl.n	80074e0 <__sflush_r+0x78>
 80074d6:	1c42      	adds	r2, r0, #1
 80074d8:	d101      	bne.n	80074de <__sflush_r+0x76>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	b903      	cbnz	r3, 80074e0 <__sflush_r+0x78>
 80074de:	6560      	str	r0, [r4, #84]	@ 0x54
 80074e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e2:	602f      	str	r7, [r5, #0]
 80074e4:	b1b9      	cbz	r1, 8007516 <__sflush_r+0xae>
 80074e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d002      	beq.n	80074f4 <__sflush_r+0x8c>
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7fe fbe8 	bl	8005cc4 <_free_r>
 80074f4:	2300      	movs	r3, #0
 80074f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80074f8:	e00d      	b.n	8007516 <__sflush_r+0xae>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b0      	blx	r6
 8007500:	4602      	mov	r2, r0
 8007502:	1c50      	adds	r0, r2, #1
 8007504:	d1c9      	bne.n	800749a <__sflush_r+0x32>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0c6      	beq.n	800749a <__sflush_r+0x32>
 800750c:	2b1d      	cmp	r3, #29
 800750e:	d001      	beq.n	8007514 <__sflush_r+0xac>
 8007510:	2b16      	cmp	r3, #22
 8007512:	d11e      	bne.n	8007552 <__sflush_r+0xea>
 8007514:	602f      	str	r7, [r5, #0]
 8007516:	2000      	movs	r0, #0
 8007518:	e022      	b.n	8007560 <__sflush_r+0xf8>
 800751a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751e:	b21b      	sxth	r3, r3
 8007520:	e01b      	b.n	800755a <__sflush_r+0xf2>
 8007522:	690f      	ldr	r7, [r1, #16]
 8007524:	2f00      	cmp	r7, #0
 8007526:	d0f6      	beq.n	8007516 <__sflush_r+0xae>
 8007528:	0793      	lsls	r3, r2, #30
 800752a:	680e      	ldr	r6, [r1, #0]
 800752c:	bf08      	it	eq
 800752e:	694b      	ldreq	r3, [r1, #20]
 8007530:	600f      	str	r7, [r1, #0]
 8007532:	bf18      	it	ne
 8007534:	2300      	movne	r3, #0
 8007536:	eba6 0807 	sub.w	r8, r6, r7
 800753a:	608b      	str	r3, [r1, #8]
 800753c:	f1b8 0f00 	cmp.w	r8, #0
 8007540:	dde9      	ble.n	8007516 <__sflush_r+0xae>
 8007542:	6a21      	ldr	r1, [r4, #32]
 8007544:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007546:	4643      	mov	r3, r8
 8007548:	463a      	mov	r2, r7
 800754a:	4628      	mov	r0, r5
 800754c:	47b0      	blx	r6
 800754e:	2800      	cmp	r0, #0
 8007550:	dc08      	bgt.n	8007564 <__sflush_r+0xfc>
 8007552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007564:	4407      	add	r7, r0
 8007566:	eba8 0800 	sub.w	r8, r8, r0
 800756a:	e7e7      	b.n	800753c <__sflush_r+0xd4>
 800756c:	dfbffffe 	.word	0xdfbffffe

08007570 <_fflush_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	4605      	mov	r5, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b913      	cbnz	r3, 8007580 <_fflush_r+0x10>
 800757a:	2500      	movs	r5, #0
 800757c:	4628      	mov	r0, r5
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	b118      	cbz	r0, 800758a <_fflush_r+0x1a>
 8007582:	6a03      	ldr	r3, [r0, #32]
 8007584:	b90b      	cbnz	r3, 800758a <_fflush_r+0x1a>
 8007586:	f7fe fa67 	bl	8005a58 <__sinit>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f3      	beq.n	800757a <_fflush_r+0xa>
 8007592:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d404      	bmi.n	80075a2 <_fflush_r+0x32>
 8007598:	0599      	lsls	r1, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_fflush_r+0x32>
 800759c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800759e:	f7fe fb72 	bl	8005c86 <__retarget_lock_acquire_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7ff ff5f 	bl	8007468 <__sflush_r>
 80075aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075ac:	07da      	lsls	r2, r3, #31
 80075ae:	4605      	mov	r5, r0
 80075b0:	d4e4      	bmi.n	800757c <_fflush_r+0xc>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	d4e1      	bmi.n	800757c <_fflush_r+0xc>
 80075b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ba:	f7fe fb65 	bl	8005c88 <__retarget_lock_release_recursive>
 80075be:	e7dd      	b.n	800757c <_fflush_r+0xc>

080075c0 <__swbuf_r>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	460e      	mov	r6, r1
 80075c4:	4614      	mov	r4, r2
 80075c6:	4605      	mov	r5, r0
 80075c8:	b118      	cbz	r0, 80075d2 <__swbuf_r+0x12>
 80075ca:	6a03      	ldr	r3, [r0, #32]
 80075cc:	b90b      	cbnz	r3, 80075d2 <__swbuf_r+0x12>
 80075ce:	f7fe fa43 	bl	8005a58 <__sinit>
 80075d2:	69a3      	ldr	r3, [r4, #24]
 80075d4:	60a3      	str	r3, [r4, #8]
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	071a      	lsls	r2, r3, #28
 80075da:	d501      	bpl.n	80075e0 <__swbuf_r+0x20>
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	b943      	cbnz	r3, 80075f2 <__swbuf_r+0x32>
 80075e0:	4621      	mov	r1, r4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f82a 	bl	800763c <__swsetup_r>
 80075e8:	b118      	cbz	r0, 80075f2 <__swbuf_r+0x32>
 80075ea:	f04f 37ff 	mov.w	r7, #4294967295
 80075ee:	4638      	mov	r0, r7
 80075f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	6922      	ldr	r2, [r4, #16]
 80075f6:	1a98      	subs	r0, r3, r2
 80075f8:	6963      	ldr	r3, [r4, #20]
 80075fa:	b2f6      	uxtb	r6, r6
 80075fc:	4283      	cmp	r3, r0
 80075fe:	4637      	mov	r7, r6
 8007600:	dc05      	bgt.n	800760e <__swbuf_r+0x4e>
 8007602:	4621      	mov	r1, r4
 8007604:	4628      	mov	r0, r5
 8007606:	f7ff ffb3 	bl	8007570 <_fflush_r>
 800760a:	2800      	cmp	r0, #0
 800760c:	d1ed      	bne.n	80075ea <__swbuf_r+0x2a>
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	3b01      	subs	r3, #1
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	6022      	str	r2, [r4, #0]
 800761a:	701e      	strb	r6, [r3, #0]
 800761c:	6962      	ldr	r2, [r4, #20]
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	429a      	cmp	r2, r3
 8007622:	d004      	beq.n	800762e <__swbuf_r+0x6e>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	07db      	lsls	r3, r3, #31
 8007628:	d5e1      	bpl.n	80075ee <__swbuf_r+0x2e>
 800762a:	2e0a      	cmp	r6, #10
 800762c:	d1df      	bne.n	80075ee <__swbuf_r+0x2e>
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f7ff ff9d 	bl	8007570 <_fflush_r>
 8007636:	2800      	cmp	r0, #0
 8007638:	d0d9      	beq.n	80075ee <__swbuf_r+0x2e>
 800763a:	e7d6      	b.n	80075ea <__swbuf_r+0x2a>

0800763c <__swsetup_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4b29      	ldr	r3, [pc, #164]	@ (80076e4 <__swsetup_r+0xa8>)
 8007640:	4605      	mov	r5, r0
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	460c      	mov	r4, r1
 8007646:	b118      	cbz	r0, 8007650 <__swsetup_r+0x14>
 8007648:	6a03      	ldr	r3, [r0, #32]
 800764a:	b90b      	cbnz	r3, 8007650 <__swsetup_r+0x14>
 800764c:	f7fe fa04 	bl	8005a58 <__sinit>
 8007650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007654:	0719      	lsls	r1, r3, #28
 8007656:	d422      	bmi.n	800769e <__swsetup_r+0x62>
 8007658:	06da      	lsls	r2, r3, #27
 800765a:	d407      	bmi.n	800766c <__swsetup_r+0x30>
 800765c:	2209      	movs	r2, #9
 800765e:	602a      	str	r2, [r5, #0]
 8007660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	e033      	b.n	80076d4 <__swsetup_r+0x98>
 800766c:	0758      	lsls	r0, r3, #29
 800766e:	d512      	bpl.n	8007696 <__swsetup_r+0x5a>
 8007670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007672:	b141      	cbz	r1, 8007686 <__swsetup_r+0x4a>
 8007674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <__swsetup_r+0x46>
 800767c:	4628      	mov	r0, r5
 800767e:	f7fe fb21 	bl	8005cc4 <_free_r>
 8007682:	2300      	movs	r3, #0
 8007684:	6363      	str	r3, [r4, #52]	@ 0x34
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	2300      	movs	r3, #0
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f043 0308 	orr.w	r3, r3, #8
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	b94b      	cbnz	r3, 80076b6 <__swsetup_r+0x7a>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ac:	d003      	beq.n	80076b6 <__swsetup_r+0x7a>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f000 f89b 	bl	80077ec <__smakebuf_r>
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	f013 0201 	ands.w	r2, r3, #1
 80076be:	d00a      	beq.n	80076d6 <__swsetup_r+0x9a>
 80076c0:	2200      	movs	r2, #0
 80076c2:	60a2      	str	r2, [r4, #8]
 80076c4:	6962      	ldr	r2, [r4, #20]
 80076c6:	4252      	negs	r2, r2
 80076c8:	61a2      	str	r2, [r4, #24]
 80076ca:	6922      	ldr	r2, [r4, #16]
 80076cc:	b942      	cbnz	r2, 80076e0 <__swsetup_r+0xa4>
 80076ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076d2:	d1c5      	bne.n	8007660 <__swsetup_r+0x24>
 80076d4:	bd38      	pop	{r3, r4, r5, pc}
 80076d6:	0799      	lsls	r1, r3, #30
 80076d8:	bf58      	it	pl
 80076da:	6962      	ldrpl	r2, [r4, #20]
 80076dc:	60a2      	str	r2, [r4, #8]
 80076de:	e7f4      	b.n	80076ca <__swsetup_r+0x8e>
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7f7      	b.n	80076d4 <__swsetup_r+0x98>
 80076e4:	20000184 	.word	0x20000184

080076e8 <_sbrk_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d06      	ldr	r5, [pc, #24]	@ (8007704 <_sbrk_r+0x1c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7fa f8c4 	bl	8001880 <_sbrk>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_sbrk_r+0x1a>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_sbrk_r+0x1a>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	20000488 	.word	0x20000488

08007708 <__assert_func>:
 8007708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800770a:	4614      	mov	r4, r2
 800770c:	461a      	mov	r2, r3
 800770e:	4b09      	ldr	r3, [pc, #36]	@ (8007734 <__assert_func+0x2c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4605      	mov	r5, r0
 8007714:	68d8      	ldr	r0, [r3, #12]
 8007716:	b954      	cbnz	r4, 800772e <__assert_func+0x26>
 8007718:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <__assert_func+0x30>)
 800771a:	461c      	mov	r4, r3
 800771c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007720:	9100      	str	r1, [sp, #0]
 8007722:	462b      	mov	r3, r5
 8007724:	4905      	ldr	r1, [pc, #20]	@ (800773c <__assert_func+0x34>)
 8007726:	f000 f829 	bl	800777c <fiprintf>
 800772a:	f000 f8bd 	bl	80078a8 <abort>
 800772e:	4b04      	ldr	r3, [pc, #16]	@ (8007740 <__assert_func+0x38>)
 8007730:	e7f4      	b.n	800771c <__assert_func+0x14>
 8007732:	bf00      	nop
 8007734:	20000184 	.word	0x20000184
 8007738:	08007d66 	.word	0x08007d66
 800773c:	08007d38 	.word	0x08007d38
 8007740:	08007d2b 	.word	0x08007d2b

08007744 <_calloc_r>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	fba1 5402 	umull	r5, r4, r1, r2
 800774a:	b93c      	cbnz	r4, 800775c <_calloc_r+0x18>
 800774c:	4629      	mov	r1, r5
 800774e:	f7fe fe5f 	bl	8006410 <_malloc_r>
 8007752:	4606      	mov	r6, r0
 8007754:	b928      	cbnz	r0, 8007762 <_calloc_r+0x1e>
 8007756:	2600      	movs	r6, #0
 8007758:	4630      	mov	r0, r6
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	220c      	movs	r2, #12
 800775e:	6002      	str	r2, [r0, #0]
 8007760:	e7f9      	b.n	8007756 <_calloc_r+0x12>
 8007762:	462a      	mov	r2, r5
 8007764:	4621      	mov	r1, r4
 8007766:	f7fe fa02 	bl	8005b6e <memset>
 800776a:	e7f5      	b.n	8007758 <_calloc_r+0x14>

0800776c <malloc>:
 800776c:	4b02      	ldr	r3, [pc, #8]	@ (8007778 <malloc+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f7fe be4d 	b.w	8006410 <_malloc_r>
 8007776:	bf00      	nop
 8007778:	20000184 	.word	0x20000184

0800777c <fiprintf>:
 800777c:	b40e      	push	{r1, r2, r3}
 800777e:	b503      	push	{r0, r1, lr}
 8007780:	4601      	mov	r1, r0
 8007782:	ab03      	add	r3, sp, #12
 8007784:	4805      	ldr	r0, [pc, #20]	@ (800779c <fiprintf+0x20>)
 8007786:	f853 2b04 	ldr.w	r2, [r3], #4
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	f7ff fbc5 	bl	8006f1c <_vfiprintf_r>
 8007792:	b002      	add	sp, #8
 8007794:	f85d eb04 	ldr.w	lr, [sp], #4
 8007798:	b003      	add	sp, #12
 800779a:	4770      	bx	lr
 800779c:	20000184 	.word	0x20000184

080077a0 <__swhatbuf_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	b096      	sub	sp, #88	@ 0x58
 80077ac:	4615      	mov	r5, r2
 80077ae:	461e      	mov	r6, r3
 80077b0:	da0d      	bge.n	80077ce <__swhatbuf_r+0x2e>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077b8:	f04f 0100 	mov.w	r1, #0
 80077bc:	bf14      	ite	ne
 80077be:	2340      	movne	r3, #64	@ 0x40
 80077c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077c4:	2000      	movs	r0, #0
 80077c6:	6031      	str	r1, [r6, #0]
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	b016      	add	sp, #88	@ 0x58
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
 80077ce:	466a      	mov	r2, sp
 80077d0:	f000 f848 	bl	8007864 <_fstat_r>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dbec      	blt.n	80077b2 <__swhatbuf_r+0x12>
 80077d8:	9901      	ldr	r1, [sp, #4]
 80077da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077e2:	4259      	negs	r1, r3
 80077e4:	4159      	adcs	r1, r3
 80077e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ea:	e7eb      	b.n	80077c4 <__swhatbuf_r+0x24>

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b003      	add	sp, #12
 8007806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007808:	ab01      	add	r3, sp, #4
 800780a:	466a      	mov	r2, sp
 800780c:	f7ff ffc8 	bl	80077a0 <__swhatbuf_r>
 8007810:	9f00      	ldr	r7, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4639      	mov	r1, r7
 8007816:	4630      	mov	r0, r6
 8007818:	f7fe fdfa 	bl	8006410 <_malloc_r>
 800781c:	b948      	cbnz	r0, 8007832 <__smakebuf_r+0x46>
 800781e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007822:	059a      	lsls	r2, r3, #22
 8007824:	d4ee      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	e7e2      	b.n	80077f8 <__smakebuf_r+0xc>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	6020      	str	r0, [r4, #0]
 8007836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007842:	b15b      	cbz	r3, 800785c <__smakebuf_r+0x70>
 8007844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007848:	4630      	mov	r0, r6
 800784a:	f000 f81d 	bl	8007888 <_isatty_r>
 800784e:	b128      	cbz	r0, 800785c <__smakebuf_r+0x70>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	431d      	orrs	r5, r3
 8007860:	81a5      	strh	r5, [r4, #12]
 8007862:	e7cf      	b.n	8007804 <__smakebuf_r+0x18>

08007864 <_fstat_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	@ (8007884 <_fstat_r+0x20>)
 8007868:	2300      	movs	r3, #0
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	f7f9 ffdd 	bl	8001830 <_fstat>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	d102      	bne.n	8007880 <_fstat_r+0x1c>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	b103      	cbz	r3, 8007880 <_fstat_r+0x1c>
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	bd38      	pop	{r3, r4, r5, pc}
 8007882:	bf00      	nop
 8007884:	20000488 	.word	0x20000488

08007888 <_isatty_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	@ (80078a4 <_isatty_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 ffdc 	bl	8001850 <_isatty>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_isatty_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_isatty_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000488 	.word	0x20000488

080078a8 <abort>:
 80078a8:	b508      	push	{r3, lr}
 80078aa:	2006      	movs	r0, #6
 80078ac:	f000 f82c 	bl	8007908 <raise>
 80078b0:	2001      	movs	r0, #1
 80078b2:	f7f9 ff89 	bl	80017c8 <_exit>

080078b6 <_raise_r>:
 80078b6:	291f      	cmp	r1, #31
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4605      	mov	r5, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	d904      	bls.n	80078ca <_raise_r+0x14>
 80078c0:	2316      	movs	r3, #22
 80078c2:	6003      	str	r3, [r0, #0]
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	bd38      	pop	{r3, r4, r5, pc}
 80078ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078cc:	b112      	cbz	r2, 80078d4 <_raise_r+0x1e>
 80078ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078d2:	b94b      	cbnz	r3, 80078e8 <_raise_r+0x32>
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 f831 	bl	800793c <_getpid_r>
 80078da:	4622      	mov	r2, r4
 80078dc:	4601      	mov	r1, r0
 80078de:	4628      	mov	r0, r5
 80078e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078e4:	f000 b818 	b.w	8007918 <_kill_r>
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d00a      	beq.n	8007902 <_raise_r+0x4c>
 80078ec:	1c59      	adds	r1, r3, #1
 80078ee:	d103      	bne.n	80078f8 <_raise_r+0x42>
 80078f0:	2316      	movs	r3, #22
 80078f2:	6003      	str	r3, [r0, #0]
 80078f4:	2001      	movs	r0, #1
 80078f6:	e7e7      	b.n	80078c8 <_raise_r+0x12>
 80078f8:	2100      	movs	r1, #0
 80078fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078fe:	4620      	mov	r0, r4
 8007900:	4798      	blx	r3
 8007902:	2000      	movs	r0, #0
 8007904:	e7e0      	b.n	80078c8 <_raise_r+0x12>
	...

08007908 <raise>:
 8007908:	4b02      	ldr	r3, [pc, #8]	@ (8007914 <raise+0xc>)
 800790a:	4601      	mov	r1, r0
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f7ff bfd2 	b.w	80078b6 <_raise_r>
 8007912:	bf00      	nop
 8007914:	20000184 	.word	0x20000184

08007918 <_kill_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	@ (8007938 <_kill_r+0x20>)
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	f7f9 ff3f 	bl	80017a8 <_kill>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d102      	bne.n	8007934 <_kill_r+0x1c>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	b103      	cbz	r3, 8007934 <_kill_r+0x1c>
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	bd38      	pop	{r3, r4, r5, pc}
 8007936:	bf00      	nop
 8007938:	20000488 	.word	0x20000488

0800793c <_getpid_r>:
 800793c:	f7f9 bf2c 	b.w	8001798 <_getpid>

08007940 <_init>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr

0800794c <_fini>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr
